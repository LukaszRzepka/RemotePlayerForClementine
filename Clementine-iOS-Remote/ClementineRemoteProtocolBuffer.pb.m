// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ClementineRemoteProtocolBuffer.pb.h"
// @@protoc_insertion_point(imports)

@implementation ClementineRemoteProtocolBufferRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ClementineRemoteProtocolBufferRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL MsgTypeIsValidValue(MsgType value) {
  switch (value) {
    case MsgTypeUnknown:
    case MsgTypeConnect:
    case MsgTypeRequestPlaylists:
    case MsgTypeRequestPlaylistSongs:
    case MsgTypeChangeSong:
    case MsgTypeSetVolume:
    case MsgTypeSetTrackPosition:
    case MsgTypeInsertUrls:
    case MsgTypeRemoveSongs:
    case MsgTypeOpenPlaylist:
    case MsgTypeClosePlaylist:
    case MsgTypeGetLyrics:
    case MsgTypeDownloadSongs:
    case MsgTypeSongOfferResponse:
    case MsgTypeLove:
    case MsgTypeBan:
    case MsgTypeStopAfter:
    case MsgTypeGetLibrary:
    case MsgTypeRateSong:
    case MsgTypeGlobalSearch:
    case MsgTypeDisconnect:
    case MsgTypePlay:
    case MsgTypePlaypause:
    case MsgTypePause:
    case MsgTypeStop:
    case MsgTypeNext:
    case MsgTypePrevious:
    case MsgTypeShufflePlaylist:
    case MsgTypeRepeat:
    case MsgTypeShuffle:
    case MsgTypeInfo:
    case MsgTypeCurrentMetainfo:
    case MsgTypePlaylists:
    case MsgTypePlaylistSongs:
    case MsgTypeEngineStateChanged:
    case MsgTypeKeepAlive:
    case MsgTypeUpdateTrackPosition:
    case MsgTypeActivePlaylistChanged:
    case MsgTypeFirstDataSentComplete:
    case MsgTypeLyrics:
    case MsgTypeSongFileChunk:
    case MsgTypeDownloadQueueEmpty:
    case MsgTypeLibraryChunk:
    case MsgTypeDownloadTotalSize:
    case MsgTypeGlobalSearchResult:
    case MsgTypeTranscodingFiles:
    case MsgTypeGlobalSearchStatus:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromMsgType(MsgType value) {
  switch (value) {
    case MsgTypeUnknown:
      return @"MsgTypeUnknown";
    case MsgTypeConnect:
      return @"MsgTypeConnect";
    case MsgTypeRequestPlaylists:
      return @"MsgTypeRequestPlaylists";
    case MsgTypeRequestPlaylistSongs:
      return @"MsgTypeRequestPlaylistSongs";
    case MsgTypeChangeSong:
      return @"MsgTypeChangeSong";
    case MsgTypeSetVolume:
      return @"MsgTypeSetVolume";
    case MsgTypeSetTrackPosition:
      return @"MsgTypeSetTrackPosition";
    case MsgTypeInsertUrls:
      return @"MsgTypeInsertUrls";
    case MsgTypeRemoveSongs:
      return @"MsgTypeRemoveSongs";
    case MsgTypeOpenPlaylist:
      return @"MsgTypeOpenPlaylist";
    case MsgTypeClosePlaylist:
      return @"MsgTypeClosePlaylist";
    case MsgTypeGetLyrics:
      return @"MsgTypeGetLyrics";
    case MsgTypeDownloadSongs:
      return @"MsgTypeDownloadSongs";
    case MsgTypeSongOfferResponse:
      return @"MsgTypeSongOfferResponse";
    case MsgTypeLove:
      return @"MsgTypeLove";
    case MsgTypeBan:
      return @"MsgTypeBan";
    case MsgTypeStopAfter:
      return @"MsgTypeStopAfter";
    case MsgTypeGetLibrary:
      return @"MsgTypeGetLibrary";
    case MsgTypeRateSong:
      return @"MsgTypeRateSong";
    case MsgTypeGlobalSearch:
      return @"MsgTypeGlobalSearch";
    case MsgTypeDisconnect:
      return @"MsgTypeDisconnect";
    case MsgTypePlay:
      return @"MsgTypePlay";
    case MsgTypePlaypause:
      return @"MsgTypePlaypause";
    case MsgTypePause:
      return @"MsgTypePause";
    case MsgTypeStop:
      return @"MsgTypeStop";
    case MsgTypeNext:
      return @"MsgTypeNext";
    case MsgTypePrevious:
      return @"MsgTypePrevious";
    case MsgTypeShufflePlaylist:
      return @"MsgTypeShufflePlaylist";
    case MsgTypeRepeat:
      return @"MsgTypeRepeat";
    case MsgTypeShuffle:
      return @"MsgTypeShuffle";
    case MsgTypeInfo:
      return @"MsgTypeInfo";
    case MsgTypeCurrentMetainfo:
      return @"MsgTypeCurrentMetainfo";
    case MsgTypePlaylists:
      return @"MsgTypePlaylists";
    case MsgTypePlaylistSongs:
      return @"MsgTypePlaylistSongs";
    case MsgTypeEngineStateChanged:
      return @"MsgTypeEngineStateChanged";
    case MsgTypeKeepAlive:
      return @"MsgTypeKeepAlive";
    case MsgTypeUpdateTrackPosition:
      return @"MsgTypeUpdateTrackPosition";
    case MsgTypeActivePlaylistChanged:
      return @"MsgTypeActivePlaylistChanged";
    case MsgTypeFirstDataSentComplete:
      return @"MsgTypeFirstDataSentComplete";
    case MsgTypeLyrics:
      return @"MsgTypeLyrics";
    case MsgTypeSongFileChunk:
      return @"MsgTypeSongFileChunk";
    case MsgTypeDownloadQueueEmpty:
      return @"MsgTypeDownloadQueueEmpty";
    case MsgTypeLibraryChunk:
      return @"MsgTypeLibraryChunk";
    case MsgTypeDownloadTotalSize:
      return @"MsgTypeDownloadTotalSize";
    case MsgTypeGlobalSearchResult:
      return @"MsgTypeGlobalSearchResult";
    case MsgTypeTranscodingFiles:
      return @"MsgTypeTranscodingFiles";
    case MsgTypeGlobalSearchStatus:
      return @"MsgTypeGlobalSearchStatus";
    default:
      return nil;
  }
}

BOOL EngineStateIsValidValue(EngineState value) {
  switch (value) {
    case EngineStateEmpty:
    case EngineStateIdle:
    case EngineStatePlaying:
    case EngineStatePaused:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromEngineState(EngineState value) {
  switch (value) {
    case EngineStateEmpty:
      return @"EngineStateEmpty";
    case EngineStateIdle:
      return @"EngineStateIdle";
    case EngineStatePlaying:
      return @"EngineStatePlaying";
    case EngineStatePaused:
      return @"EngineStatePaused";
    default:
      return nil;
  }
}

BOOL RepeatModeIsValidValue(RepeatMode value) {
  switch (value) {
    case RepeatModeRepeatOff:
    case RepeatModeRepeatTrack:
    case RepeatModeRepeatAlbum:
    case RepeatModeRepeatPlaylist:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromRepeatMode(RepeatMode value) {
  switch (value) {
    case RepeatModeRepeatOff:
      return @"RepeatModeRepeatOff";
    case RepeatModeRepeatTrack:
      return @"RepeatModeRepeatTrack";
    case RepeatModeRepeatAlbum:
      return @"RepeatModeRepeatAlbum";
    case RepeatModeRepeatPlaylist:
      return @"RepeatModeRepeatPlaylist";
    default:
      return nil;
  }
}

BOOL ShuffleModeIsValidValue(ShuffleMode value) {
  switch (value) {
    case ShuffleModeShuffleOff:
    case ShuffleModeShuffleAll:
    case ShuffleModeShuffleInsideAlbum:
    case ShuffleModeShuffleAlbums:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromShuffleMode(ShuffleMode value) {
  switch (value) {
    case ShuffleModeShuffleOff:
      return @"ShuffleModeShuffleOff";
    case ShuffleModeShuffleAll:
      return @"ShuffleModeShuffleAll";
    case ShuffleModeShuffleInsideAlbum:
      return @"ShuffleModeShuffleInsideAlbum";
    case ShuffleModeShuffleAlbums:
      return @"ShuffleModeShuffleAlbums";
    default:
      return nil;
  }
}

BOOL ReasonDisconnectIsValidValue(ReasonDisconnect value) {
  switch (value) {
    case ReasonDisconnectServerShutdown:
    case ReasonDisconnectWrongAuthCode:
    case ReasonDisconnectNotAuthenticated:
    case ReasonDisconnectDownloadForbidden:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromReasonDisconnect(ReasonDisconnect value) {
  switch (value) {
    case ReasonDisconnectServerShutdown:
      return @"ReasonDisconnectServerShutdown";
    case ReasonDisconnectWrongAuthCode:
      return @"ReasonDisconnectWrongAuthCode";
    case ReasonDisconnectNotAuthenticated:
      return @"ReasonDisconnectNotAuthenticated";
    case ReasonDisconnectDownloadForbidden:
      return @"ReasonDisconnectDownloadForbidden";
    default:
      return nil;
  }
}

BOOL DownloadItemIsValidValue(DownloadItem value) {
  switch (value) {
    case DownloadItemCurrentItem:
    case DownloadItemItemAlbum:
    case DownloadItemAplaylist:
    case DownloadItemUrls:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromDownloadItem(DownloadItem value) {
  switch (value) {
    case DownloadItemCurrentItem:
      return @"DownloadItemCurrentItem";
    case DownloadItemItemAlbum:
      return @"DownloadItemItemAlbum";
    case DownloadItemAplaylist:
      return @"DownloadItemAplaylist";
    case DownloadItemUrls:
      return @"DownloadItemUrls";
    default:
      return nil;
  }
}

BOOL GlobalSearchStatusIsValidValue(GlobalSearchStatus value) {
  switch (value) {
    case GlobalSearchStatusGlobalSearchStarted:
    case GlobalSearchStatusGlobalSearchFinished:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromGlobalSearchStatus(GlobalSearchStatus value) {
  switch (value) {
    case GlobalSearchStatusGlobalSearchStarted:
      return @"GlobalSearchStatusGlobalSearchStarted";
    case GlobalSearchStatusGlobalSearchFinished:
      return @"GlobalSearchStatusGlobalSearchFinished";
    default:
      return nil;
  }
}

@interface SongMetadata ()
@property SInt32 id;
@property SInt32 index;
@property (strong) NSString* title;
@property (strong) NSString* album;
@property (strong) NSString* artist;
@property (strong) NSString* albumartist;
@property SInt32 track;
@property SInt32 disc;
@property (strong) NSString* prettyYear;
@property (strong) NSString* genre;
@property SInt32 playcount;
@property (strong) NSString* prettyLength;
@property (strong) NSData* art;
@property SInt32 length;
@property BOOL isLocal;
@property (strong) NSString* filename;
@property SInt32 fileSize;
@property Float32 rating;
@property (strong) NSString* url;
@property (strong) NSString* artAutomatic;
@property (strong) NSString* artManual;
@property SongMetadataType type;
@end

@implementation SongMetadata

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasIndex {
  return !!hasIndex_;
}
- (void) setHasIndex:(BOOL) _value_ {
  hasIndex_ = !!_value_;
}
@synthesize index;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasAlbum {
  return !!hasAlbum_;
}
- (void) setHasAlbum:(BOOL) _value_ {
  hasAlbum_ = !!_value_;
}
@synthesize album;
- (BOOL) hasArtist {
  return !!hasArtist_;
}
- (void) setHasArtist:(BOOL) _value_ {
  hasArtist_ = !!_value_;
}
@synthesize artist;
- (BOOL) hasAlbumartist {
  return !!hasAlbumartist_;
}
- (void) setHasAlbumartist:(BOOL) _value_ {
  hasAlbumartist_ = !!_value_;
}
@synthesize albumartist;
- (BOOL) hasTrack {
  return !!hasTrack_;
}
- (void) setHasTrack:(BOOL) _value_ {
  hasTrack_ = !!_value_;
}
@synthesize track;
- (BOOL) hasDisc {
  return !!hasDisc_;
}
- (void) setHasDisc:(BOOL) _value_ {
  hasDisc_ = !!_value_;
}
@synthesize disc;
- (BOOL) hasPrettyYear {
  return !!hasPrettyYear_;
}
- (void) setHasPrettyYear:(BOOL) _value_ {
  hasPrettyYear_ = !!_value_;
}
@synthesize prettyYear;
- (BOOL) hasGenre {
  return !!hasGenre_;
}
- (void) setHasGenre:(BOOL) _value_ {
  hasGenre_ = !!_value_;
}
@synthesize genre;
- (BOOL) hasPlaycount {
  return !!hasPlaycount_;
}
- (void) setHasPlaycount:(BOOL) _value_ {
  hasPlaycount_ = !!_value_;
}
@synthesize playcount;
- (BOOL) hasPrettyLength {
  return !!hasPrettyLength_;
}
- (void) setHasPrettyLength:(BOOL) _value_ {
  hasPrettyLength_ = !!_value_;
}
@synthesize prettyLength;
- (BOOL) hasArt {
  return !!hasArt_;
}
- (void) setHasArt:(BOOL) _value_ {
  hasArt_ = !!_value_;
}
@synthesize art;
- (BOOL) hasLength {
  return !!hasLength_;
}
- (void) setHasLength:(BOOL) _value_ {
  hasLength_ = !!_value_;
}
@synthesize length;
- (BOOL) hasIsLocal {
  return !!hasIsLocal_;
}
- (void) setHasIsLocal:(BOOL) _value_ {
  hasIsLocal_ = !!_value_;
}
- (BOOL) isLocal {
  return !!isLocal_;
}
- (void) setIsLocal:(BOOL) _value_ {
  isLocal_ = !!_value_;
}
- (BOOL) hasFilename {
  return !!hasFilename_;
}
- (void) setHasFilename:(BOOL) _value_ {
  hasFilename_ = !!_value_;
}
@synthesize filename;
- (BOOL) hasFileSize {
  return !!hasFileSize_;
}
- (void) setHasFileSize:(BOOL) _value_ {
  hasFileSize_ = !!_value_;
}
@synthesize fileSize;
- (BOOL) hasRating {
  return !!hasRating_;
}
- (void) setHasRating:(BOOL) _value_ {
  hasRating_ = !!_value_;
}
@synthesize rating;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) _value_ {
  hasUrl_ = !!_value_;
}
@synthesize url;
- (BOOL) hasArtAutomatic {
  return !!hasArtAutomatic_;
}
- (void) setHasArtAutomatic:(BOOL) _value_ {
  hasArtAutomatic_ = !!_value_;
}
@synthesize artAutomatic;
- (BOOL) hasArtManual {
  return !!hasArtManual_;
}
- (void) setHasArtManual:(BOOL) _value_ {
  hasArtManual_ = !!_value_;
}
@synthesize artManual;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
    self.index = 0;
    self.title = @"";
    self.album = @"";
    self.artist = @"";
    self.albumartist = @"";
    self.track = 0;
    self.disc = 0;
    self.prettyYear = @"";
    self.genre = @"";
    self.playcount = 0;
    self.prettyLength = @"";
    self.art = [NSData data];
    self.length = 0;
    self.isLocal = NO;
    self.filename = @"";
    self.fileSize = 0;
    self.rating = 0;
    self.url = @"";
    self.artAutomatic = @"";
    self.artManual = @"";
    self.type = SongMetadataTypeUnknown;
  }
  return self;
}
static SongMetadata* defaultSongMetadataInstance = nil;
+ (void) initialize {
  if (self == [SongMetadata class]) {
    defaultSongMetadataInstance = [[SongMetadata alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSongMetadataInstance;
}
- (instancetype) defaultInstance {
  return defaultSongMetadataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasIndex) {
    [output writeInt32:2 value:self.index];
  }
  if (self.hasTitle) {
    [output writeString:3 value:self.title];
  }
  if (self.hasAlbum) {
    [output writeString:4 value:self.album];
  }
  if (self.hasArtist) {
    [output writeString:5 value:self.artist];
  }
  if (self.hasAlbumartist) {
    [output writeString:6 value:self.albumartist];
  }
  if (self.hasTrack) {
    [output writeInt32:7 value:self.track];
  }
  if (self.hasDisc) {
    [output writeInt32:8 value:self.disc];
  }
  if (self.hasPrettyYear) {
    [output writeString:9 value:self.prettyYear];
  }
  if (self.hasGenre) {
    [output writeString:10 value:self.genre];
  }
  if (self.hasPlaycount) {
    [output writeInt32:11 value:self.playcount];
  }
  if (self.hasPrettyLength) {
    [output writeString:12 value:self.prettyLength];
  }
  if (self.hasArt) {
    [output writeData:13 value:self.art];
  }
  if (self.hasLength) {
    [output writeInt32:14 value:self.length];
  }
  if (self.hasIsLocal) {
    [output writeBool:15 value:self.isLocal];
  }
  if (self.hasFilename) {
    [output writeString:16 value:self.filename];
  }
  if (self.hasFileSize) {
    [output writeInt32:17 value:self.fileSize];
  }
  if (self.hasRating) {
    [output writeFloat:18 value:self.rating];
  }
  if (self.hasUrl) {
    [output writeString:19 value:self.url];
  }
  if (self.hasArtAutomatic) {
    [output writeString:20 value:self.artAutomatic];
  }
  if (self.hasArtManual) {
    [output writeString:21 value:self.artManual];
  }
  if (self.hasType) {
    [output writeEnum:22 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasIndex) {
    size_ += computeInt32Size(2, self.index);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(3, self.title);
  }
  if (self.hasAlbum) {
    size_ += computeStringSize(4, self.album);
  }
  if (self.hasArtist) {
    size_ += computeStringSize(5, self.artist);
  }
  if (self.hasAlbumartist) {
    size_ += computeStringSize(6, self.albumartist);
  }
  if (self.hasTrack) {
    size_ += computeInt32Size(7, self.track);
  }
  if (self.hasDisc) {
    size_ += computeInt32Size(8, self.disc);
  }
  if (self.hasPrettyYear) {
    size_ += computeStringSize(9, self.prettyYear);
  }
  if (self.hasGenre) {
    size_ += computeStringSize(10, self.genre);
  }
  if (self.hasPlaycount) {
    size_ += computeInt32Size(11, self.playcount);
  }
  if (self.hasPrettyLength) {
    size_ += computeStringSize(12, self.prettyLength);
  }
  if (self.hasArt) {
    size_ += computeDataSize(13, self.art);
  }
  if (self.hasLength) {
    size_ += computeInt32Size(14, self.length);
  }
  if (self.hasIsLocal) {
    size_ += computeBoolSize(15, self.isLocal);
  }
  if (self.hasFilename) {
    size_ += computeStringSize(16, self.filename);
  }
  if (self.hasFileSize) {
    size_ += computeInt32Size(17, self.fileSize);
  }
  if (self.hasRating) {
    size_ += computeFloatSize(18, self.rating);
  }
  if (self.hasUrl) {
    size_ += computeStringSize(19, self.url);
  }
  if (self.hasArtAutomatic) {
    size_ += computeStringSize(20, self.artAutomatic);
  }
  if (self.hasArtManual) {
    size_ += computeStringSize(21, self.artManual);
  }
  if (self.hasType) {
    size_ += computeEnumSize(22, self.type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SongMetadata*) parseFromData:(NSData*) data {
  return (SongMetadata*)[[[SongMetadata builder] mergeFromData:data] build];
}
+ (SongMetadata*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SongMetadata*)[[[SongMetadata builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SongMetadata*) parseFromInputStream:(NSInputStream*) input {
  return (SongMetadata*)[[[SongMetadata builder] mergeFromInputStream:input] build];
}
+ (SongMetadata*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SongMetadata*)[[[SongMetadata builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SongMetadata*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SongMetadata*)[[[SongMetadata builder] mergeFromCodedInputStream:input] build];
}
+ (SongMetadata*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SongMetadata*)[[[SongMetadata builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SongMetadataBuilder*) builder {
  return [[SongMetadataBuilder alloc] init];
}
+ (SongMetadataBuilder*) builderWithPrototype:(SongMetadata*) prototype {
  return [[SongMetadata builder] mergeFrom:prototype];
}
- (SongMetadataBuilder*) builder {
  return [SongMetadata builder];
}
- (SongMetadataBuilder*) toBuilder {
  return [SongMetadata builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  if (self.hasIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"index", [NSNumber numberWithInteger:self.index]];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasAlbum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"album", self.album];
  }
  if (self.hasArtist) {
    [output appendFormat:@"%@%@: %@\n", indent, @"artist", self.artist];
  }
  if (self.hasAlbumartist) {
    [output appendFormat:@"%@%@: %@\n", indent, @"albumartist", self.albumartist];
  }
  if (self.hasTrack) {
    [output appendFormat:@"%@%@: %@\n", indent, @"track", [NSNumber numberWithInteger:self.track]];
  }
  if (self.hasDisc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"disc", [NSNumber numberWithInteger:self.disc]];
  }
  if (self.hasPrettyYear) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prettyYear", self.prettyYear];
  }
  if (self.hasGenre) {
    [output appendFormat:@"%@%@: %@\n", indent, @"genre", self.genre];
  }
  if (self.hasPlaycount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playcount", [NSNumber numberWithInteger:self.playcount]];
  }
  if (self.hasPrettyLength) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prettyLength", self.prettyLength];
  }
  if (self.hasArt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"art", self.art];
  }
  if (self.hasLength) {
    [output appendFormat:@"%@%@: %@\n", indent, @"length", [NSNumber numberWithInteger:self.length]];
  }
  if (self.hasIsLocal) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isLocal", [NSNumber numberWithBool:self.isLocal]];
  }
  if (self.hasFilename) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filename", self.filename];
  }
  if (self.hasFileSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileSize", [NSNumber numberWithInteger:self.fileSize]];
  }
  if (self.hasRating) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rating", [NSNumber numberWithFloat:self.rating]];
  }
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  if (self.hasArtAutomatic) {
    [output appendFormat:@"%@%@: %@\n", indent, @"artAutomatic", self.artAutomatic];
  }
  if (self.hasArtManual) {
    [output appendFormat:@"%@%@: %@\n", indent, @"artManual", self.artManual];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromSongMetadataType(self.type)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  if (self.hasIndex) {
    [dictionary setObject: [NSNumber numberWithInteger:self.index] forKey: @"index"];
  }
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  if (self.hasAlbum) {
    [dictionary setObject: self.album forKey: @"album"];
  }
  if (self.hasArtist) {
    [dictionary setObject: self.artist forKey: @"artist"];
  }
  if (self.hasAlbumartist) {
    [dictionary setObject: self.albumartist forKey: @"albumartist"];
  }
  if (self.hasTrack) {
    [dictionary setObject: [NSNumber numberWithInteger:self.track] forKey: @"track"];
  }
  if (self.hasDisc) {
    [dictionary setObject: [NSNumber numberWithInteger:self.disc] forKey: @"disc"];
  }
  if (self.hasPrettyYear) {
    [dictionary setObject: self.prettyYear forKey: @"prettyYear"];
  }
  if (self.hasGenre) {
    [dictionary setObject: self.genre forKey: @"genre"];
  }
  if (self.hasPlaycount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.playcount] forKey: @"playcount"];
  }
  if (self.hasPrettyLength) {
    [dictionary setObject: self.prettyLength forKey: @"prettyLength"];
  }
  if (self.hasArt) {
    [dictionary setObject: self.art forKey: @"art"];
  }
  if (self.hasLength) {
    [dictionary setObject: [NSNumber numberWithInteger:self.length] forKey: @"length"];
  }
  if (self.hasIsLocal) {
    [dictionary setObject: [NSNumber numberWithBool:self.isLocal] forKey: @"isLocal"];
  }
  if (self.hasFilename) {
    [dictionary setObject: self.filename forKey: @"filename"];
  }
  if (self.hasFileSize) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fileSize] forKey: @"fileSize"];
  }
  if (self.hasRating) {
    [dictionary setObject: [NSNumber numberWithFloat:self.rating] forKey: @"rating"];
  }
  if (self.hasUrl) {
    [dictionary setObject: self.url forKey: @"url"];
  }
  if (self.hasArtAutomatic) {
    [dictionary setObject: self.artAutomatic forKey: @"artAutomatic"];
  }
  if (self.hasArtManual) {
    [dictionary setObject: self.artManual forKey: @"artManual"];
  }
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SongMetadata class]]) {
    return NO;
  }
  SongMetadata *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasIndex == otherMessage.hasIndex &&
      (!self.hasIndex || self.index == otherMessage.index) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasAlbum == otherMessage.hasAlbum &&
      (!self.hasAlbum || [self.album isEqual:otherMessage.album]) &&
      self.hasArtist == otherMessage.hasArtist &&
      (!self.hasArtist || [self.artist isEqual:otherMessage.artist]) &&
      self.hasAlbumartist == otherMessage.hasAlbumartist &&
      (!self.hasAlbumartist || [self.albumartist isEqual:otherMessage.albumartist]) &&
      self.hasTrack == otherMessage.hasTrack &&
      (!self.hasTrack || self.track == otherMessage.track) &&
      self.hasDisc == otherMessage.hasDisc &&
      (!self.hasDisc || self.disc == otherMessage.disc) &&
      self.hasPrettyYear == otherMessage.hasPrettyYear &&
      (!self.hasPrettyYear || [self.prettyYear isEqual:otherMessage.prettyYear]) &&
      self.hasGenre == otherMessage.hasGenre &&
      (!self.hasGenre || [self.genre isEqual:otherMessage.genre]) &&
      self.hasPlaycount == otherMessage.hasPlaycount &&
      (!self.hasPlaycount || self.playcount == otherMessage.playcount) &&
      self.hasPrettyLength == otherMessage.hasPrettyLength &&
      (!self.hasPrettyLength || [self.prettyLength isEqual:otherMessage.prettyLength]) &&
      self.hasArt == otherMessage.hasArt &&
      (!self.hasArt || [self.art isEqual:otherMessage.art]) &&
      self.hasLength == otherMessage.hasLength &&
      (!self.hasLength || self.length == otherMessage.length) &&
      self.hasIsLocal == otherMessage.hasIsLocal &&
      (!self.hasIsLocal || self.isLocal == otherMessage.isLocal) &&
      self.hasFilename == otherMessage.hasFilename &&
      (!self.hasFilename || [self.filename isEqual:otherMessage.filename]) &&
      self.hasFileSize == otherMessage.hasFileSize &&
      (!self.hasFileSize || self.fileSize == otherMessage.fileSize) &&
      self.hasRating == otherMessage.hasRating &&
      (!self.hasRating || self.rating == otherMessage.rating) &&
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      self.hasArtAutomatic == otherMessage.hasArtAutomatic &&
      (!self.hasArtAutomatic || [self.artAutomatic isEqual:otherMessage.artAutomatic]) &&
      self.hasArtManual == otherMessage.hasArtManual &&
      (!self.hasArtManual || [self.artManual isEqual:otherMessage.artManual]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  if (self.hasIndex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.index] hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasAlbum) {
    hashCode = hashCode * 31 + [self.album hash];
  }
  if (self.hasArtist) {
    hashCode = hashCode * 31 + [self.artist hash];
  }
  if (self.hasAlbumartist) {
    hashCode = hashCode * 31 + [self.albumartist hash];
  }
  if (self.hasTrack) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.track] hash];
  }
  if (self.hasDisc) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.disc] hash];
  }
  if (self.hasPrettyYear) {
    hashCode = hashCode * 31 + [self.prettyYear hash];
  }
  if (self.hasGenre) {
    hashCode = hashCode * 31 + [self.genre hash];
  }
  if (self.hasPlaycount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.playcount] hash];
  }
  if (self.hasPrettyLength) {
    hashCode = hashCode * 31 + [self.prettyLength hash];
  }
  if (self.hasArt) {
    hashCode = hashCode * 31 + [self.art hash];
  }
  if (self.hasLength) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.length] hash];
  }
  if (self.hasIsLocal) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isLocal] hash];
  }
  if (self.hasFilename) {
    hashCode = hashCode * 31 + [self.filename hash];
  }
  if (self.hasFileSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fileSize] hash];
  }
  if (self.hasRating) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.rating] hash];
  }
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  if (self.hasArtAutomatic) {
    hashCode = hashCode * 31 + [self.artAutomatic hash];
  }
  if (self.hasArtManual) {
    hashCode = hashCode * 31 + [self.artManual hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL SongMetadataTypeIsValidValue(SongMetadataType value) {
  switch (value) {
    case SongMetadataTypeUnknown:
    case SongMetadataTypeAsf:
    case SongMetadataTypeFlac:
    case SongMetadataTypeMp4:
    case SongMetadataTypeMpc:
    case SongMetadataTypeMpeg:
    case SongMetadataTypeOggflac:
    case SongMetadataTypeOggspeex:
    case SongMetadataTypeOggvorbis:
    case SongMetadataTypeAiff:
    case SongMetadataTypeWav:
    case SongMetadataTypeTrueaudio:
    case SongMetadataTypeCdda:
    case SongMetadataTypeOggopus:
    case SongMetadataTypeStream:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromSongMetadataType(SongMetadataType value) {
  switch (value) {
    case SongMetadataTypeUnknown:
      return @"SongMetadataTypeUnknown";
    case SongMetadataTypeAsf:
      return @"SongMetadataTypeAsf";
    case SongMetadataTypeFlac:
      return @"SongMetadataTypeFlac";
    case SongMetadataTypeMp4:
      return @"SongMetadataTypeMp4";
    case SongMetadataTypeMpc:
      return @"SongMetadataTypeMpc";
    case SongMetadataTypeMpeg:
      return @"SongMetadataTypeMpeg";
    case SongMetadataTypeOggflac:
      return @"SongMetadataTypeOggflac";
    case SongMetadataTypeOggspeex:
      return @"SongMetadataTypeOggspeex";
    case SongMetadataTypeOggvorbis:
      return @"SongMetadataTypeOggvorbis";
    case SongMetadataTypeAiff:
      return @"SongMetadataTypeAiff";
    case SongMetadataTypeWav:
      return @"SongMetadataTypeWav";
    case SongMetadataTypeTrueaudio:
      return @"SongMetadataTypeTrueaudio";
    case SongMetadataTypeCdda:
      return @"SongMetadataTypeCdda";
    case SongMetadataTypeOggopus:
      return @"SongMetadataTypeOggopus";
    case SongMetadataTypeStream:
      return @"SongMetadataTypeStream";
    default:
      return nil;
  }
}

@interface SongMetadataBuilder()
@property (strong) SongMetadata* resultSongMetadata;
@end

@implementation SongMetadataBuilder
@synthesize resultSongMetadata;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSongMetadata = [[SongMetadata alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSongMetadata;
}
- (SongMetadataBuilder*) clear {
  self.resultSongMetadata = [[SongMetadata alloc] init];
  return self;
}
- (SongMetadataBuilder*) clone {
  return [SongMetadata builderWithPrototype:resultSongMetadata];
}
- (SongMetadata*) defaultInstance {
  return [SongMetadata defaultInstance];
}
- (SongMetadata*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SongMetadata*) buildPartial {
  SongMetadata* returnMe = resultSongMetadata;
  self.resultSongMetadata = nil;
  return returnMe;
}
- (SongMetadataBuilder*) mergeFrom:(SongMetadata*) other {
  if (other == [SongMetadata defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasIndex) {
    [self setIndex:other.index];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasAlbum) {
    [self setAlbum:other.album];
  }
  if (other.hasArtist) {
    [self setArtist:other.artist];
  }
  if (other.hasAlbumartist) {
    [self setAlbumartist:other.albumartist];
  }
  if (other.hasTrack) {
    [self setTrack:other.track];
  }
  if (other.hasDisc) {
    [self setDisc:other.disc];
  }
  if (other.hasPrettyYear) {
    [self setPrettyYear:other.prettyYear];
  }
  if (other.hasGenre) {
    [self setGenre:other.genre];
  }
  if (other.hasPlaycount) {
    [self setPlaycount:other.playcount];
  }
  if (other.hasPrettyLength) {
    [self setPrettyLength:other.prettyLength];
  }
  if (other.hasArt) {
    [self setArt:other.art];
  }
  if (other.hasLength) {
    [self setLength:other.length];
  }
  if (other.hasIsLocal) {
    [self setIsLocal:other.isLocal];
  }
  if (other.hasFilename) {
    [self setFilename:other.filename];
  }
  if (other.hasFileSize) {
    [self setFileSize:other.fileSize];
  }
  if (other.hasRating) {
    [self setRating:other.rating];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.hasArtAutomatic) {
    [self setArtAutomatic:other.artAutomatic];
  }
  if (other.hasArtManual) {
    [self setArtManual:other.artManual];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SongMetadataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SongMetadataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 16: {
        [self setIndex:[input readInt32]];
        break;
      }
      case 26: {
        [self setTitle:[input readString]];
        break;
      }
      case 34: {
        [self setAlbum:[input readString]];
        break;
      }
      case 42: {
        [self setArtist:[input readString]];
        break;
      }
      case 50: {
        [self setAlbumartist:[input readString]];
        break;
      }
      case 56: {
        [self setTrack:[input readInt32]];
        break;
      }
      case 64: {
        [self setDisc:[input readInt32]];
        break;
      }
      case 74: {
        [self setPrettyYear:[input readString]];
        break;
      }
      case 82: {
        [self setGenre:[input readString]];
        break;
      }
      case 88: {
        [self setPlaycount:[input readInt32]];
        break;
      }
      case 98: {
        [self setPrettyLength:[input readString]];
        break;
      }
      case 106: {
        [self setArt:[input readData]];
        break;
      }
      case 112: {
        [self setLength:[input readInt32]];
        break;
      }
      case 120: {
        [self setIsLocal:[input readBool]];
        break;
      }
      case 130: {
        [self setFilename:[input readString]];
        break;
      }
      case 136: {
        [self setFileSize:[input readInt32]];
        break;
      }
      case 149: {
        [self setRating:[input readFloat]];
        break;
      }
      case 154: {
        [self setUrl:[input readString]];
        break;
      }
      case 162: {
        [self setArtAutomatic:[input readString]];
        break;
      }
      case 170: {
        [self setArtManual:[input readString]];
        break;
      }
      case 176: {
        SongMetadataType value = (SongMetadataType)[input readEnum];
        if (SongMetadataTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:22 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultSongMetadata.hasId;
}
- (SInt32) id {
  return resultSongMetadata.id;
}
- (SongMetadataBuilder*) setId:(SInt32) value {
  resultSongMetadata.hasId = YES;
  resultSongMetadata.id = value;
  return self;
}
- (SongMetadataBuilder*) clearId {
  resultSongMetadata.hasId = NO;
  resultSongMetadata.id = 0;
  return self;
}
- (BOOL) hasIndex {
  return resultSongMetadata.hasIndex;
}
- (SInt32) index {
  return resultSongMetadata.index;
}
- (SongMetadataBuilder*) setIndex:(SInt32) value {
  resultSongMetadata.hasIndex = YES;
  resultSongMetadata.index = value;
  return self;
}
- (SongMetadataBuilder*) clearIndex {
  resultSongMetadata.hasIndex = NO;
  resultSongMetadata.index = 0;
  return self;
}
- (BOOL) hasTitle {
  return resultSongMetadata.hasTitle;
}
- (NSString*) title {
  return resultSongMetadata.title;
}
- (SongMetadataBuilder*) setTitle:(NSString*) value {
  resultSongMetadata.hasTitle = YES;
  resultSongMetadata.title = value;
  return self;
}
- (SongMetadataBuilder*) clearTitle {
  resultSongMetadata.hasTitle = NO;
  resultSongMetadata.title = @"";
  return self;
}
- (BOOL) hasAlbum {
  return resultSongMetadata.hasAlbum;
}
- (NSString*) album {
  return resultSongMetadata.album;
}
- (SongMetadataBuilder*) setAlbum:(NSString*) value {
  resultSongMetadata.hasAlbum = YES;
  resultSongMetadata.album = value;
  return self;
}
- (SongMetadataBuilder*) clearAlbum {
  resultSongMetadata.hasAlbum = NO;
  resultSongMetadata.album = @"";
  return self;
}
- (BOOL) hasArtist {
  return resultSongMetadata.hasArtist;
}
- (NSString*) artist {
  return resultSongMetadata.artist;
}
- (SongMetadataBuilder*) setArtist:(NSString*) value {
  resultSongMetadata.hasArtist = YES;
  resultSongMetadata.artist = value;
  return self;
}
- (SongMetadataBuilder*) clearArtist {
  resultSongMetadata.hasArtist = NO;
  resultSongMetadata.artist = @"";
  return self;
}
- (BOOL) hasAlbumartist {
  return resultSongMetadata.hasAlbumartist;
}
- (NSString*) albumartist {
  return resultSongMetadata.albumartist;
}
- (SongMetadataBuilder*) setAlbumartist:(NSString*) value {
  resultSongMetadata.hasAlbumartist = YES;
  resultSongMetadata.albumartist = value;
  return self;
}
- (SongMetadataBuilder*) clearAlbumartist {
  resultSongMetadata.hasAlbumartist = NO;
  resultSongMetadata.albumartist = @"";
  return self;
}
- (BOOL) hasTrack {
  return resultSongMetadata.hasTrack;
}
- (SInt32) track {
  return resultSongMetadata.track;
}
- (SongMetadataBuilder*) setTrack:(SInt32) value {
  resultSongMetadata.hasTrack = YES;
  resultSongMetadata.track = value;
  return self;
}
- (SongMetadataBuilder*) clearTrack {
  resultSongMetadata.hasTrack = NO;
  resultSongMetadata.track = 0;
  return self;
}
- (BOOL) hasDisc {
  return resultSongMetadata.hasDisc;
}
- (SInt32) disc {
  return resultSongMetadata.disc;
}
- (SongMetadataBuilder*) setDisc:(SInt32) value {
  resultSongMetadata.hasDisc = YES;
  resultSongMetadata.disc = value;
  return self;
}
- (SongMetadataBuilder*) clearDisc {
  resultSongMetadata.hasDisc = NO;
  resultSongMetadata.disc = 0;
  return self;
}
- (BOOL) hasPrettyYear {
  return resultSongMetadata.hasPrettyYear;
}
- (NSString*) prettyYear {
  return resultSongMetadata.prettyYear;
}
- (SongMetadataBuilder*) setPrettyYear:(NSString*) value {
  resultSongMetadata.hasPrettyYear = YES;
  resultSongMetadata.prettyYear = value;
  return self;
}
- (SongMetadataBuilder*) clearPrettyYear {
  resultSongMetadata.hasPrettyYear = NO;
  resultSongMetadata.prettyYear = @"";
  return self;
}
- (BOOL) hasGenre {
  return resultSongMetadata.hasGenre;
}
- (NSString*) genre {
  return resultSongMetadata.genre;
}
- (SongMetadataBuilder*) setGenre:(NSString*) value {
  resultSongMetadata.hasGenre = YES;
  resultSongMetadata.genre = value;
  return self;
}
- (SongMetadataBuilder*) clearGenre {
  resultSongMetadata.hasGenre = NO;
  resultSongMetadata.genre = @"";
  return self;
}
- (BOOL) hasPlaycount {
  return resultSongMetadata.hasPlaycount;
}
- (SInt32) playcount {
  return resultSongMetadata.playcount;
}
- (SongMetadataBuilder*) setPlaycount:(SInt32) value {
  resultSongMetadata.hasPlaycount = YES;
  resultSongMetadata.playcount = value;
  return self;
}
- (SongMetadataBuilder*) clearPlaycount {
  resultSongMetadata.hasPlaycount = NO;
  resultSongMetadata.playcount = 0;
  return self;
}
- (BOOL) hasPrettyLength {
  return resultSongMetadata.hasPrettyLength;
}
- (NSString*) prettyLength {
  return resultSongMetadata.prettyLength;
}
- (SongMetadataBuilder*) setPrettyLength:(NSString*) value {
  resultSongMetadata.hasPrettyLength = YES;
  resultSongMetadata.prettyLength = value;
  return self;
}
- (SongMetadataBuilder*) clearPrettyLength {
  resultSongMetadata.hasPrettyLength = NO;
  resultSongMetadata.prettyLength = @"";
  return self;
}
- (BOOL) hasArt {
  return resultSongMetadata.hasArt;
}
- (NSData*) art {
  return resultSongMetadata.art;
}
- (SongMetadataBuilder*) setArt:(NSData*) value {
  resultSongMetadata.hasArt = YES;
  resultSongMetadata.art = value;
  return self;
}
- (SongMetadataBuilder*) clearArt {
  resultSongMetadata.hasArt = NO;
  resultSongMetadata.art = [NSData data];
  return self;
}
- (BOOL) hasLength {
  return resultSongMetadata.hasLength;
}
- (SInt32) length {
  return resultSongMetadata.length;
}
- (SongMetadataBuilder*) setLength:(SInt32) value {
  resultSongMetadata.hasLength = YES;
  resultSongMetadata.length = value;
  return self;
}
- (SongMetadataBuilder*) clearLength {
  resultSongMetadata.hasLength = NO;
  resultSongMetadata.length = 0;
  return self;
}
- (BOOL) hasIsLocal {
  return resultSongMetadata.hasIsLocal;
}
- (BOOL) isLocal {
  return resultSongMetadata.isLocal;
}
- (SongMetadataBuilder*) setIsLocal:(BOOL) value {
  resultSongMetadata.hasIsLocal = YES;
  resultSongMetadata.isLocal = value;
  return self;
}
- (SongMetadataBuilder*) clearIsLocal {
  resultSongMetadata.hasIsLocal = NO;
  resultSongMetadata.isLocal = NO;
  return self;
}
- (BOOL) hasFilename {
  return resultSongMetadata.hasFilename;
}
- (NSString*) filename {
  return resultSongMetadata.filename;
}
- (SongMetadataBuilder*) setFilename:(NSString*) value {
  resultSongMetadata.hasFilename = YES;
  resultSongMetadata.filename = value;
  return self;
}
- (SongMetadataBuilder*) clearFilename {
  resultSongMetadata.hasFilename = NO;
  resultSongMetadata.filename = @"";
  return self;
}
- (BOOL) hasFileSize {
  return resultSongMetadata.hasFileSize;
}
- (SInt32) fileSize {
  return resultSongMetadata.fileSize;
}
- (SongMetadataBuilder*) setFileSize:(SInt32) value {
  resultSongMetadata.hasFileSize = YES;
  resultSongMetadata.fileSize = value;
  return self;
}
- (SongMetadataBuilder*) clearFileSize {
  resultSongMetadata.hasFileSize = NO;
  resultSongMetadata.fileSize = 0;
  return self;
}
- (BOOL) hasRating {
  return resultSongMetadata.hasRating;
}
- (Float32) rating {
  return resultSongMetadata.rating;
}
- (SongMetadataBuilder*) setRating:(Float32) value {
  resultSongMetadata.hasRating = YES;
  resultSongMetadata.rating = value;
  return self;
}
- (SongMetadataBuilder*) clearRating {
  resultSongMetadata.hasRating = NO;
  resultSongMetadata.rating = 0;
  return self;
}
- (BOOL) hasUrl {
  return resultSongMetadata.hasUrl;
}
- (NSString*) url {
  return resultSongMetadata.url;
}
- (SongMetadataBuilder*) setUrl:(NSString*) value {
  resultSongMetadata.hasUrl = YES;
  resultSongMetadata.url = value;
  return self;
}
- (SongMetadataBuilder*) clearUrl {
  resultSongMetadata.hasUrl = NO;
  resultSongMetadata.url = @"";
  return self;
}
- (BOOL) hasArtAutomatic {
  return resultSongMetadata.hasArtAutomatic;
}
- (NSString*) artAutomatic {
  return resultSongMetadata.artAutomatic;
}
- (SongMetadataBuilder*) setArtAutomatic:(NSString*) value {
  resultSongMetadata.hasArtAutomatic = YES;
  resultSongMetadata.artAutomatic = value;
  return self;
}
- (SongMetadataBuilder*) clearArtAutomatic {
  resultSongMetadata.hasArtAutomatic = NO;
  resultSongMetadata.artAutomatic = @"";
  return self;
}
- (BOOL) hasArtManual {
  return resultSongMetadata.hasArtManual;
}
- (NSString*) artManual {
  return resultSongMetadata.artManual;
}
- (SongMetadataBuilder*) setArtManual:(NSString*) value {
  resultSongMetadata.hasArtManual = YES;
  resultSongMetadata.artManual = value;
  return self;
}
- (SongMetadataBuilder*) clearArtManual {
  resultSongMetadata.hasArtManual = NO;
  resultSongMetadata.artManual = @"";
  return self;
}
- (BOOL) hasType {
  return resultSongMetadata.hasType;
}
- (SongMetadataType) type {
  return resultSongMetadata.type;
}
- (SongMetadataBuilder*) setType:(SongMetadataType) value {
  resultSongMetadata.hasType = YES;
  resultSongMetadata.type = value;
  return self;
}
- (SongMetadataBuilder*) clearType {
  resultSongMetadata.hasType = NO;
  resultSongMetadata.type = SongMetadataTypeUnknown;
  return self;
}
@end

@interface Playlist ()
@property SInt32 id;
@property (strong) NSString* name;
@property SInt32 itemCount;
@property BOOL active;
@property BOOL closed;
@end

@implementation Playlist

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasItemCount {
  return !!hasItemCount_;
}
- (void) setHasItemCount:(BOOL) _value_ {
  hasItemCount_ = !!_value_;
}
@synthesize itemCount;
- (BOOL) hasActive {
  return !!hasActive_;
}
- (void) setHasActive:(BOOL) _value_ {
  hasActive_ = !!_value_;
}
- (BOOL) active {
  return !!active_;
}
- (void) setActive:(BOOL) _value_ {
  active_ = !!_value_;
}
- (BOOL) hasClosed {
  return !!hasClosed_;
}
- (void) setHasClosed:(BOOL) _value_ {
  hasClosed_ = !!_value_;
}
- (BOOL) closed {
  return !!closed_;
}
- (void) setClosed:(BOOL) _value_ {
  closed_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
    self.itemCount = 0;
    self.active = NO;
    self.closed = NO;
  }
  return self;
}
static Playlist* defaultPlaylistInstance = nil;
+ (void) initialize {
  if (self == [Playlist class]) {
    defaultPlaylistInstance = [[Playlist alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPlaylistInstance;
}
- (instancetype) defaultInstance {
  return defaultPlaylistInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasItemCount) {
    [output writeInt32:3 value:self.itemCount];
  }
  if (self.hasActive) {
    [output writeBool:4 value:self.active];
  }
  if (self.hasClosed) {
    [output writeBool:5 value:self.closed];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasItemCount) {
    size_ += computeInt32Size(3, self.itemCount);
  }
  if (self.hasActive) {
    size_ += computeBoolSize(4, self.active);
  }
  if (self.hasClosed) {
    size_ += computeBoolSize(5, self.closed);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Playlist*) parseFromData:(NSData*) data {
  return (Playlist*)[[[Playlist builder] mergeFromData:data] build];
}
+ (Playlist*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Playlist*)[[[Playlist builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Playlist*) parseFromInputStream:(NSInputStream*) input {
  return (Playlist*)[[[Playlist builder] mergeFromInputStream:input] build];
}
+ (Playlist*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Playlist*)[[[Playlist builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Playlist*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Playlist*)[[[Playlist builder] mergeFromCodedInputStream:input] build];
}
+ (Playlist*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Playlist*)[[[Playlist builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PlaylistBuilder*) builder {
  return [[PlaylistBuilder alloc] init];
}
+ (PlaylistBuilder*) builderWithPrototype:(Playlist*) prototype {
  return [[Playlist builder] mergeFrom:prototype];
}
- (PlaylistBuilder*) builder {
  return [Playlist builder];
}
- (PlaylistBuilder*) toBuilder {
  return [Playlist builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasItemCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemCount", [NSNumber numberWithInteger:self.itemCount]];
  }
  if (self.hasActive) {
    [output appendFormat:@"%@%@: %@\n", indent, @"active", [NSNumber numberWithBool:self.active]];
  }
  if (self.hasClosed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"closed", [NSNumber numberWithBool:self.closed]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasItemCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.itemCount] forKey: @"itemCount"];
  }
  if (self.hasActive) {
    [dictionary setObject: [NSNumber numberWithBool:self.active] forKey: @"active"];
  }
  if (self.hasClosed) {
    [dictionary setObject: [NSNumber numberWithBool:self.closed] forKey: @"closed"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Playlist class]]) {
    return NO;
  }
  Playlist *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasItemCount == otherMessage.hasItemCount &&
      (!self.hasItemCount || self.itemCount == otherMessage.itemCount) &&
      self.hasActive == otherMessage.hasActive &&
      (!self.hasActive || self.active == otherMessage.active) &&
      self.hasClosed == otherMessage.hasClosed &&
      (!self.hasClosed || self.closed == otherMessage.closed) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasItemCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.itemCount] hash];
  }
  if (self.hasActive) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.active] hash];
  }
  if (self.hasClosed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.closed] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PlaylistBuilder()
@property (strong) Playlist* resultPlaylist;
@end

@implementation PlaylistBuilder
@synthesize resultPlaylist;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPlaylist = [[Playlist alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPlaylist;
}
- (PlaylistBuilder*) clear {
  self.resultPlaylist = [[Playlist alloc] init];
  return self;
}
- (PlaylistBuilder*) clone {
  return [Playlist builderWithPrototype:resultPlaylist];
}
- (Playlist*) defaultInstance {
  return [Playlist defaultInstance];
}
- (Playlist*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Playlist*) buildPartial {
  Playlist* returnMe = resultPlaylist;
  self.resultPlaylist = nil;
  return returnMe;
}
- (PlaylistBuilder*) mergeFrom:(Playlist*) other {
  if (other == [Playlist defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasItemCount) {
    [self setItemCount:other.itemCount];
  }
  if (other.hasActive) {
    [self setActive:other.active];
  }
  if (other.hasClosed) {
    [self setClosed:other.closed];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PlaylistBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PlaylistBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 24: {
        [self setItemCount:[input readInt32]];
        break;
      }
      case 32: {
        [self setActive:[input readBool]];
        break;
      }
      case 40: {
        [self setClosed:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultPlaylist.hasId;
}
- (SInt32) id {
  return resultPlaylist.id;
}
- (PlaylistBuilder*) setId:(SInt32) value {
  resultPlaylist.hasId = YES;
  resultPlaylist.id = value;
  return self;
}
- (PlaylistBuilder*) clearId {
  resultPlaylist.hasId = NO;
  resultPlaylist.id = 0;
  return self;
}
- (BOOL) hasName {
  return resultPlaylist.hasName;
}
- (NSString*) name {
  return resultPlaylist.name;
}
- (PlaylistBuilder*) setName:(NSString*) value {
  resultPlaylist.hasName = YES;
  resultPlaylist.name = value;
  return self;
}
- (PlaylistBuilder*) clearName {
  resultPlaylist.hasName = NO;
  resultPlaylist.name = @"";
  return self;
}
- (BOOL) hasItemCount {
  return resultPlaylist.hasItemCount;
}
- (SInt32) itemCount {
  return resultPlaylist.itemCount;
}
- (PlaylistBuilder*) setItemCount:(SInt32) value {
  resultPlaylist.hasItemCount = YES;
  resultPlaylist.itemCount = value;
  return self;
}
- (PlaylistBuilder*) clearItemCount {
  resultPlaylist.hasItemCount = NO;
  resultPlaylist.itemCount = 0;
  return self;
}
- (BOOL) hasActive {
  return resultPlaylist.hasActive;
}
- (BOOL) active {
  return resultPlaylist.active;
}
- (PlaylistBuilder*) setActive:(BOOL) value {
  resultPlaylist.hasActive = YES;
  resultPlaylist.active = value;
  return self;
}
- (PlaylistBuilder*) clearActive {
  resultPlaylist.hasActive = NO;
  resultPlaylist.active = NO;
  return self;
}
- (BOOL) hasClosed {
  return resultPlaylist.hasClosed;
}
- (BOOL) closed {
  return resultPlaylist.closed;
}
- (PlaylistBuilder*) setClosed:(BOOL) value {
  resultPlaylist.hasClosed = YES;
  resultPlaylist.closed = value;
  return self;
}
- (PlaylistBuilder*) clearClosed {
  resultPlaylist.hasClosed = NO;
  resultPlaylist.closed = NO;
  return self;
}
@end

@interface RequestPlaylists ()
@property BOOL includeClosed;
@end

@implementation RequestPlaylists

- (BOOL) hasIncludeClosed {
  return !!hasIncludeClosed_;
}
- (void) setHasIncludeClosed:(BOOL) _value_ {
  hasIncludeClosed_ = !!_value_;
}
- (BOOL) includeClosed {
  return !!includeClosed_;
}
- (void) setIncludeClosed:(BOOL) _value_ {
  includeClosed_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.includeClosed = NO;
  }
  return self;
}
static RequestPlaylists* defaultRequestPlaylistsInstance = nil;
+ (void) initialize {
  if (self == [RequestPlaylists class]) {
    defaultRequestPlaylistsInstance = [[RequestPlaylists alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRequestPlaylistsInstance;
}
- (instancetype) defaultInstance {
  return defaultRequestPlaylistsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasIncludeClosed) {
    [output writeBool:1 value:self.includeClosed];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasIncludeClosed) {
    size_ += computeBoolSize(1, self.includeClosed);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RequestPlaylists*) parseFromData:(NSData*) data {
  return (RequestPlaylists*)[[[RequestPlaylists builder] mergeFromData:data] build];
}
+ (RequestPlaylists*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestPlaylists*)[[[RequestPlaylists builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RequestPlaylists*) parseFromInputStream:(NSInputStream*) input {
  return (RequestPlaylists*)[[[RequestPlaylists builder] mergeFromInputStream:input] build];
}
+ (RequestPlaylists*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestPlaylists*)[[[RequestPlaylists builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestPlaylists*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RequestPlaylists*)[[[RequestPlaylists builder] mergeFromCodedInputStream:input] build];
}
+ (RequestPlaylists*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestPlaylists*)[[[RequestPlaylists builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestPlaylistsBuilder*) builder {
  return [[RequestPlaylistsBuilder alloc] init];
}
+ (RequestPlaylistsBuilder*) builderWithPrototype:(RequestPlaylists*) prototype {
  return [[RequestPlaylists builder] mergeFrom:prototype];
}
- (RequestPlaylistsBuilder*) builder {
  return [RequestPlaylists builder];
}
- (RequestPlaylistsBuilder*) toBuilder {
  return [RequestPlaylists builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasIncludeClosed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"includeClosed", [NSNumber numberWithBool:self.includeClosed]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasIncludeClosed) {
    [dictionary setObject: [NSNumber numberWithBool:self.includeClosed] forKey: @"includeClosed"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RequestPlaylists class]]) {
    return NO;
  }
  RequestPlaylists *otherMessage = other;
  return
      self.hasIncludeClosed == otherMessage.hasIncludeClosed &&
      (!self.hasIncludeClosed || self.includeClosed == otherMessage.includeClosed) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasIncludeClosed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.includeClosed] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RequestPlaylistsBuilder()
@property (strong) RequestPlaylists* resultRequestPlaylists;
@end

@implementation RequestPlaylistsBuilder
@synthesize resultRequestPlaylists;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRequestPlaylists = [[RequestPlaylists alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRequestPlaylists;
}
- (RequestPlaylistsBuilder*) clear {
  self.resultRequestPlaylists = [[RequestPlaylists alloc] init];
  return self;
}
- (RequestPlaylistsBuilder*) clone {
  return [RequestPlaylists builderWithPrototype:resultRequestPlaylists];
}
- (RequestPlaylists*) defaultInstance {
  return [RequestPlaylists defaultInstance];
}
- (RequestPlaylists*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RequestPlaylists*) buildPartial {
  RequestPlaylists* returnMe = resultRequestPlaylists;
  self.resultRequestPlaylists = nil;
  return returnMe;
}
- (RequestPlaylistsBuilder*) mergeFrom:(RequestPlaylists*) other {
  if (other == [RequestPlaylists defaultInstance]) {
    return self;
  }
  if (other.hasIncludeClosed) {
    [self setIncludeClosed:other.includeClosed];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RequestPlaylistsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RequestPlaylistsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setIncludeClosed:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasIncludeClosed {
  return resultRequestPlaylists.hasIncludeClosed;
}
- (BOOL) includeClosed {
  return resultRequestPlaylists.includeClosed;
}
- (RequestPlaylistsBuilder*) setIncludeClosed:(BOOL) value {
  resultRequestPlaylists.hasIncludeClosed = YES;
  resultRequestPlaylists.includeClosed = value;
  return self;
}
- (RequestPlaylistsBuilder*) clearIncludeClosed {
  resultRequestPlaylists.hasIncludeClosed = NO;
  resultRequestPlaylists.includeClosed = NO;
  return self;
}
@end

@interface RequestPlaylistSongs ()
@property SInt32 id;
@end

@implementation RequestPlaylistSongs

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
  }
  return self;
}
static RequestPlaylistSongs* defaultRequestPlaylistSongsInstance = nil;
+ (void) initialize {
  if (self == [RequestPlaylistSongs class]) {
    defaultRequestPlaylistSongsInstance = [[RequestPlaylistSongs alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRequestPlaylistSongsInstance;
}
- (instancetype) defaultInstance {
  return defaultRequestPlaylistSongsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RequestPlaylistSongs*) parseFromData:(NSData*) data {
  return (RequestPlaylistSongs*)[[[RequestPlaylistSongs builder] mergeFromData:data] build];
}
+ (RequestPlaylistSongs*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestPlaylistSongs*)[[[RequestPlaylistSongs builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RequestPlaylistSongs*) parseFromInputStream:(NSInputStream*) input {
  return (RequestPlaylistSongs*)[[[RequestPlaylistSongs builder] mergeFromInputStream:input] build];
}
+ (RequestPlaylistSongs*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestPlaylistSongs*)[[[RequestPlaylistSongs builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestPlaylistSongs*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RequestPlaylistSongs*)[[[RequestPlaylistSongs builder] mergeFromCodedInputStream:input] build];
}
+ (RequestPlaylistSongs*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestPlaylistSongs*)[[[RequestPlaylistSongs builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestPlaylistSongsBuilder*) builder {
  return [[RequestPlaylistSongsBuilder alloc] init];
}
+ (RequestPlaylistSongsBuilder*) builderWithPrototype:(RequestPlaylistSongs*) prototype {
  return [[RequestPlaylistSongs builder] mergeFrom:prototype];
}
- (RequestPlaylistSongsBuilder*) builder {
  return [RequestPlaylistSongs builder];
}
- (RequestPlaylistSongsBuilder*) toBuilder {
  return [RequestPlaylistSongs builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RequestPlaylistSongs class]]) {
    return NO;
  }
  RequestPlaylistSongs *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RequestPlaylistSongsBuilder()
@property (strong) RequestPlaylistSongs* resultRequestPlaylistSongs;
@end

@implementation RequestPlaylistSongsBuilder
@synthesize resultRequestPlaylistSongs;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRequestPlaylistSongs = [[RequestPlaylistSongs alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRequestPlaylistSongs;
}
- (RequestPlaylistSongsBuilder*) clear {
  self.resultRequestPlaylistSongs = [[RequestPlaylistSongs alloc] init];
  return self;
}
- (RequestPlaylistSongsBuilder*) clone {
  return [RequestPlaylistSongs builderWithPrototype:resultRequestPlaylistSongs];
}
- (RequestPlaylistSongs*) defaultInstance {
  return [RequestPlaylistSongs defaultInstance];
}
- (RequestPlaylistSongs*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RequestPlaylistSongs*) buildPartial {
  RequestPlaylistSongs* returnMe = resultRequestPlaylistSongs;
  self.resultRequestPlaylistSongs = nil;
  return returnMe;
}
- (RequestPlaylistSongsBuilder*) mergeFrom:(RequestPlaylistSongs*) other {
  if (other == [RequestPlaylistSongs defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RequestPlaylistSongsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RequestPlaylistSongsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultRequestPlaylistSongs.hasId;
}
- (SInt32) id {
  return resultRequestPlaylistSongs.id;
}
- (RequestPlaylistSongsBuilder*) setId:(SInt32) value {
  resultRequestPlaylistSongs.hasId = YES;
  resultRequestPlaylistSongs.id = value;
  return self;
}
- (RequestPlaylistSongsBuilder*) clearId {
  resultRequestPlaylistSongs.hasId = NO;
  resultRequestPlaylistSongs.id = 0;
  return self;
}
@end

@interface RequestChangeSong ()
@property SInt32 playlistId;
@property SInt32 songIndex;
@end

@implementation RequestChangeSong

- (BOOL) hasPlaylistId {
  return !!hasPlaylistId_;
}
- (void) setHasPlaylistId:(BOOL) _value_ {
  hasPlaylistId_ = !!_value_;
}
@synthesize playlistId;
- (BOOL) hasSongIndex {
  return !!hasSongIndex_;
}
- (void) setHasSongIndex:(BOOL) _value_ {
  hasSongIndex_ = !!_value_;
}
@synthesize songIndex;
- (instancetype) init {
  if ((self = [super init])) {
    self.playlistId = 0;
    self.songIndex = 0;
  }
  return self;
}
static RequestChangeSong* defaultRequestChangeSongInstance = nil;
+ (void) initialize {
  if (self == [RequestChangeSong class]) {
    defaultRequestChangeSongInstance = [[RequestChangeSong alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRequestChangeSongInstance;
}
- (instancetype) defaultInstance {
  return defaultRequestChangeSongInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPlaylistId) {
    [output writeInt32:1 value:self.playlistId];
  }
  if (self.hasSongIndex) {
    [output writeInt32:2 value:self.songIndex];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPlaylistId) {
    size_ += computeInt32Size(1, self.playlistId);
  }
  if (self.hasSongIndex) {
    size_ += computeInt32Size(2, self.songIndex);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RequestChangeSong*) parseFromData:(NSData*) data {
  return (RequestChangeSong*)[[[RequestChangeSong builder] mergeFromData:data] build];
}
+ (RequestChangeSong*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestChangeSong*)[[[RequestChangeSong builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RequestChangeSong*) parseFromInputStream:(NSInputStream*) input {
  return (RequestChangeSong*)[[[RequestChangeSong builder] mergeFromInputStream:input] build];
}
+ (RequestChangeSong*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestChangeSong*)[[[RequestChangeSong builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestChangeSong*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RequestChangeSong*)[[[RequestChangeSong builder] mergeFromCodedInputStream:input] build];
}
+ (RequestChangeSong*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestChangeSong*)[[[RequestChangeSong builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestChangeSongBuilder*) builder {
  return [[RequestChangeSongBuilder alloc] init];
}
+ (RequestChangeSongBuilder*) builderWithPrototype:(RequestChangeSong*) prototype {
  return [[RequestChangeSong builder] mergeFrom:prototype];
}
- (RequestChangeSongBuilder*) builder {
  return [RequestChangeSong builder];
}
- (RequestChangeSongBuilder*) toBuilder {
  return [RequestChangeSong builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPlaylistId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playlistId", [NSNumber numberWithInteger:self.playlistId]];
  }
  if (self.hasSongIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"songIndex", [NSNumber numberWithInteger:self.songIndex]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPlaylistId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.playlistId] forKey: @"playlistId"];
  }
  if (self.hasSongIndex) {
    [dictionary setObject: [NSNumber numberWithInteger:self.songIndex] forKey: @"songIndex"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RequestChangeSong class]]) {
    return NO;
  }
  RequestChangeSong *otherMessage = other;
  return
      self.hasPlaylistId == otherMessage.hasPlaylistId &&
      (!self.hasPlaylistId || self.playlistId == otherMessage.playlistId) &&
      self.hasSongIndex == otherMessage.hasSongIndex &&
      (!self.hasSongIndex || self.songIndex == otherMessage.songIndex) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPlaylistId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.playlistId] hash];
  }
  if (self.hasSongIndex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.songIndex] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RequestChangeSongBuilder()
@property (strong) RequestChangeSong* resultRequestChangeSong;
@end

@implementation RequestChangeSongBuilder
@synthesize resultRequestChangeSong;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRequestChangeSong = [[RequestChangeSong alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRequestChangeSong;
}
- (RequestChangeSongBuilder*) clear {
  self.resultRequestChangeSong = [[RequestChangeSong alloc] init];
  return self;
}
- (RequestChangeSongBuilder*) clone {
  return [RequestChangeSong builderWithPrototype:resultRequestChangeSong];
}
- (RequestChangeSong*) defaultInstance {
  return [RequestChangeSong defaultInstance];
}
- (RequestChangeSong*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RequestChangeSong*) buildPartial {
  RequestChangeSong* returnMe = resultRequestChangeSong;
  self.resultRequestChangeSong = nil;
  return returnMe;
}
- (RequestChangeSongBuilder*) mergeFrom:(RequestChangeSong*) other {
  if (other == [RequestChangeSong defaultInstance]) {
    return self;
  }
  if (other.hasPlaylistId) {
    [self setPlaylistId:other.playlistId];
  }
  if (other.hasSongIndex) {
    [self setSongIndex:other.songIndex];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RequestChangeSongBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RequestChangeSongBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPlaylistId:[input readInt32]];
        break;
      }
      case 16: {
        [self setSongIndex:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPlaylistId {
  return resultRequestChangeSong.hasPlaylistId;
}
- (SInt32) playlistId {
  return resultRequestChangeSong.playlistId;
}
- (RequestChangeSongBuilder*) setPlaylistId:(SInt32) value {
  resultRequestChangeSong.hasPlaylistId = YES;
  resultRequestChangeSong.playlistId = value;
  return self;
}
- (RequestChangeSongBuilder*) clearPlaylistId {
  resultRequestChangeSong.hasPlaylistId = NO;
  resultRequestChangeSong.playlistId = 0;
  return self;
}
- (BOOL) hasSongIndex {
  return resultRequestChangeSong.hasSongIndex;
}
- (SInt32) songIndex {
  return resultRequestChangeSong.songIndex;
}
- (RequestChangeSongBuilder*) setSongIndex:(SInt32) value {
  resultRequestChangeSong.hasSongIndex = YES;
  resultRequestChangeSong.songIndex = value;
  return self;
}
- (RequestChangeSongBuilder*) clearSongIndex {
  resultRequestChangeSong.hasSongIndex = NO;
  resultRequestChangeSong.songIndex = 0;
  return self;
}
@end

@interface RequestSetVolume ()
@property SInt32 volume;
@end

@implementation RequestSetVolume

- (BOOL) hasVolume {
  return !!hasVolume_;
}
- (void) setHasVolume:(BOOL) _value_ {
  hasVolume_ = !!_value_;
}
@synthesize volume;
- (instancetype) init {
  if ((self = [super init])) {
    self.volume = 0;
  }
  return self;
}
static RequestSetVolume* defaultRequestSetVolumeInstance = nil;
+ (void) initialize {
  if (self == [RequestSetVolume class]) {
    defaultRequestSetVolumeInstance = [[RequestSetVolume alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRequestSetVolumeInstance;
}
- (instancetype) defaultInstance {
  return defaultRequestSetVolumeInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasVolume) {
    [output writeInt32:1 value:self.volume];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasVolume) {
    size_ += computeInt32Size(1, self.volume);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RequestSetVolume*) parseFromData:(NSData*) data {
  return (RequestSetVolume*)[[[RequestSetVolume builder] mergeFromData:data] build];
}
+ (RequestSetVolume*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestSetVolume*)[[[RequestSetVolume builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RequestSetVolume*) parseFromInputStream:(NSInputStream*) input {
  return (RequestSetVolume*)[[[RequestSetVolume builder] mergeFromInputStream:input] build];
}
+ (RequestSetVolume*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestSetVolume*)[[[RequestSetVolume builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestSetVolume*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RequestSetVolume*)[[[RequestSetVolume builder] mergeFromCodedInputStream:input] build];
}
+ (RequestSetVolume*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestSetVolume*)[[[RequestSetVolume builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestSetVolumeBuilder*) builder {
  return [[RequestSetVolumeBuilder alloc] init];
}
+ (RequestSetVolumeBuilder*) builderWithPrototype:(RequestSetVolume*) prototype {
  return [[RequestSetVolume builder] mergeFrom:prototype];
}
- (RequestSetVolumeBuilder*) builder {
  return [RequestSetVolume builder];
}
- (RequestSetVolumeBuilder*) toBuilder {
  return [RequestSetVolume builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasVolume) {
    [output appendFormat:@"%@%@: %@\n", indent, @"volume", [NSNumber numberWithInteger:self.volume]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasVolume) {
    [dictionary setObject: [NSNumber numberWithInteger:self.volume] forKey: @"volume"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RequestSetVolume class]]) {
    return NO;
  }
  RequestSetVolume *otherMessage = other;
  return
      self.hasVolume == otherMessage.hasVolume &&
      (!self.hasVolume || self.volume == otherMessage.volume) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasVolume) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.volume] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RequestSetVolumeBuilder()
@property (strong) RequestSetVolume* resultRequestSetVolume;
@end

@implementation RequestSetVolumeBuilder
@synthesize resultRequestSetVolume;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRequestSetVolume = [[RequestSetVolume alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRequestSetVolume;
}
- (RequestSetVolumeBuilder*) clear {
  self.resultRequestSetVolume = [[RequestSetVolume alloc] init];
  return self;
}
- (RequestSetVolumeBuilder*) clone {
  return [RequestSetVolume builderWithPrototype:resultRequestSetVolume];
}
- (RequestSetVolume*) defaultInstance {
  return [RequestSetVolume defaultInstance];
}
- (RequestSetVolume*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RequestSetVolume*) buildPartial {
  RequestSetVolume* returnMe = resultRequestSetVolume;
  self.resultRequestSetVolume = nil;
  return returnMe;
}
- (RequestSetVolumeBuilder*) mergeFrom:(RequestSetVolume*) other {
  if (other == [RequestSetVolume defaultInstance]) {
    return self;
  }
  if (other.hasVolume) {
    [self setVolume:other.volume];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RequestSetVolumeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RequestSetVolumeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setVolume:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasVolume {
  return resultRequestSetVolume.hasVolume;
}
- (SInt32) volume {
  return resultRequestSetVolume.volume;
}
- (RequestSetVolumeBuilder*) setVolume:(SInt32) value {
  resultRequestSetVolume.hasVolume = YES;
  resultRequestSetVolume.volume = value;
  return self;
}
- (RequestSetVolumeBuilder*) clearVolume {
  resultRequestSetVolume.hasVolume = NO;
  resultRequestSetVolume.volume = 0;
  return self;
}
@end

@interface Repeat ()
@property RepeatMode repeatMode;
@end

@implementation Repeat

- (BOOL) hasRepeatMode {
  return !!hasRepeatMode_;
}
- (void) setHasRepeatMode:(BOOL) _value_ {
  hasRepeatMode_ = !!_value_;
}
@synthesize repeatMode;
- (instancetype) init {
  if ((self = [super init])) {
    self.repeatMode = RepeatModeRepeatOff;
  }
  return self;
}
static Repeat* defaultRepeatInstance = nil;
+ (void) initialize {
  if (self == [Repeat class]) {
    defaultRepeatInstance = [[Repeat alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRepeatInstance;
}
- (instancetype) defaultInstance {
  return defaultRepeatInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRepeatMode) {
    [output writeEnum:1 value:self.repeatMode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRepeatMode) {
    size_ += computeEnumSize(1, self.repeatMode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Repeat*) parseFromData:(NSData*) data {
  return (Repeat*)[[[Repeat builder] mergeFromData:data] build];
}
+ (Repeat*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Repeat*)[[[Repeat builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Repeat*) parseFromInputStream:(NSInputStream*) input {
  return (Repeat*)[[[Repeat builder] mergeFromInputStream:input] build];
}
+ (Repeat*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Repeat*)[[[Repeat builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Repeat*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Repeat*)[[[Repeat builder] mergeFromCodedInputStream:input] build];
}
+ (Repeat*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Repeat*)[[[Repeat builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RepeatBuilder*) builder {
  return [[RepeatBuilder alloc] init];
}
+ (RepeatBuilder*) builderWithPrototype:(Repeat*) prototype {
  return [[Repeat builder] mergeFrom:prototype];
}
- (RepeatBuilder*) builder {
  return [Repeat builder];
}
- (RepeatBuilder*) toBuilder {
  return [Repeat builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRepeatMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatMode", NSStringFromRepeatMode(self.repeatMode)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRepeatMode) {
    [dictionary setObject: @(self.repeatMode) forKey: @"repeatMode"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Repeat class]]) {
    return NO;
  }
  Repeat *otherMessage = other;
  return
      self.hasRepeatMode == otherMessage.hasRepeatMode &&
      (!self.hasRepeatMode || self.repeatMode == otherMessage.repeatMode) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRepeatMode) {
    hashCode = hashCode * 31 + self.repeatMode;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RepeatBuilder()
@property (strong) Repeat* resultRepeat;
@end

@implementation RepeatBuilder
@synthesize resultRepeat;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRepeat = [[Repeat alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRepeat;
}
- (RepeatBuilder*) clear {
  self.resultRepeat = [[Repeat alloc] init];
  return self;
}
- (RepeatBuilder*) clone {
  return [Repeat builderWithPrototype:resultRepeat];
}
- (Repeat*) defaultInstance {
  return [Repeat defaultInstance];
}
- (Repeat*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Repeat*) buildPartial {
  Repeat* returnMe = resultRepeat;
  self.resultRepeat = nil;
  return returnMe;
}
- (RepeatBuilder*) mergeFrom:(Repeat*) other {
  if (other == [Repeat defaultInstance]) {
    return self;
  }
  if (other.hasRepeatMode) {
    [self setRepeatMode:other.repeatMode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RepeatBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RepeatBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        RepeatMode value = (RepeatMode)[input readEnum];
        if (RepeatModeIsValidValue(value)) {
          [self setRepeatMode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasRepeatMode {
  return resultRepeat.hasRepeatMode;
}
- (RepeatMode) repeatMode {
  return resultRepeat.repeatMode;
}
- (RepeatBuilder*) setRepeatMode:(RepeatMode) value {
  resultRepeat.hasRepeatMode = YES;
  resultRepeat.repeatMode = value;
  return self;
}
- (RepeatBuilder*) clearRepeatMode {
  resultRepeat.hasRepeatMode = NO;
  resultRepeat.repeatMode = RepeatModeRepeatOff;
  return self;
}
@end

@interface Shuffle ()
@property ShuffleMode shuffleMode;
@end

@implementation Shuffle

- (BOOL) hasShuffleMode {
  return !!hasShuffleMode_;
}
- (void) setHasShuffleMode:(BOOL) _value_ {
  hasShuffleMode_ = !!_value_;
}
@synthesize shuffleMode;
- (instancetype) init {
  if ((self = [super init])) {
    self.shuffleMode = ShuffleModeShuffleOff;
  }
  return self;
}
static Shuffle* defaultShuffleInstance = nil;
+ (void) initialize {
  if (self == [Shuffle class]) {
    defaultShuffleInstance = [[Shuffle alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultShuffleInstance;
}
- (instancetype) defaultInstance {
  return defaultShuffleInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasShuffleMode) {
    [output writeEnum:1 value:self.shuffleMode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasShuffleMode) {
    size_ += computeEnumSize(1, self.shuffleMode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Shuffle*) parseFromData:(NSData*) data {
  return (Shuffle*)[[[Shuffle builder] mergeFromData:data] build];
}
+ (Shuffle*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Shuffle*)[[[Shuffle builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Shuffle*) parseFromInputStream:(NSInputStream*) input {
  return (Shuffle*)[[[Shuffle builder] mergeFromInputStream:input] build];
}
+ (Shuffle*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Shuffle*)[[[Shuffle builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Shuffle*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Shuffle*)[[[Shuffle builder] mergeFromCodedInputStream:input] build];
}
+ (Shuffle*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Shuffle*)[[[Shuffle builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ShuffleBuilder*) builder {
  return [[ShuffleBuilder alloc] init];
}
+ (ShuffleBuilder*) builderWithPrototype:(Shuffle*) prototype {
  return [[Shuffle builder] mergeFrom:prototype];
}
- (ShuffleBuilder*) builder {
  return [Shuffle builder];
}
- (ShuffleBuilder*) toBuilder {
  return [Shuffle builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasShuffleMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shuffleMode", NSStringFromShuffleMode(self.shuffleMode)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasShuffleMode) {
    [dictionary setObject: @(self.shuffleMode) forKey: @"shuffleMode"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Shuffle class]]) {
    return NO;
  }
  Shuffle *otherMessage = other;
  return
      self.hasShuffleMode == otherMessage.hasShuffleMode &&
      (!self.hasShuffleMode || self.shuffleMode == otherMessage.shuffleMode) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasShuffleMode) {
    hashCode = hashCode * 31 + self.shuffleMode;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ShuffleBuilder()
@property (strong) Shuffle* resultShuffle;
@end

@implementation ShuffleBuilder
@synthesize resultShuffle;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultShuffle = [[Shuffle alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultShuffle;
}
- (ShuffleBuilder*) clear {
  self.resultShuffle = [[Shuffle alloc] init];
  return self;
}
- (ShuffleBuilder*) clone {
  return [Shuffle builderWithPrototype:resultShuffle];
}
- (Shuffle*) defaultInstance {
  return [Shuffle defaultInstance];
}
- (Shuffle*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Shuffle*) buildPartial {
  Shuffle* returnMe = resultShuffle;
  self.resultShuffle = nil;
  return returnMe;
}
- (ShuffleBuilder*) mergeFrom:(Shuffle*) other {
  if (other == [Shuffle defaultInstance]) {
    return self;
  }
  if (other.hasShuffleMode) {
    [self setShuffleMode:other.shuffleMode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ShuffleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ShuffleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        ShuffleMode value = (ShuffleMode)[input readEnum];
        if (ShuffleModeIsValidValue(value)) {
          [self setShuffleMode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasShuffleMode {
  return resultShuffle.hasShuffleMode;
}
- (ShuffleMode) shuffleMode {
  return resultShuffle.shuffleMode;
}
- (ShuffleBuilder*) setShuffleMode:(ShuffleMode) value {
  resultShuffle.hasShuffleMode = YES;
  resultShuffle.shuffleMode = value;
  return self;
}
- (ShuffleBuilder*) clearShuffleMode {
  resultShuffle.hasShuffleMode = NO;
  resultShuffle.shuffleMode = ShuffleModeShuffleOff;
  return self;
}
@end

@interface ResponseClementineInfo ()
@property (strong) NSString* version;
@property EngineState state;
@end

@implementation ResponseClementineInfo

- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
- (BOOL) hasState {
  return !!hasState_;
}
- (void) setHasState:(BOOL) _value_ {
  hasState_ = !!_value_;
}
@synthesize state;
- (instancetype) init {
  if ((self = [super init])) {
    self.version = @"";
    self.state = EngineStateEmpty;
  }
  return self;
}
static ResponseClementineInfo* defaultResponseClementineInfoInstance = nil;
+ (void) initialize {
  if (self == [ResponseClementineInfo class]) {
    defaultResponseClementineInfoInstance = [[ResponseClementineInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseClementineInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseClementineInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasVersion) {
    [output writeString:1 value:self.version];
  }
  if (self.hasState) {
    [output writeEnum:2 value:self.state];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasVersion) {
    size_ += computeStringSize(1, self.version);
  }
  if (self.hasState) {
    size_ += computeEnumSize(2, self.state);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseClementineInfo*) parseFromData:(NSData*) data {
  return (ResponseClementineInfo*)[[[ResponseClementineInfo builder] mergeFromData:data] build];
}
+ (ResponseClementineInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseClementineInfo*)[[[ResponseClementineInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseClementineInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseClementineInfo*)[[[ResponseClementineInfo builder] mergeFromInputStream:input] build];
}
+ (ResponseClementineInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseClementineInfo*)[[[ResponseClementineInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseClementineInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseClementineInfo*)[[[ResponseClementineInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseClementineInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseClementineInfo*)[[[ResponseClementineInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseClementineInfoBuilder*) builder {
  return [[ResponseClementineInfoBuilder alloc] init];
}
+ (ResponseClementineInfoBuilder*) builderWithPrototype:(ResponseClementineInfo*) prototype {
  return [[ResponseClementineInfo builder] mergeFrom:prototype];
}
- (ResponseClementineInfoBuilder*) builder {
  return [ResponseClementineInfo builder];
}
- (ResponseClementineInfoBuilder*) toBuilder {
  return [ResponseClementineInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", self.version];
  }
  if (self.hasState) {
    [output appendFormat:@"%@%@: %@\n", indent, @"state", NSStringFromEngineState(self.state)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasVersion) {
    [dictionary setObject: self.version forKey: @"version"];
  }
  if (self.hasState) {
    [dictionary setObject: @(self.state) forKey: @"state"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseClementineInfo class]]) {
    return NO;
  }
  ResponseClementineInfo *otherMessage = other;
  return
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || [self.version isEqual:otherMessage.version]) &&
      self.hasState == otherMessage.hasState &&
      (!self.hasState || self.state == otherMessage.state) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [self.version hash];
  }
  if (self.hasState) {
    hashCode = hashCode * 31 + self.state;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseClementineInfoBuilder()
@property (strong) ResponseClementineInfo* resultResponseClementineInfo;
@end

@implementation ResponseClementineInfoBuilder
@synthesize resultResponseClementineInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponseClementineInfo = [[ResponseClementineInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponseClementineInfo;
}
- (ResponseClementineInfoBuilder*) clear {
  self.resultResponseClementineInfo = [[ResponseClementineInfo alloc] init];
  return self;
}
- (ResponseClementineInfoBuilder*) clone {
  return [ResponseClementineInfo builderWithPrototype:resultResponseClementineInfo];
}
- (ResponseClementineInfo*) defaultInstance {
  return [ResponseClementineInfo defaultInstance];
}
- (ResponseClementineInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseClementineInfo*) buildPartial {
  ResponseClementineInfo* returnMe = resultResponseClementineInfo;
  self.resultResponseClementineInfo = nil;
  return returnMe;
}
- (ResponseClementineInfoBuilder*) mergeFrom:(ResponseClementineInfo*) other {
  if (other == [ResponseClementineInfo defaultInstance]) {
    return self;
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasState) {
    [self setState:other.state];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseClementineInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseClementineInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setVersion:[input readString]];
        break;
      }
      case 16: {
        EngineState value = (EngineState)[input readEnum];
        if (EngineStateIsValidValue(value)) {
          [self setState:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasVersion {
  return resultResponseClementineInfo.hasVersion;
}
- (NSString*) version {
  return resultResponseClementineInfo.version;
}
- (ResponseClementineInfoBuilder*) setVersion:(NSString*) value {
  resultResponseClementineInfo.hasVersion = YES;
  resultResponseClementineInfo.version = value;
  return self;
}
- (ResponseClementineInfoBuilder*) clearVersion {
  resultResponseClementineInfo.hasVersion = NO;
  resultResponseClementineInfo.version = @"";
  return self;
}
- (BOOL) hasState {
  return resultResponseClementineInfo.hasState;
}
- (EngineState) state {
  return resultResponseClementineInfo.state;
}
- (ResponseClementineInfoBuilder*) setState:(EngineState) value {
  resultResponseClementineInfo.hasState = YES;
  resultResponseClementineInfo.state = value;
  return self;
}
- (ResponseClementineInfoBuilder*) clearState {
  resultResponseClementineInfo.hasState = NO;
  resultResponseClementineInfo.state = EngineStateEmpty;
  return self;
}
@end

@interface ResponseCurrentMetadata ()
@property (strong) SongMetadata* songMetadata;
@end

@implementation ResponseCurrentMetadata

- (BOOL) hasSongMetadata {
  return !!hasSongMetadata_;
}
- (void) setHasSongMetadata:(BOOL) _value_ {
  hasSongMetadata_ = !!_value_;
}
@synthesize songMetadata;
- (instancetype) init {
  if ((self = [super init])) {
    self.songMetadata = [SongMetadata defaultInstance];
  }
  return self;
}
static ResponseCurrentMetadata* defaultResponseCurrentMetadataInstance = nil;
+ (void) initialize {
  if (self == [ResponseCurrentMetadata class]) {
    defaultResponseCurrentMetadataInstance = [[ResponseCurrentMetadata alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseCurrentMetadataInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseCurrentMetadataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSongMetadata) {
    [output writeMessage:1 value:self.songMetadata];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSongMetadata) {
    size_ += computeMessageSize(1, self.songMetadata);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseCurrentMetadata*) parseFromData:(NSData*) data {
  return (ResponseCurrentMetadata*)[[[ResponseCurrentMetadata builder] mergeFromData:data] build];
}
+ (ResponseCurrentMetadata*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseCurrentMetadata*)[[[ResponseCurrentMetadata builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseCurrentMetadata*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseCurrentMetadata*)[[[ResponseCurrentMetadata builder] mergeFromInputStream:input] build];
}
+ (ResponseCurrentMetadata*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseCurrentMetadata*)[[[ResponseCurrentMetadata builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseCurrentMetadata*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseCurrentMetadata*)[[[ResponseCurrentMetadata builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseCurrentMetadata*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseCurrentMetadata*)[[[ResponseCurrentMetadata builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseCurrentMetadataBuilder*) builder {
  return [[ResponseCurrentMetadataBuilder alloc] init];
}
+ (ResponseCurrentMetadataBuilder*) builderWithPrototype:(ResponseCurrentMetadata*) prototype {
  return [[ResponseCurrentMetadata builder] mergeFrom:prototype];
}
- (ResponseCurrentMetadataBuilder*) builder {
  return [ResponseCurrentMetadata builder];
}
- (ResponseCurrentMetadataBuilder*) toBuilder {
  return [ResponseCurrentMetadata builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSongMetadata) {
    [output appendFormat:@"%@%@ {\n", indent, @"songMetadata"];
    [self.songMetadata writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSongMetadata) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.songMetadata storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"songMetadata"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseCurrentMetadata class]]) {
    return NO;
  }
  ResponseCurrentMetadata *otherMessage = other;
  return
      self.hasSongMetadata == otherMessage.hasSongMetadata &&
      (!self.hasSongMetadata || [self.songMetadata isEqual:otherMessage.songMetadata]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSongMetadata) {
    hashCode = hashCode * 31 + [self.songMetadata hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseCurrentMetadataBuilder()
@property (strong) ResponseCurrentMetadata* resultResponseCurrentMetadata;
@end

@implementation ResponseCurrentMetadataBuilder
@synthesize resultResponseCurrentMetadata;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponseCurrentMetadata = [[ResponseCurrentMetadata alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponseCurrentMetadata;
}
- (ResponseCurrentMetadataBuilder*) clear {
  self.resultResponseCurrentMetadata = [[ResponseCurrentMetadata alloc] init];
  return self;
}
- (ResponseCurrentMetadataBuilder*) clone {
  return [ResponseCurrentMetadata builderWithPrototype:resultResponseCurrentMetadata];
}
- (ResponseCurrentMetadata*) defaultInstance {
  return [ResponseCurrentMetadata defaultInstance];
}
- (ResponseCurrentMetadata*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseCurrentMetadata*) buildPartial {
  ResponseCurrentMetadata* returnMe = resultResponseCurrentMetadata;
  self.resultResponseCurrentMetadata = nil;
  return returnMe;
}
- (ResponseCurrentMetadataBuilder*) mergeFrom:(ResponseCurrentMetadata*) other {
  if (other == [ResponseCurrentMetadata defaultInstance]) {
    return self;
  }
  if (other.hasSongMetadata) {
    [self mergeSongMetadata:other.songMetadata];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseCurrentMetadataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseCurrentMetadataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        SongMetadataBuilder* subBuilder = [SongMetadata builder];
        if (self.hasSongMetadata) {
          [subBuilder mergeFrom:self.songMetadata];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSongMetadata:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSongMetadata {
  return resultResponseCurrentMetadata.hasSongMetadata;
}
- (SongMetadata*) songMetadata {
  return resultResponseCurrentMetadata.songMetadata;
}
- (ResponseCurrentMetadataBuilder*) setSongMetadata:(SongMetadata*) value {
  resultResponseCurrentMetadata.hasSongMetadata = YES;
  resultResponseCurrentMetadata.songMetadata = value;
  return self;
}
- (ResponseCurrentMetadataBuilder*) setSongMetadataBuilder:(SongMetadataBuilder*) builderForValue {
  return [self setSongMetadata:[builderForValue build]];
}
- (ResponseCurrentMetadataBuilder*) mergeSongMetadata:(SongMetadata*) value {
  if (resultResponseCurrentMetadata.hasSongMetadata &&
      resultResponseCurrentMetadata.songMetadata != [SongMetadata defaultInstance]) {
    resultResponseCurrentMetadata.songMetadata =
      [[[SongMetadata builderWithPrototype:resultResponseCurrentMetadata.songMetadata] mergeFrom:value] buildPartial];
  } else {
    resultResponseCurrentMetadata.songMetadata = value;
  }
  resultResponseCurrentMetadata.hasSongMetadata = YES;
  return self;
}
- (ResponseCurrentMetadataBuilder*) clearSongMetadata {
  resultResponseCurrentMetadata.hasSongMetadata = NO;
  resultResponseCurrentMetadata.songMetadata = [SongMetadata defaultInstance];
  return self;
}
@end

@interface ResponsePlaylists ()
@property (strong) NSMutableArray * playlistArray;
@end

@implementation ResponsePlaylists

@synthesize playlistArray;
@dynamic playlist;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static ResponsePlaylists* defaultResponsePlaylistsInstance = nil;
+ (void) initialize {
  if (self == [ResponsePlaylists class]) {
    defaultResponsePlaylistsInstance = [[ResponsePlaylists alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponsePlaylistsInstance;
}
- (instancetype) defaultInstance {
  return defaultResponsePlaylistsInstance;
}
- (NSArray *)playlist {
  return playlistArray;
}
- (Playlist*)playlistAtIndex:(NSUInteger)index {
  return [playlistArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.playlistArray enumerateObjectsUsingBlock:^(Playlist *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.playlistArray enumerateObjectsUsingBlock:^(Playlist *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponsePlaylists*) parseFromData:(NSData*) data {
  return (ResponsePlaylists*)[[[ResponsePlaylists builder] mergeFromData:data] build];
}
+ (ResponsePlaylists*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponsePlaylists*)[[[ResponsePlaylists builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponsePlaylists*) parseFromInputStream:(NSInputStream*) input {
  return (ResponsePlaylists*)[[[ResponsePlaylists builder] mergeFromInputStream:input] build];
}
+ (ResponsePlaylists*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponsePlaylists*)[[[ResponsePlaylists builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponsePlaylists*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponsePlaylists*)[[[ResponsePlaylists builder] mergeFromCodedInputStream:input] build];
}
+ (ResponsePlaylists*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponsePlaylists*)[[[ResponsePlaylists builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponsePlaylistsBuilder*) builder {
  return [[ResponsePlaylistsBuilder alloc] init];
}
+ (ResponsePlaylistsBuilder*) builderWithPrototype:(ResponsePlaylists*) prototype {
  return [[ResponsePlaylists builder] mergeFrom:prototype];
}
- (ResponsePlaylistsBuilder*) builder {
  return [ResponsePlaylists builder];
}
- (ResponsePlaylistsBuilder*) toBuilder {
  return [ResponsePlaylists builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.playlistArray enumerateObjectsUsingBlock:^(Playlist *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"playlist"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (Playlist* element in self.playlistArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"playlist"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponsePlaylists class]]) {
    return NO;
  }
  ResponsePlaylists *otherMessage = other;
  return
      [self.playlistArray isEqualToArray:otherMessage.playlistArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.playlistArray enumerateObjectsUsingBlock:^(Playlist *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponsePlaylistsBuilder()
@property (strong) ResponsePlaylists* resultResponsePlaylists;
@end

@implementation ResponsePlaylistsBuilder
@synthesize resultResponsePlaylists;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponsePlaylists = [[ResponsePlaylists alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponsePlaylists;
}
- (ResponsePlaylistsBuilder*) clear {
  self.resultResponsePlaylists = [[ResponsePlaylists alloc] init];
  return self;
}
- (ResponsePlaylistsBuilder*) clone {
  return [ResponsePlaylists builderWithPrototype:resultResponsePlaylists];
}
- (ResponsePlaylists*) defaultInstance {
  return [ResponsePlaylists defaultInstance];
}
- (ResponsePlaylists*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponsePlaylists*) buildPartial {
  ResponsePlaylists* returnMe = resultResponsePlaylists;
  self.resultResponsePlaylists = nil;
  return returnMe;
}
- (ResponsePlaylistsBuilder*) mergeFrom:(ResponsePlaylists*) other {
  if (other == [ResponsePlaylists defaultInstance]) {
    return self;
  }
  if (other.playlistArray.count > 0) {
    if (resultResponsePlaylists.playlistArray == nil) {
      resultResponsePlaylists.playlistArray = [[NSMutableArray alloc] initWithArray:other.playlistArray];
    } else {
      [resultResponsePlaylists.playlistArray addObjectsFromArray:other.playlistArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponsePlaylistsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponsePlaylistsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PlaylistBuilder* subBuilder = [Playlist builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPlaylist:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)playlist {
  return resultResponsePlaylists.playlistArray;
}
- (Playlist*)playlistAtIndex:(NSUInteger)index {
  return [resultResponsePlaylists playlistAtIndex:index];
}
- (ResponsePlaylistsBuilder *)addPlaylist:(Playlist*)value {
  if (resultResponsePlaylists.playlistArray == nil) {
    resultResponsePlaylists.playlistArray = [[NSMutableArray alloc]init];
  }
  [resultResponsePlaylists.playlistArray addObject:value];
  return self;
}
- (ResponsePlaylistsBuilder *)setPlaylistArray:(NSArray *)array {
  resultResponsePlaylists.playlistArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ResponsePlaylistsBuilder *)clearPlaylist {
  resultResponsePlaylists.playlistArray = nil;
  return self;
}
@end

@interface ResponsePlaylistSongs ()
@property (strong) Playlist* requestedPlaylist;
@property (strong) NSMutableArray * songsArray;
@end

@implementation ResponsePlaylistSongs

- (BOOL) hasRequestedPlaylist {
  return !!hasRequestedPlaylist_;
}
- (void) setHasRequestedPlaylist:(BOOL) _value_ {
  hasRequestedPlaylist_ = !!_value_;
}
@synthesize requestedPlaylist;
@synthesize songsArray;
@dynamic songs;
- (instancetype) init {
  if ((self = [super init])) {
    self.requestedPlaylist = [Playlist defaultInstance];
  }
  return self;
}
static ResponsePlaylistSongs* defaultResponsePlaylistSongsInstance = nil;
+ (void) initialize {
  if (self == [ResponsePlaylistSongs class]) {
    defaultResponsePlaylistSongsInstance = [[ResponsePlaylistSongs alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponsePlaylistSongsInstance;
}
- (instancetype) defaultInstance {
  return defaultResponsePlaylistSongsInstance;
}
- (NSArray *)songs {
  return songsArray;
}
- (SongMetadata*)songsAtIndex:(NSUInteger)index {
  return [songsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRequestedPlaylist) {
    [output writeMessage:1 value:self.requestedPlaylist];
  }
  [self.songsArray enumerateObjectsUsingBlock:^(SongMetadata *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRequestedPlaylist) {
    size_ += computeMessageSize(1, self.requestedPlaylist);
  }
  [self.songsArray enumerateObjectsUsingBlock:^(SongMetadata *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponsePlaylistSongs*) parseFromData:(NSData*) data {
  return (ResponsePlaylistSongs*)[[[ResponsePlaylistSongs builder] mergeFromData:data] build];
}
+ (ResponsePlaylistSongs*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponsePlaylistSongs*)[[[ResponsePlaylistSongs builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponsePlaylistSongs*) parseFromInputStream:(NSInputStream*) input {
  return (ResponsePlaylistSongs*)[[[ResponsePlaylistSongs builder] mergeFromInputStream:input] build];
}
+ (ResponsePlaylistSongs*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponsePlaylistSongs*)[[[ResponsePlaylistSongs builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponsePlaylistSongs*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponsePlaylistSongs*)[[[ResponsePlaylistSongs builder] mergeFromCodedInputStream:input] build];
}
+ (ResponsePlaylistSongs*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponsePlaylistSongs*)[[[ResponsePlaylistSongs builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponsePlaylistSongsBuilder*) builder {
  return [[ResponsePlaylistSongsBuilder alloc] init];
}
+ (ResponsePlaylistSongsBuilder*) builderWithPrototype:(ResponsePlaylistSongs*) prototype {
  return [[ResponsePlaylistSongs builder] mergeFrom:prototype];
}
- (ResponsePlaylistSongsBuilder*) builder {
  return [ResponsePlaylistSongs builder];
}
- (ResponsePlaylistSongsBuilder*) toBuilder {
  return [ResponsePlaylistSongs builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRequestedPlaylist) {
    [output appendFormat:@"%@%@ {\n", indent, @"requestedPlaylist"];
    [self.requestedPlaylist writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.songsArray enumerateObjectsUsingBlock:^(SongMetadata *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"songs"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRequestedPlaylist) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.requestedPlaylist storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"requestedPlaylist"];
  }
  for (SongMetadata* element in self.songsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"songs"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponsePlaylistSongs class]]) {
    return NO;
  }
  ResponsePlaylistSongs *otherMessage = other;
  return
      self.hasRequestedPlaylist == otherMessage.hasRequestedPlaylist &&
      (!self.hasRequestedPlaylist || [self.requestedPlaylist isEqual:otherMessage.requestedPlaylist]) &&
      [self.songsArray isEqualToArray:otherMessage.songsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRequestedPlaylist) {
    hashCode = hashCode * 31 + [self.requestedPlaylist hash];
  }
  [self.songsArray enumerateObjectsUsingBlock:^(SongMetadata *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponsePlaylistSongsBuilder()
@property (strong) ResponsePlaylistSongs* resultResponsePlaylistSongs;
@end

@implementation ResponsePlaylistSongsBuilder
@synthesize resultResponsePlaylistSongs;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponsePlaylistSongs = [[ResponsePlaylistSongs alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponsePlaylistSongs;
}
- (ResponsePlaylistSongsBuilder*) clear {
  self.resultResponsePlaylistSongs = [[ResponsePlaylistSongs alloc] init];
  return self;
}
- (ResponsePlaylistSongsBuilder*) clone {
  return [ResponsePlaylistSongs builderWithPrototype:resultResponsePlaylistSongs];
}
- (ResponsePlaylistSongs*) defaultInstance {
  return [ResponsePlaylistSongs defaultInstance];
}
- (ResponsePlaylistSongs*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponsePlaylistSongs*) buildPartial {
  ResponsePlaylistSongs* returnMe = resultResponsePlaylistSongs;
  self.resultResponsePlaylistSongs = nil;
  return returnMe;
}
- (ResponsePlaylistSongsBuilder*) mergeFrom:(ResponsePlaylistSongs*) other {
  if (other == [ResponsePlaylistSongs defaultInstance]) {
    return self;
  }
  if (other.hasRequestedPlaylist) {
    [self mergeRequestedPlaylist:other.requestedPlaylist];
  }
  if (other.songsArray.count > 0) {
    if (resultResponsePlaylistSongs.songsArray == nil) {
      resultResponsePlaylistSongs.songsArray = [[NSMutableArray alloc] initWithArray:other.songsArray];
    } else {
      [resultResponsePlaylistSongs.songsArray addObjectsFromArray:other.songsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponsePlaylistSongsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponsePlaylistSongsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PlaylistBuilder* subBuilder = [Playlist builder];
        if (self.hasRequestedPlaylist) {
          [subBuilder mergeFrom:self.requestedPlaylist];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRequestedPlaylist:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        SongMetadataBuilder* subBuilder = [SongMetadata builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSongs:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasRequestedPlaylist {
  return resultResponsePlaylistSongs.hasRequestedPlaylist;
}
- (Playlist*) requestedPlaylist {
  return resultResponsePlaylistSongs.requestedPlaylist;
}
- (ResponsePlaylistSongsBuilder*) setRequestedPlaylist:(Playlist*) value {
  resultResponsePlaylistSongs.hasRequestedPlaylist = YES;
  resultResponsePlaylistSongs.requestedPlaylist = value;
  return self;
}
- (ResponsePlaylistSongsBuilder*) setRequestedPlaylistBuilder:(PlaylistBuilder*) builderForValue {
  return [self setRequestedPlaylist:[builderForValue build]];
}
- (ResponsePlaylistSongsBuilder*) mergeRequestedPlaylist:(Playlist*) value {
  if (resultResponsePlaylistSongs.hasRequestedPlaylist &&
      resultResponsePlaylistSongs.requestedPlaylist != [Playlist defaultInstance]) {
    resultResponsePlaylistSongs.requestedPlaylist =
      [[[Playlist builderWithPrototype:resultResponsePlaylistSongs.requestedPlaylist] mergeFrom:value] buildPartial];
  } else {
    resultResponsePlaylistSongs.requestedPlaylist = value;
  }
  resultResponsePlaylistSongs.hasRequestedPlaylist = YES;
  return self;
}
- (ResponsePlaylistSongsBuilder*) clearRequestedPlaylist {
  resultResponsePlaylistSongs.hasRequestedPlaylist = NO;
  resultResponsePlaylistSongs.requestedPlaylist = [Playlist defaultInstance];
  return self;
}
- (NSMutableArray *)songs {
  return resultResponsePlaylistSongs.songsArray;
}
- (SongMetadata*)songsAtIndex:(NSUInteger)index {
  return [resultResponsePlaylistSongs songsAtIndex:index];
}
- (ResponsePlaylistSongsBuilder *)addSongs:(SongMetadata*)value {
  if (resultResponsePlaylistSongs.songsArray == nil) {
    resultResponsePlaylistSongs.songsArray = [[NSMutableArray alloc]init];
  }
  [resultResponsePlaylistSongs.songsArray addObject:value];
  return self;
}
- (ResponsePlaylistSongsBuilder *)setSongsArray:(NSArray *)array {
  resultResponsePlaylistSongs.songsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ResponsePlaylistSongsBuilder *)clearSongs {
  resultResponsePlaylistSongs.songsArray = nil;
  return self;
}
@end

@interface ResponseEngineStateChanged ()
@property EngineState state;
@end

@implementation ResponseEngineStateChanged

- (BOOL) hasState {
  return !!hasState_;
}
- (void) setHasState:(BOOL) _value_ {
  hasState_ = !!_value_;
}
@synthesize state;
- (instancetype) init {
  if ((self = [super init])) {
    self.state = EngineStateEmpty;
  }
  return self;
}
static ResponseEngineStateChanged* defaultResponseEngineStateChangedInstance = nil;
+ (void) initialize {
  if (self == [ResponseEngineStateChanged class]) {
    defaultResponseEngineStateChangedInstance = [[ResponseEngineStateChanged alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseEngineStateChangedInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseEngineStateChangedInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasState) {
    [output writeEnum:1 value:self.state];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasState) {
    size_ += computeEnumSize(1, self.state);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseEngineStateChanged*) parseFromData:(NSData*) data {
  return (ResponseEngineStateChanged*)[[[ResponseEngineStateChanged builder] mergeFromData:data] build];
}
+ (ResponseEngineStateChanged*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseEngineStateChanged*)[[[ResponseEngineStateChanged builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseEngineStateChanged*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseEngineStateChanged*)[[[ResponseEngineStateChanged builder] mergeFromInputStream:input] build];
}
+ (ResponseEngineStateChanged*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseEngineStateChanged*)[[[ResponseEngineStateChanged builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseEngineStateChanged*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseEngineStateChanged*)[[[ResponseEngineStateChanged builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseEngineStateChanged*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseEngineStateChanged*)[[[ResponseEngineStateChanged builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseEngineStateChangedBuilder*) builder {
  return [[ResponseEngineStateChangedBuilder alloc] init];
}
+ (ResponseEngineStateChangedBuilder*) builderWithPrototype:(ResponseEngineStateChanged*) prototype {
  return [[ResponseEngineStateChanged builder] mergeFrom:prototype];
}
- (ResponseEngineStateChangedBuilder*) builder {
  return [ResponseEngineStateChanged builder];
}
- (ResponseEngineStateChangedBuilder*) toBuilder {
  return [ResponseEngineStateChanged builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasState) {
    [output appendFormat:@"%@%@: %@\n", indent, @"state", NSStringFromEngineState(self.state)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasState) {
    [dictionary setObject: @(self.state) forKey: @"state"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseEngineStateChanged class]]) {
    return NO;
  }
  ResponseEngineStateChanged *otherMessage = other;
  return
      self.hasState == otherMessage.hasState &&
      (!self.hasState || self.state == otherMessage.state) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasState) {
    hashCode = hashCode * 31 + self.state;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseEngineStateChangedBuilder()
@property (strong) ResponseEngineStateChanged* resultResponseEngineStateChanged;
@end

@implementation ResponseEngineStateChangedBuilder
@synthesize resultResponseEngineStateChanged;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponseEngineStateChanged = [[ResponseEngineStateChanged alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponseEngineStateChanged;
}
- (ResponseEngineStateChangedBuilder*) clear {
  self.resultResponseEngineStateChanged = [[ResponseEngineStateChanged alloc] init];
  return self;
}
- (ResponseEngineStateChangedBuilder*) clone {
  return [ResponseEngineStateChanged builderWithPrototype:resultResponseEngineStateChanged];
}
- (ResponseEngineStateChanged*) defaultInstance {
  return [ResponseEngineStateChanged defaultInstance];
}
- (ResponseEngineStateChanged*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseEngineStateChanged*) buildPartial {
  ResponseEngineStateChanged* returnMe = resultResponseEngineStateChanged;
  self.resultResponseEngineStateChanged = nil;
  return returnMe;
}
- (ResponseEngineStateChangedBuilder*) mergeFrom:(ResponseEngineStateChanged*) other {
  if (other == [ResponseEngineStateChanged defaultInstance]) {
    return self;
  }
  if (other.hasState) {
    [self setState:other.state];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseEngineStateChangedBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseEngineStateChangedBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        EngineState value = (EngineState)[input readEnum];
        if (EngineStateIsValidValue(value)) {
          [self setState:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasState {
  return resultResponseEngineStateChanged.hasState;
}
- (EngineState) state {
  return resultResponseEngineStateChanged.state;
}
- (ResponseEngineStateChangedBuilder*) setState:(EngineState) value {
  resultResponseEngineStateChanged.hasState = YES;
  resultResponseEngineStateChanged.state = value;
  return self;
}
- (ResponseEngineStateChangedBuilder*) clearState {
  resultResponseEngineStateChanged.hasState = NO;
  resultResponseEngineStateChanged.state = EngineStateEmpty;
  return self;
}
@end

@interface ResponseUpdateTrackPosition ()
@property SInt32 position;
@end

@implementation ResponseUpdateTrackPosition

- (BOOL) hasPosition {
  return !!hasPosition_;
}
- (void) setHasPosition:(BOOL) _value_ {
  hasPosition_ = !!_value_;
}
@synthesize position;
- (instancetype) init {
  if ((self = [super init])) {
    self.position = 0;
  }
  return self;
}
static ResponseUpdateTrackPosition* defaultResponseUpdateTrackPositionInstance = nil;
+ (void) initialize {
  if (self == [ResponseUpdateTrackPosition class]) {
    defaultResponseUpdateTrackPositionInstance = [[ResponseUpdateTrackPosition alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseUpdateTrackPositionInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseUpdateTrackPositionInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPosition) {
    [output writeInt32:1 value:self.position];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPosition) {
    size_ += computeInt32Size(1, self.position);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseUpdateTrackPosition*) parseFromData:(NSData*) data {
  return (ResponseUpdateTrackPosition*)[[[ResponseUpdateTrackPosition builder] mergeFromData:data] build];
}
+ (ResponseUpdateTrackPosition*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseUpdateTrackPosition*)[[[ResponseUpdateTrackPosition builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseUpdateTrackPosition*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseUpdateTrackPosition*)[[[ResponseUpdateTrackPosition builder] mergeFromInputStream:input] build];
}
+ (ResponseUpdateTrackPosition*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseUpdateTrackPosition*)[[[ResponseUpdateTrackPosition builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseUpdateTrackPosition*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseUpdateTrackPosition*)[[[ResponseUpdateTrackPosition builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseUpdateTrackPosition*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseUpdateTrackPosition*)[[[ResponseUpdateTrackPosition builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseUpdateTrackPositionBuilder*) builder {
  return [[ResponseUpdateTrackPositionBuilder alloc] init];
}
+ (ResponseUpdateTrackPositionBuilder*) builderWithPrototype:(ResponseUpdateTrackPosition*) prototype {
  return [[ResponseUpdateTrackPosition builder] mergeFrom:prototype];
}
- (ResponseUpdateTrackPositionBuilder*) builder {
  return [ResponseUpdateTrackPosition builder];
}
- (ResponseUpdateTrackPositionBuilder*) toBuilder {
  return [ResponseUpdateTrackPosition builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPosition) {
    [output appendFormat:@"%@%@: %@\n", indent, @"position", [NSNumber numberWithInteger:self.position]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPosition) {
    [dictionary setObject: [NSNumber numberWithInteger:self.position] forKey: @"position"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseUpdateTrackPosition class]]) {
    return NO;
  }
  ResponseUpdateTrackPosition *otherMessage = other;
  return
      self.hasPosition == otherMessage.hasPosition &&
      (!self.hasPosition || self.position == otherMessage.position) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPosition) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.position] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseUpdateTrackPositionBuilder()
@property (strong) ResponseUpdateTrackPosition* resultResponseUpdateTrackPosition;
@end

@implementation ResponseUpdateTrackPositionBuilder
@synthesize resultResponseUpdateTrackPosition;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponseUpdateTrackPosition = [[ResponseUpdateTrackPosition alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponseUpdateTrackPosition;
}
- (ResponseUpdateTrackPositionBuilder*) clear {
  self.resultResponseUpdateTrackPosition = [[ResponseUpdateTrackPosition alloc] init];
  return self;
}
- (ResponseUpdateTrackPositionBuilder*) clone {
  return [ResponseUpdateTrackPosition builderWithPrototype:resultResponseUpdateTrackPosition];
}
- (ResponseUpdateTrackPosition*) defaultInstance {
  return [ResponseUpdateTrackPosition defaultInstance];
}
- (ResponseUpdateTrackPosition*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseUpdateTrackPosition*) buildPartial {
  ResponseUpdateTrackPosition* returnMe = resultResponseUpdateTrackPosition;
  self.resultResponseUpdateTrackPosition = nil;
  return returnMe;
}
- (ResponseUpdateTrackPositionBuilder*) mergeFrom:(ResponseUpdateTrackPosition*) other {
  if (other == [ResponseUpdateTrackPosition defaultInstance]) {
    return self;
  }
  if (other.hasPosition) {
    [self setPosition:other.position];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseUpdateTrackPositionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseUpdateTrackPositionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPosition:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPosition {
  return resultResponseUpdateTrackPosition.hasPosition;
}
- (SInt32) position {
  return resultResponseUpdateTrackPosition.position;
}
- (ResponseUpdateTrackPositionBuilder*) setPosition:(SInt32) value {
  resultResponseUpdateTrackPosition.hasPosition = YES;
  resultResponseUpdateTrackPosition.position = value;
  return self;
}
- (ResponseUpdateTrackPositionBuilder*) clearPosition {
  resultResponseUpdateTrackPosition.hasPosition = NO;
  resultResponseUpdateTrackPosition.position = 0;
  return self;
}
@end

@interface RequestConnect ()
@property SInt32 authCode;
@property BOOL sendPlaylistSongs;
@property BOOL downloader;
@end

@implementation RequestConnect

- (BOOL) hasAuthCode {
  return !!hasAuthCode_;
}
- (void) setHasAuthCode:(BOOL) _value_ {
  hasAuthCode_ = !!_value_;
}
@synthesize authCode;
- (BOOL) hasSendPlaylistSongs {
  return !!hasSendPlaylistSongs_;
}
- (void) setHasSendPlaylistSongs:(BOOL) _value_ {
  hasSendPlaylistSongs_ = !!_value_;
}
- (BOOL) sendPlaylistSongs {
  return !!sendPlaylistSongs_;
}
- (void) setSendPlaylistSongs:(BOOL) _value_ {
  sendPlaylistSongs_ = !!_value_;
}
- (BOOL) hasDownloader {
  return !!hasDownloader_;
}
- (void) setHasDownloader:(BOOL) _value_ {
  hasDownloader_ = !!_value_;
}
- (BOOL) downloader {
  return !!downloader_;
}
- (void) setDownloader:(BOOL) _value_ {
  downloader_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.authCode = 0;
    self.sendPlaylistSongs = NO;
    self.downloader = NO;
  }
  return self;
}
static RequestConnect* defaultRequestConnectInstance = nil;
+ (void) initialize {
  if (self == [RequestConnect class]) {
    defaultRequestConnectInstance = [[RequestConnect alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRequestConnectInstance;
}
- (instancetype) defaultInstance {
  return defaultRequestConnectInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAuthCode) {
    [output writeInt32:1 value:self.authCode];
  }
  if (self.hasSendPlaylistSongs) {
    [output writeBool:2 value:self.sendPlaylistSongs];
  }
  if (self.hasDownloader) {
    [output writeBool:3 value:self.downloader];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAuthCode) {
    size_ += computeInt32Size(1, self.authCode);
  }
  if (self.hasSendPlaylistSongs) {
    size_ += computeBoolSize(2, self.sendPlaylistSongs);
  }
  if (self.hasDownloader) {
    size_ += computeBoolSize(3, self.downloader);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RequestConnect*) parseFromData:(NSData*) data {
  return (RequestConnect*)[[[RequestConnect builder] mergeFromData:data] build];
}
+ (RequestConnect*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestConnect*)[[[RequestConnect builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RequestConnect*) parseFromInputStream:(NSInputStream*) input {
  return (RequestConnect*)[[[RequestConnect builder] mergeFromInputStream:input] build];
}
+ (RequestConnect*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestConnect*)[[[RequestConnect builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestConnect*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RequestConnect*)[[[RequestConnect builder] mergeFromCodedInputStream:input] build];
}
+ (RequestConnect*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestConnect*)[[[RequestConnect builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestConnectBuilder*) builder {
  return [[RequestConnectBuilder alloc] init];
}
+ (RequestConnectBuilder*) builderWithPrototype:(RequestConnect*) prototype {
  return [[RequestConnect builder] mergeFrom:prototype];
}
- (RequestConnectBuilder*) builder {
  return [RequestConnect builder];
}
- (RequestConnectBuilder*) toBuilder {
  return [RequestConnect builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAuthCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"authCode", [NSNumber numberWithInteger:self.authCode]];
  }
  if (self.hasSendPlaylistSongs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sendPlaylistSongs", [NSNumber numberWithBool:self.sendPlaylistSongs]];
  }
  if (self.hasDownloader) {
    [output appendFormat:@"%@%@: %@\n", indent, @"downloader", [NSNumber numberWithBool:self.downloader]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasAuthCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.authCode] forKey: @"authCode"];
  }
  if (self.hasSendPlaylistSongs) {
    [dictionary setObject: [NSNumber numberWithBool:self.sendPlaylistSongs] forKey: @"sendPlaylistSongs"];
  }
  if (self.hasDownloader) {
    [dictionary setObject: [NSNumber numberWithBool:self.downloader] forKey: @"downloader"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RequestConnect class]]) {
    return NO;
  }
  RequestConnect *otherMessage = other;
  return
      self.hasAuthCode == otherMessage.hasAuthCode &&
      (!self.hasAuthCode || self.authCode == otherMessage.authCode) &&
      self.hasSendPlaylistSongs == otherMessage.hasSendPlaylistSongs &&
      (!self.hasSendPlaylistSongs || self.sendPlaylistSongs == otherMessage.sendPlaylistSongs) &&
      self.hasDownloader == otherMessage.hasDownloader &&
      (!self.hasDownloader || self.downloader == otherMessage.downloader) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAuthCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.authCode] hash];
  }
  if (self.hasSendPlaylistSongs) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.sendPlaylistSongs] hash];
  }
  if (self.hasDownloader) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.downloader] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RequestConnectBuilder()
@property (strong) RequestConnect* resultRequestConnect;
@end

@implementation RequestConnectBuilder
@synthesize resultRequestConnect;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRequestConnect = [[RequestConnect alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRequestConnect;
}
- (RequestConnectBuilder*) clear {
  self.resultRequestConnect = [[RequestConnect alloc] init];
  return self;
}
- (RequestConnectBuilder*) clone {
  return [RequestConnect builderWithPrototype:resultRequestConnect];
}
- (RequestConnect*) defaultInstance {
  return [RequestConnect defaultInstance];
}
- (RequestConnect*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RequestConnect*) buildPartial {
  RequestConnect* returnMe = resultRequestConnect;
  self.resultRequestConnect = nil;
  return returnMe;
}
- (RequestConnectBuilder*) mergeFrom:(RequestConnect*) other {
  if (other == [RequestConnect defaultInstance]) {
    return self;
  }
  if (other.hasAuthCode) {
    [self setAuthCode:other.authCode];
  }
  if (other.hasSendPlaylistSongs) {
    [self setSendPlaylistSongs:other.sendPlaylistSongs];
  }
  if (other.hasDownloader) {
    [self setDownloader:other.downloader];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RequestConnectBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RequestConnectBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAuthCode:[input readInt32]];
        break;
      }
      case 16: {
        [self setSendPlaylistSongs:[input readBool]];
        break;
      }
      case 24: {
        [self setDownloader:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasAuthCode {
  return resultRequestConnect.hasAuthCode;
}
- (SInt32) authCode {
  return resultRequestConnect.authCode;
}
- (RequestConnectBuilder*) setAuthCode:(SInt32) value {
  resultRequestConnect.hasAuthCode = YES;
  resultRequestConnect.authCode = value;
  return self;
}
- (RequestConnectBuilder*) clearAuthCode {
  resultRequestConnect.hasAuthCode = NO;
  resultRequestConnect.authCode = 0;
  return self;
}
- (BOOL) hasSendPlaylistSongs {
  return resultRequestConnect.hasSendPlaylistSongs;
}
- (BOOL) sendPlaylistSongs {
  return resultRequestConnect.sendPlaylistSongs;
}
- (RequestConnectBuilder*) setSendPlaylistSongs:(BOOL) value {
  resultRequestConnect.hasSendPlaylistSongs = YES;
  resultRequestConnect.sendPlaylistSongs = value;
  return self;
}
- (RequestConnectBuilder*) clearSendPlaylistSongs {
  resultRequestConnect.hasSendPlaylistSongs = NO;
  resultRequestConnect.sendPlaylistSongs = NO;
  return self;
}
- (BOOL) hasDownloader {
  return resultRequestConnect.hasDownloader;
}
- (BOOL) downloader {
  return resultRequestConnect.downloader;
}
- (RequestConnectBuilder*) setDownloader:(BOOL) value {
  resultRequestConnect.hasDownloader = YES;
  resultRequestConnect.downloader = value;
  return self;
}
- (RequestConnectBuilder*) clearDownloader {
  resultRequestConnect.hasDownloader = NO;
  resultRequestConnect.downloader = NO;
  return self;
}
@end

@interface ResponseDisconnect ()
@property ReasonDisconnect reasonDisconnect;
@end

@implementation ResponseDisconnect

- (BOOL) hasReasonDisconnect {
  return !!hasReasonDisconnect_;
}
- (void) setHasReasonDisconnect:(BOOL) _value_ {
  hasReasonDisconnect_ = !!_value_;
}
@synthesize reasonDisconnect;
- (instancetype) init {
  if ((self = [super init])) {
    self.reasonDisconnect = ReasonDisconnectServerShutdown;
  }
  return self;
}
static ResponseDisconnect* defaultResponseDisconnectInstance = nil;
+ (void) initialize {
  if (self == [ResponseDisconnect class]) {
    defaultResponseDisconnectInstance = [[ResponseDisconnect alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseDisconnectInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseDisconnectInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasReasonDisconnect) {
    [output writeEnum:1 value:self.reasonDisconnect];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasReasonDisconnect) {
    size_ += computeEnumSize(1, self.reasonDisconnect);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseDisconnect*) parseFromData:(NSData*) data {
  return (ResponseDisconnect*)[[[ResponseDisconnect builder] mergeFromData:data] build];
}
+ (ResponseDisconnect*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseDisconnect*)[[[ResponseDisconnect builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseDisconnect*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseDisconnect*)[[[ResponseDisconnect builder] mergeFromInputStream:input] build];
}
+ (ResponseDisconnect*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseDisconnect*)[[[ResponseDisconnect builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseDisconnect*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseDisconnect*)[[[ResponseDisconnect builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseDisconnect*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseDisconnect*)[[[ResponseDisconnect builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseDisconnectBuilder*) builder {
  return [[ResponseDisconnectBuilder alloc] init];
}
+ (ResponseDisconnectBuilder*) builderWithPrototype:(ResponseDisconnect*) prototype {
  return [[ResponseDisconnect builder] mergeFrom:prototype];
}
- (ResponseDisconnectBuilder*) builder {
  return [ResponseDisconnect builder];
}
- (ResponseDisconnectBuilder*) toBuilder {
  return [ResponseDisconnect builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasReasonDisconnect) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reasonDisconnect", NSStringFromReasonDisconnect(self.reasonDisconnect)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasReasonDisconnect) {
    [dictionary setObject: @(self.reasonDisconnect) forKey: @"reasonDisconnect"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseDisconnect class]]) {
    return NO;
  }
  ResponseDisconnect *otherMessage = other;
  return
      self.hasReasonDisconnect == otherMessage.hasReasonDisconnect &&
      (!self.hasReasonDisconnect || self.reasonDisconnect == otherMessage.reasonDisconnect) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasReasonDisconnect) {
    hashCode = hashCode * 31 + self.reasonDisconnect;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseDisconnectBuilder()
@property (strong) ResponseDisconnect* resultResponseDisconnect;
@end

@implementation ResponseDisconnectBuilder
@synthesize resultResponseDisconnect;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponseDisconnect = [[ResponseDisconnect alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponseDisconnect;
}
- (ResponseDisconnectBuilder*) clear {
  self.resultResponseDisconnect = [[ResponseDisconnect alloc] init];
  return self;
}
- (ResponseDisconnectBuilder*) clone {
  return [ResponseDisconnect builderWithPrototype:resultResponseDisconnect];
}
- (ResponseDisconnect*) defaultInstance {
  return [ResponseDisconnect defaultInstance];
}
- (ResponseDisconnect*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseDisconnect*) buildPartial {
  ResponseDisconnect* returnMe = resultResponseDisconnect;
  self.resultResponseDisconnect = nil;
  return returnMe;
}
- (ResponseDisconnectBuilder*) mergeFrom:(ResponseDisconnect*) other {
  if (other == [ResponseDisconnect defaultInstance]) {
    return self;
  }
  if (other.hasReasonDisconnect) {
    [self setReasonDisconnect:other.reasonDisconnect];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseDisconnectBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseDisconnectBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        ReasonDisconnect value = (ReasonDisconnect)[input readEnum];
        if (ReasonDisconnectIsValidValue(value)) {
          [self setReasonDisconnect:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasReasonDisconnect {
  return resultResponseDisconnect.hasReasonDisconnect;
}
- (ReasonDisconnect) reasonDisconnect {
  return resultResponseDisconnect.reasonDisconnect;
}
- (ResponseDisconnectBuilder*) setReasonDisconnect:(ReasonDisconnect) value {
  resultResponseDisconnect.hasReasonDisconnect = YES;
  resultResponseDisconnect.reasonDisconnect = value;
  return self;
}
- (ResponseDisconnectBuilder*) clearReasonDisconnect {
  resultResponseDisconnect.hasReasonDisconnect = NO;
  resultResponseDisconnect.reasonDisconnect = ReasonDisconnectServerShutdown;
  return self;
}
@end

@interface ResponseActiveChanged ()
@property SInt32 id;
@end

@implementation ResponseActiveChanged

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
  }
  return self;
}
static ResponseActiveChanged* defaultResponseActiveChangedInstance = nil;
+ (void) initialize {
  if (self == [ResponseActiveChanged class]) {
    defaultResponseActiveChangedInstance = [[ResponseActiveChanged alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseActiveChangedInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseActiveChangedInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseActiveChanged*) parseFromData:(NSData*) data {
  return (ResponseActiveChanged*)[[[ResponseActiveChanged builder] mergeFromData:data] build];
}
+ (ResponseActiveChanged*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseActiveChanged*)[[[ResponseActiveChanged builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseActiveChanged*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseActiveChanged*)[[[ResponseActiveChanged builder] mergeFromInputStream:input] build];
}
+ (ResponseActiveChanged*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseActiveChanged*)[[[ResponseActiveChanged builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseActiveChanged*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseActiveChanged*)[[[ResponseActiveChanged builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseActiveChanged*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseActiveChanged*)[[[ResponseActiveChanged builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseActiveChangedBuilder*) builder {
  return [[ResponseActiveChangedBuilder alloc] init];
}
+ (ResponseActiveChangedBuilder*) builderWithPrototype:(ResponseActiveChanged*) prototype {
  return [[ResponseActiveChanged builder] mergeFrom:prototype];
}
- (ResponseActiveChangedBuilder*) builder {
  return [ResponseActiveChanged builder];
}
- (ResponseActiveChangedBuilder*) toBuilder {
  return [ResponseActiveChanged builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseActiveChanged class]]) {
    return NO;
  }
  ResponseActiveChanged *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseActiveChangedBuilder()
@property (strong) ResponseActiveChanged* resultResponseActiveChanged;
@end

@implementation ResponseActiveChangedBuilder
@synthesize resultResponseActiveChanged;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponseActiveChanged = [[ResponseActiveChanged alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponseActiveChanged;
}
- (ResponseActiveChangedBuilder*) clear {
  self.resultResponseActiveChanged = [[ResponseActiveChanged alloc] init];
  return self;
}
- (ResponseActiveChangedBuilder*) clone {
  return [ResponseActiveChanged builderWithPrototype:resultResponseActiveChanged];
}
- (ResponseActiveChanged*) defaultInstance {
  return [ResponseActiveChanged defaultInstance];
}
- (ResponseActiveChanged*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseActiveChanged*) buildPartial {
  ResponseActiveChanged* returnMe = resultResponseActiveChanged;
  self.resultResponseActiveChanged = nil;
  return returnMe;
}
- (ResponseActiveChangedBuilder*) mergeFrom:(ResponseActiveChanged*) other {
  if (other == [ResponseActiveChanged defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseActiveChangedBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseActiveChangedBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultResponseActiveChanged.hasId;
}
- (SInt32) id {
  return resultResponseActiveChanged.id;
}
- (ResponseActiveChangedBuilder*) setId:(SInt32) value {
  resultResponseActiveChanged.hasId = YES;
  resultResponseActiveChanged.id = value;
  return self;
}
- (ResponseActiveChangedBuilder*) clearId {
  resultResponseActiveChanged.hasId = NO;
  resultResponseActiveChanged.id = 0;
  return self;
}
@end

@interface RequestSetTrackPosition ()
@property SInt32 position;
@end

@implementation RequestSetTrackPosition

- (BOOL) hasPosition {
  return !!hasPosition_;
}
- (void) setHasPosition:(BOOL) _value_ {
  hasPosition_ = !!_value_;
}
@synthesize position;
- (instancetype) init {
  if ((self = [super init])) {
    self.position = 0;
  }
  return self;
}
static RequestSetTrackPosition* defaultRequestSetTrackPositionInstance = nil;
+ (void) initialize {
  if (self == [RequestSetTrackPosition class]) {
    defaultRequestSetTrackPositionInstance = [[RequestSetTrackPosition alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRequestSetTrackPositionInstance;
}
- (instancetype) defaultInstance {
  return defaultRequestSetTrackPositionInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPosition) {
    [output writeInt32:1 value:self.position];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPosition) {
    size_ += computeInt32Size(1, self.position);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RequestSetTrackPosition*) parseFromData:(NSData*) data {
  return (RequestSetTrackPosition*)[[[RequestSetTrackPosition builder] mergeFromData:data] build];
}
+ (RequestSetTrackPosition*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestSetTrackPosition*)[[[RequestSetTrackPosition builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RequestSetTrackPosition*) parseFromInputStream:(NSInputStream*) input {
  return (RequestSetTrackPosition*)[[[RequestSetTrackPosition builder] mergeFromInputStream:input] build];
}
+ (RequestSetTrackPosition*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestSetTrackPosition*)[[[RequestSetTrackPosition builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestSetTrackPosition*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RequestSetTrackPosition*)[[[RequestSetTrackPosition builder] mergeFromCodedInputStream:input] build];
}
+ (RequestSetTrackPosition*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestSetTrackPosition*)[[[RequestSetTrackPosition builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestSetTrackPositionBuilder*) builder {
  return [[RequestSetTrackPositionBuilder alloc] init];
}
+ (RequestSetTrackPositionBuilder*) builderWithPrototype:(RequestSetTrackPosition*) prototype {
  return [[RequestSetTrackPosition builder] mergeFrom:prototype];
}
- (RequestSetTrackPositionBuilder*) builder {
  return [RequestSetTrackPosition builder];
}
- (RequestSetTrackPositionBuilder*) toBuilder {
  return [RequestSetTrackPosition builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPosition) {
    [output appendFormat:@"%@%@: %@\n", indent, @"position", [NSNumber numberWithInteger:self.position]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPosition) {
    [dictionary setObject: [NSNumber numberWithInteger:self.position] forKey: @"position"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RequestSetTrackPosition class]]) {
    return NO;
  }
  RequestSetTrackPosition *otherMessage = other;
  return
      self.hasPosition == otherMessage.hasPosition &&
      (!self.hasPosition || self.position == otherMessage.position) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPosition) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.position] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RequestSetTrackPositionBuilder()
@property (strong) RequestSetTrackPosition* resultRequestSetTrackPosition;
@end

@implementation RequestSetTrackPositionBuilder
@synthesize resultRequestSetTrackPosition;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRequestSetTrackPosition = [[RequestSetTrackPosition alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRequestSetTrackPosition;
}
- (RequestSetTrackPositionBuilder*) clear {
  self.resultRequestSetTrackPosition = [[RequestSetTrackPosition alloc] init];
  return self;
}
- (RequestSetTrackPositionBuilder*) clone {
  return [RequestSetTrackPosition builderWithPrototype:resultRequestSetTrackPosition];
}
- (RequestSetTrackPosition*) defaultInstance {
  return [RequestSetTrackPosition defaultInstance];
}
- (RequestSetTrackPosition*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RequestSetTrackPosition*) buildPartial {
  RequestSetTrackPosition* returnMe = resultRequestSetTrackPosition;
  self.resultRequestSetTrackPosition = nil;
  return returnMe;
}
- (RequestSetTrackPositionBuilder*) mergeFrom:(RequestSetTrackPosition*) other {
  if (other == [RequestSetTrackPosition defaultInstance]) {
    return self;
  }
  if (other.hasPosition) {
    [self setPosition:other.position];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RequestSetTrackPositionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RequestSetTrackPositionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPosition:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPosition {
  return resultRequestSetTrackPosition.hasPosition;
}
- (SInt32) position {
  return resultRequestSetTrackPosition.position;
}
- (RequestSetTrackPositionBuilder*) setPosition:(SInt32) value {
  resultRequestSetTrackPosition.hasPosition = YES;
  resultRequestSetTrackPosition.position = value;
  return self;
}
- (RequestSetTrackPositionBuilder*) clearPosition {
  resultRequestSetTrackPosition.hasPosition = NO;
  resultRequestSetTrackPosition.position = 0;
  return self;
}
@end

@interface RequestInsertUrls ()
@property SInt32 playlistId;
@property (strong) NSMutableArray * urlsArray;
@property SInt32 position;
@property BOOL playNow;
@property BOOL enqueue;
@property (strong) NSMutableArray * songsArray;
@end

@implementation RequestInsertUrls

- (BOOL) hasPlaylistId {
  return !!hasPlaylistId_;
}
- (void) setHasPlaylistId:(BOOL) _value_ {
  hasPlaylistId_ = !!_value_;
}
@synthesize playlistId;
@synthesize urlsArray;
@dynamic urls;
- (BOOL) hasPosition {
  return !!hasPosition_;
}
- (void) setHasPosition:(BOOL) _value_ {
  hasPosition_ = !!_value_;
}
@synthesize position;
- (BOOL) hasPlayNow {
  return !!hasPlayNow_;
}
- (void) setHasPlayNow:(BOOL) _value_ {
  hasPlayNow_ = !!_value_;
}
- (BOOL) playNow {
  return !!playNow_;
}
- (void) setPlayNow:(BOOL) _value_ {
  playNow_ = !!_value_;
}
- (BOOL) hasEnqueue {
  return !!hasEnqueue_;
}
- (void) setHasEnqueue:(BOOL) _value_ {
  hasEnqueue_ = !!_value_;
}
- (BOOL) enqueue {
  return !!enqueue_;
}
- (void) setEnqueue:(BOOL) _value_ {
  enqueue_ = !!_value_;
}
@synthesize songsArray;
@dynamic songs;
- (instancetype) init {
  if ((self = [super init])) {
    self.playlistId = 0;
    self.position = -1;
    self.playNow = NO;
    self.enqueue = NO;
  }
  return self;
}
static RequestInsertUrls* defaultRequestInsertUrlsInstance = nil;
+ (void) initialize {
  if (self == [RequestInsertUrls class]) {
    defaultRequestInsertUrlsInstance = [[RequestInsertUrls alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRequestInsertUrlsInstance;
}
- (instancetype) defaultInstance {
  return defaultRequestInsertUrlsInstance;
}
- (NSArray *)urls {
  return urlsArray;
}
- (NSString*)urlsAtIndex:(NSUInteger)index {
  return [urlsArray objectAtIndex:index];
}
- (NSArray *)songs {
  return songsArray;
}
- (SongMetadata*)songsAtIndex:(NSUInteger)index {
  return [songsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPlaylistId) {
    [output writeInt32:1 value:self.playlistId];
  }
  [self.urlsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:2 value:element];
  }];
  if (self.hasPosition) {
    [output writeInt32:3 value:self.position];
  }
  if (self.hasPlayNow) {
    [output writeBool:4 value:self.playNow];
  }
  if (self.hasEnqueue) {
    [output writeBool:5 value:self.enqueue];
  }
  [self.songsArray enumerateObjectsUsingBlock:^(SongMetadata *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:6 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPlaylistId) {
    size_ += computeInt32Size(1, self.playlistId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.urlsArray.count;
    [self.urlsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasPosition) {
    size_ += computeInt32Size(3, self.position);
  }
  if (self.hasPlayNow) {
    size_ += computeBoolSize(4, self.playNow);
  }
  if (self.hasEnqueue) {
    size_ += computeBoolSize(5, self.enqueue);
  }
  [self.songsArray enumerateObjectsUsingBlock:^(SongMetadata *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(6, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RequestInsertUrls*) parseFromData:(NSData*) data {
  return (RequestInsertUrls*)[[[RequestInsertUrls builder] mergeFromData:data] build];
}
+ (RequestInsertUrls*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestInsertUrls*)[[[RequestInsertUrls builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RequestInsertUrls*) parseFromInputStream:(NSInputStream*) input {
  return (RequestInsertUrls*)[[[RequestInsertUrls builder] mergeFromInputStream:input] build];
}
+ (RequestInsertUrls*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestInsertUrls*)[[[RequestInsertUrls builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestInsertUrls*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RequestInsertUrls*)[[[RequestInsertUrls builder] mergeFromCodedInputStream:input] build];
}
+ (RequestInsertUrls*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestInsertUrls*)[[[RequestInsertUrls builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestInsertUrlsBuilder*) builder {
  return [[RequestInsertUrlsBuilder alloc] init];
}
+ (RequestInsertUrlsBuilder*) builderWithPrototype:(RequestInsertUrls*) prototype {
  return [[RequestInsertUrls builder] mergeFrom:prototype];
}
- (RequestInsertUrlsBuilder*) builder {
  return [RequestInsertUrls builder];
}
- (RequestInsertUrlsBuilder*) toBuilder {
  return [RequestInsertUrls builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPlaylistId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playlistId", [NSNumber numberWithInteger:self.playlistId]];
  }
  [self.urlsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"urls", obj];
  }];
  if (self.hasPosition) {
    [output appendFormat:@"%@%@: %@\n", indent, @"position", [NSNumber numberWithInteger:self.position]];
  }
  if (self.hasPlayNow) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playNow", [NSNumber numberWithBool:self.playNow]];
  }
  if (self.hasEnqueue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enqueue", [NSNumber numberWithBool:self.enqueue]];
  }
  [self.songsArray enumerateObjectsUsingBlock:^(SongMetadata *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"songs"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPlaylistId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.playlistId] forKey: @"playlistId"];
  }
  [dictionary setObject:self.urls forKey: @"urls"];
  if (self.hasPosition) {
    [dictionary setObject: [NSNumber numberWithInteger:self.position] forKey: @"position"];
  }
  if (self.hasPlayNow) {
    [dictionary setObject: [NSNumber numberWithBool:self.playNow] forKey: @"playNow"];
  }
  if (self.hasEnqueue) {
    [dictionary setObject: [NSNumber numberWithBool:self.enqueue] forKey: @"enqueue"];
  }
  for (SongMetadata* element in self.songsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"songs"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RequestInsertUrls class]]) {
    return NO;
  }
  RequestInsertUrls *otherMessage = other;
  return
      self.hasPlaylistId == otherMessage.hasPlaylistId &&
      (!self.hasPlaylistId || self.playlistId == otherMessage.playlistId) &&
      [self.urlsArray isEqualToArray:otherMessage.urlsArray] &&
      self.hasPosition == otherMessage.hasPosition &&
      (!self.hasPosition || self.position == otherMessage.position) &&
      self.hasPlayNow == otherMessage.hasPlayNow &&
      (!self.hasPlayNow || self.playNow == otherMessage.playNow) &&
      self.hasEnqueue == otherMessage.hasEnqueue &&
      (!self.hasEnqueue || self.enqueue == otherMessage.enqueue) &&
      [self.songsArray isEqualToArray:otherMessage.songsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPlaylistId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.playlistId] hash];
  }
  [self.urlsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasPosition) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.position] hash];
  }
  if (self.hasPlayNow) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.playNow] hash];
  }
  if (self.hasEnqueue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.enqueue] hash];
  }
  [self.songsArray enumerateObjectsUsingBlock:^(SongMetadata *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RequestInsertUrlsBuilder()
@property (strong) RequestInsertUrls* resultRequestInsertUrls;
@end

@implementation RequestInsertUrlsBuilder
@synthesize resultRequestInsertUrls;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRequestInsertUrls = [[RequestInsertUrls alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRequestInsertUrls;
}
- (RequestInsertUrlsBuilder*) clear {
  self.resultRequestInsertUrls = [[RequestInsertUrls alloc] init];
  return self;
}
- (RequestInsertUrlsBuilder*) clone {
  return [RequestInsertUrls builderWithPrototype:resultRequestInsertUrls];
}
- (RequestInsertUrls*) defaultInstance {
  return [RequestInsertUrls defaultInstance];
}
- (RequestInsertUrls*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RequestInsertUrls*) buildPartial {
  RequestInsertUrls* returnMe = resultRequestInsertUrls;
  self.resultRequestInsertUrls = nil;
  return returnMe;
}
- (RequestInsertUrlsBuilder*) mergeFrom:(RequestInsertUrls*) other {
  if (other == [RequestInsertUrls defaultInstance]) {
    return self;
  }
  if (other.hasPlaylistId) {
    [self setPlaylistId:other.playlistId];
  }
  if (other.urlsArray.count > 0) {
    if (resultRequestInsertUrls.urlsArray == nil) {
      resultRequestInsertUrls.urlsArray = [[NSMutableArray alloc] initWithArray:other.urlsArray];
    } else {
      [resultRequestInsertUrls.urlsArray addObjectsFromArray:other.urlsArray];
    }
  }
  if (other.hasPosition) {
    [self setPosition:other.position];
  }
  if (other.hasPlayNow) {
    [self setPlayNow:other.playNow];
  }
  if (other.hasEnqueue) {
    [self setEnqueue:other.enqueue];
  }
  if (other.songsArray.count > 0) {
    if (resultRequestInsertUrls.songsArray == nil) {
      resultRequestInsertUrls.songsArray = [[NSMutableArray alloc] initWithArray:other.songsArray];
    } else {
      [resultRequestInsertUrls.songsArray addObjectsFromArray:other.songsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RequestInsertUrlsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RequestInsertUrlsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPlaylistId:[input readInt32]];
        break;
      }
      case 18: {
        [self addUrls:[input readString]];
        break;
      }
      case 24: {
        [self setPosition:[input readInt32]];
        break;
      }
      case 32: {
        [self setPlayNow:[input readBool]];
        break;
      }
      case 40: {
        [self setEnqueue:[input readBool]];
        break;
      }
      case 50: {
        SongMetadataBuilder* subBuilder = [SongMetadata builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSongs:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPlaylistId {
  return resultRequestInsertUrls.hasPlaylistId;
}
- (SInt32) playlistId {
  return resultRequestInsertUrls.playlistId;
}
- (RequestInsertUrlsBuilder*) setPlaylistId:(SInt32) value {
  resultRequestInsertUrls.hasPlaylistId = YES;
  resultRequestInsertUrls.playlistId = value;
  return self;
}
- (RequestInsertUrlsBuilder*) clearPlaylistId {
  resultRequestInsertUrls.hasPlaylistId = NO;
  resultRequestInsertUrls.playlistId = 0;
  return self;
}
- (NSMutableArray *)urls {
  return resultRequestInsertUrls.urlsArray;
}
- (NSString*)urlsAtIndex:(NSUInteger)index {
  return [resultRequestInsertUrls urlsAtIndex:index];
}
- (RequestInsertUrlsBuilder *)addUrls:(NSString*)value {
  if (resultRequestInsertUrls.urlsArray == nil) {
    resultRequestInsertUrls.urlsArray = [[NSMutableArray alloc]init];
  }
  [resultRequestInsertUrls.urlsArray addObject:value];
  return self;
}
- (RequestInsertUrlsBuilder *)setUrlsArray:(NSArray *)array {
  resultRequestInsertUrls.urlsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (RequestInsertUrlsBuilder *)clearUrls {
  resultRequestInsertUrls.urlsArray = nil;
  return self;
}
- (BOOL) hasPosition {
  return resultRequestInsertUrls.hasPosition;
}
- (SInt32) position {
  return resultRequestInsertUrls.position;
}
- (RequestInsertUrlsBuilder*) setPosition:(SInt32) value {
  resultRequestInsertUrls.hasPosition = YES;
  resultRequestInsertUrls.position = value;
  return self;
}
- (RequestInsertUrlsBuilder*) clearPosition {
  resultRequestInsertUrls.hasPosition = NO;
  resultRequestInsertUrls.position = -1;
  return self;
}
- (BOOL) hasPlayNow {
  return resultRequestInsertUrls.hasPlayNow;
}
- (BOOL) playNow {
  return resultRequestInsertUrls.playNow;
}
- (RequestInsertUrlsBuilder*) setPlayNow:(BOOL) value {
  resultRequestInsertUrls.hasPlayNow = YES;
  resultRequestInsertUrls.playNow = value;
  return self;
}
- (RequestInsertUrlsBuilder*) clearPlayNow {
  resultRequestInsertUrls.hasPlayNow = NO;
  resultRequestInsertUrls.playNow = NO;
  return self;
}
- (BOOL) hasEnqueue {
  return resultRequestInsertUrls.hasEnqueue;
}
- (BOOL) enqueue {
  return resultRequestInsertUrls.enqueue;
}
- (RequestInsertUrlsBuilder*) setEnqueue:(BOOL) value {
  resultRequestInsertUrls.hasEnqueue = YES;
  resultRequestInsertUrls.enqueue = value;
  return self;
}
- (RequestInsertUrlsBuilder*) clearEnqueue {
  resultRequestInsertUrls.hasEnqueue = NO;
  resultRequestInsertUrls.enqueue = NO;
  return self;
}
- (NSMutableArray *)songs {
  return resultRequestInsertUrls.songsArray;
}
- (SongMetadata*)songsAtIndex:(NSUInteger)index {
  return [resultRequestInsertUrls songsAtIndex:index];
}
- (RequestInsertUrlsBuilder *)addSongs:(SongMetadata*)value {
  if (resultRequestInsertUrls.songsArray == nil) {
    resultRequestInsertUrls.songsArray = [[NSMutableArray alloc]init];
  }
  [resultRequestInsertUrls.songsArray addObject:value];
  return self;
}
- (RequestInsertUrlsBuilder *)setSongsArray:(NSArray *)array {
  resultRequestInsertUrls.songsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (RequestInsertUrlsBuilder *)clearSongs {
  resultRequestInsertUrls.songsArray = nil;
  return self;
}
@end

@interface RequestRemoveSongs ()
@property SInt32 playlistId;
@property (strong) PBAppendableArray * songsArray;
@end

@implementation RequestRemoveSongs

- (BOOL) hasPlaylistId {
  return !!hasPlaylistId_;
}
- (void) setHasPlaylistId:(BOOL) _value_ {
  hasPlaylistId_ = !!_value_;
}
@synthesize playlistId;
@synthesize songsArray;
@dynamic songs;
- (instancetype) init {
  if ((self = [super init])) {
    self.playlistId = 0;
  }
  return self;
}
static RequestRemoveSongs* defaultRequestRemoveSongsInstance = nil;
+ (void) initialize {
  if (self == [RequestRemoveSongs class]) {
    defaultRequestRemoveSongsInstance = [[RequestRemoveSongs alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRequestRemoveSongsInstance;
}
- (instancetype) defaultInstance {
  return defaultRequestRemoveSongsInstance;
}
- (PBArray *)songs {
  return songsArray;
}
- (SInt32)songsAtIndex:(NSUInteger)index {
  return [songsArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPlaylistId) {
    [output writeInt32:1 value:self.playlistId];
  }
  const NSUInteger songsArrayCount = self.songsArray.count;
  if (songsArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.songsArray.data;
    for (NSUInteger i = 0; i < songsArrayCount; ++i) {
      [output writeInt32:2 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPlaylistId) {
    size_ += computeInt32Size(1, self.playlistId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.songsArray.count;
    const SInt32 *values = (const SInt32 *)self.songsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RequestRemoveSongs*) parseFromData:(NSData*) data {
  return (RequestRemoveSongs*)[[[RequestRemoveSongs builder] mergeFromData:data] build];
}
+ (RequestRemoveSongs*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestRemoveSongs*)[[[RequestRemoveSongs builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RequestRemoveSongs*) parseFromInputStream:(NSInputStream*) input {
  return (RequestRemoveSongs*)[[[RequestRemoveSongs builder] mergeFromInputStream:input] build];
}
+ (RequestRemoveSongs*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestRemoveSongs*)[[[RequestRemoveSongs builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestRemoveSongs*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RequestRemoveSongs*)[[[RequestRemoveSongs builder] mergeFromCodedInputStream:input] build];
}
+ (RequestRemoveSongs*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestRemoveSongs*)[[[RequestRemoveSongs builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestRemoveSongsBuilder*) builder {
  return [[RequestRemoveSongsBuilder alloc] init];
}
+ (RequestRemoveSongsBuilder*) builderWithPrototype:(RequestRemoveSongs*) prototype {
  return [[RequestRemoveSongs builder] mergeFrom:prototype];
}
- (RequestRemoveSongsBuilder*) builder {
  return [RequestRemoveSongs builder];
}
- (RequestRemoveSongsBuilder*) toBuilder {
  return [RequestRemoveSongs builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPlaylistId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playlistId", [NSNumber numberWithInteger:self.playlistId]];
  }
  [self.songsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"songs", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPlaylistId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.playlistId] forKey: @"playlistId"];
  }
  NSMutableArray * songsArrayArray = [NSMutableArray new];
  NSUInteger songsArrayCount=self.songsArray.count;
  for(int i=0;i<songsArrayCount;i++){
    [songsArrayArray addObject: @([self.songsArray int32AtIndex:i])];
  }
  [dictionary setObject: songsArrayArray forKey: @"songs"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RequestRemoveSongs class]]) {
    return NO;
  }
  RequestRemoveSongs *otherMessage = other;
  return
      self.hasPlaylistId == otherMessage.hasPlaylistId &&
      (!self.hasPlaylistId || self.playlistId == otherMessage.playlistId) &&
      [self.songsArray isEqualToArray:otherMessage.songsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPlaylistId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.playlistId] hash];
  }
  [self.songsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RequestRemoveSongsBuilder()
@property (strong) RequestRemoveSongs* resultRequestRemoveSongs;
@end

@implementation RequestRemoveSongsBuilder
@synthesize resultRequestRemoveSongs;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRequestRemoveSongs = [[RequestRemoveSongs alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRequestRemoveSongs;
}
- (RequestRemoveSongsBuilder*) clear {
  self.resultRequestRemoveSongs = [[RequestRemoveSongs alloc] init];
  return self;
}
- (RequestRemoveSongsBuilder*) clone {
  return [RequestRemoveSongs builderWithPrototype:resultRequestRemoveSongs];
}
- (RequestRemoveSongs*) defaultInstance {
  return [RequestRemoveSongs defaultInstance];
}
- (RequestRemoveSongs*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RequestRemoveSongs*) buildPartial {
  RequestRemoveSongs* returnMe = resultRequestRemoveSongs;
  self.resultRequestRemoveSongs = nil;
  return returnMe;
}
- (RequestRemoveSongsBuilder*) mergeFrom:(RequestRemoveSongs*) other {
  if (other == [RequestRemoveSongs defaultInstance]) {
    return self;
  }
  if (other.hasPlaylistId) {
    [self setPlaylistId:other.playlistId];
  }
  if (other.songsArray.count > 0) {
    if (resultRequestRemoveSongs.songsArray == nil) {
      resultRequestRemoveSongs.songsArray = [other.songsArray copy];
    } else {
      [resultRequestRemoveSongs.songsArray appendArray:other.songsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RequestRemoveSongsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RequestRemoveSongsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPlaylistId:[input readInt32]];
        break;
      }
      case 16: {
        [self addSongs:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPlaylistId {
  return resultRequestRemoveSongs.hasPlaylistId;
}
- (SInt32) playlistId {
  return resultRequestRemoveSongs.playlistId;
}
- (RequestRemoveSongsBuilder*) setPlaylistId:(SInt32) value {
  resultRequestRemoveSongs.hasPlaylistId = YES;
  resultRequestRemoveSongs.playlistId = value;
  return self;
}
- (RequestRemoveSongsBuilder*) clearPlaylistId {
  resultRequestRemoveSongs.hasPlaylistId = NO;
  resultRequestRemoveSongs.playlistId = 0;
  return self;
}
- (PBAppendableArray *)songs {
  return resultRequestRemoveSongs.songsArray;
}
- (SInt32)songsAtIndex:(NSUInteger)index {
  return [resultRequestRemoveSongs songsAtIndex:index];
}
- (RequestRemoveSongsBuilder *)addSongs:(SInt32)value {
  if (resultRequestRemoveSongs.songsArray == nil) {
    resultRequestRemoveSongs.songsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultRequestRemoveSongs.songsArray addInt32:value];
  return self;
}
- (RequestRemoveSongsBuilder *)setSongsArray:(NSArray *)array {
  resultRequestRemoveSongs.songsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (RequestRemoveSongsBuilder *)setSongsValues:(const SInt32 *)values count:(NSUInteger)count {
  resultRequestRemoveSongs.songsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (RequestRemoveSongsBuilder *)clearSongs {
  resultRequestRemoveSongs.songsArray = nil;
  return self;
}
@end

@interface RequestOpenPlaylist ()
@property SInt32 playlistId;
@end

@implementation RequestOpenPlaylist

- (BOOL) hasPlaylistId {
  return !!hasPlaylistId_;
}
- (void) setHasPlaylistId:(BOOL) _value_ {
  hasPlaylistId_ = !!_value_;
}
@synthesize playlistId;
- (instancetype) init {
  if ((self = [super init])) {
    self.playlistId = 0;
  }
  return self;
}
static RequestOpenPlaylist* defaultRequestOpenPlaylistInstance = nil;
+ (void) initialize {
  if (self == [RequestOpenPlaylist class]) {
    defaultRequestOpenPlaylistInstance = [[RequestOpenPlaylist alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRequestOpenPlaylistInstance;
}
- (instancetype) defaultInstance {
  return defaultRequestOpenPlaylistInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPlaylistId) {
    [output writeInt32:1 value:self.playlistId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPlaylistId) {
    size_ += computeInt32Size(1, self.playlistId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RequestOpenPlaylist*) parseFromData:(NSData*) data {
  return (RequestOpenPlaylist*)[[[RequestOpenPlaylist builder] mergeFromData:data] build];
}
+ (RequestOpenPlaylist*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestOpenPlaylist*)[[[RequestOpenPlaylist builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RequestOpenPlaylist*) parseFromInputStream:(NSInputStream*) input {
  return (RequestOpenPlaylist*)[[[RequestOpenPlaylist builder] mergeFromInputStream:input] build];
}
+ (RequestOpenPlaylist*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestOpenPlaylist*)[[[RequestOpenPlaylist builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestOpenPlaylist*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RequestOpenPlaylist*)[[[RequestOpenPlaylist builder] mergeFromCodedInputStream:input] build];
}
+ (RequestOpenPlaylist*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestOpenPlaylist*)[[[RequestOpenPlaylist builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestOpenPlaylistBuilder*) builder {
  return [[RequestOpenPlaylistBuilder alloc] init];
}
+ (RequestOpenPlaylistBuilder*) builderWithPrototype:(RequestOpenPlaylist*) prototype {
  return [[RequestOpenPlaylist builder] mergeFrom:prototype];
}
- (RequestOpenPlaylistBuilder*) builder {
  return [RequestOpenPlaylist builder];
}
- (RequestOpenPlaylistBuilder*) toBuilder {
  return [RequestOpenPlaylist builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPlaylistId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playlistId", [NSNumber numberWithInteger:self.playlistId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPlaylistId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.playlistId] forKey: @"playlistId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RequestOpenPlaylist class]]) {
    return NO;
  }
  RequestOpenPlaylist *otherMessage = other;
  return
      self.hasPlaylistId == otherMessage.hasPlaylistId &&
      (!self.hasPlaylistId || self.playlistId == otherMessage.playlistId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPlaylistId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.playlistId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RequestOpenPlaylistBuilder()
@property (strong) RequestOpenPlaylist* resultRequestOpenPlaylist;
@end

@implementation RequestOpenPlaylistBuilder
@synthesize resultRequestOpenPlaylist;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRequestOpenPlaylist = [[RequestOpenPlaylist alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRequestOpenPlaylist;
}
- (RequestOpenPlaylistBuilder*) clear {
  self.resultRequestOpenPlaylist = [[RequestOpenPlaylist alloc] init];
  return self;
}
- (RequestOpenPlaylistBuilder*) clone {
  return [RequestOpenPlaylist builderWithPrototype:resultRequestOpenPlaylist];
}
- (RequestOpenPlaylist*) defaultInstance {
  return [RequestOpenPlaylist defaultInstance];
}
- (RequestOpenPlaylist*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RequestOpenPlaylist*) buildPartial {
  RequestOpenPlaylist* returnMe = resultRequestOpenPlaylist;
  self.resultRequestOpenPlaylist = nil;
  return returnMe;
}
- (RequestOpenPlaylistBuilder*) mergeFrom:(RequestOpenPlaylist*) other {
  if (other == [RequestOpenPlaylist defaultInstance]) {
    return self;
  }
  if (other.hasPlaylistId) {
    [self setPlaylistId:other.playlistId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RequestOpenPlaylistBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RequestOpenPlaylistBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPlaylistId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPlaylistId {
  return resultRequestOpenPlaylist.hasPlaylistId;
}
- (SInt32) playlistId {
  return resultRequestOpenPlaylist.playlistId;
}
- (RequestOpenPlaylistBuilder*) setPlaylistId:(SInt32) value {
  resultRequestOpenPlaylist.hasPlaylistId = YES;
  resultRequestOpenPlaylist.playlistId = value;
  return self;
}
- (RequestOpenPlaylistBuilder*) clearPlaylistId {
  resultRequestOpenPlaylist.hasPlaylistId = NO;
  resultRequestOpenPlaylist.playlistId = 0;
  return self;
}
@end

@interface RequestClosePlaylist ()
@property SInt32 playlistId;
@end

@implementation RequestClosePlaylist

- (BOOL) hasPlaylistId {
  return !!hasPlaylistId_;
}
- (void) setHasPlaylistId:(BOOL) _value_ {
  hasPlaylistId_ = !!_value_;
}
@synthesize playlistId;
- (instancetype) init {
  if ((self = [super init])) {
    self.playlistId = 0;
  }
  return self;
}
static RequestClosePlaylist* defaultRequestClosePlaylistInstance = nil;
+ (void) initialize {
  if (self == [RequestClosePlaylist class]) {
    defaultRequestClosePlaylistInstance = [[RequestClosePlaylist alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRequestClosePlaylistInstance;
}
- (instancetype) defaultInstance {
  return defaultRequestClosePlaylistInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPlaylistId) {
    [output writeInt32:1 value:self.playlistId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPlaylistId) {
    size_ += computeInt32Size(1, self.playlistId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RequestClosePlaylist*) parseFromData:(NSData*) data {
  return (RequestClosePlaylist*)[[[RequestClosePlaylist builder] mergeFromData:data] build];
}
+ (RequestClosePlaylist*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestClosePlaylist*)[[[RequestClosePlaylist builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RequestClosePlaylist*) parseFromInputStream:(NSInputStream*) input {
  return (RequestClosePlaylist*)[[[RequestClosePlaylist builder] mergeFromInputStream:input] build];
}
+ (RequestClosePlaylist*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestClosePlaylist*)[[[RequestClosePlaylist builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestClosePlaylist*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RequestClosePlaylist*)[[[RequestClosePlaylist builder] mergeFromCodedInputStream:input] build];
}
+ (RequestClosePlaylist*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestClosePlaylist*)[[[RequestClosePlaylist builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestClosePlaylistBuilder*) builder {
  return [[RequestClosePlaylistBuilder alloc] init];
}
+ (RequestClosePlaylistBuilder*) builderWithPrototype:(RequestClosePlaylist*) prototype {
  return [[RequestClosePlaylist builder] mergeFrom:prototype];
}
- (RequestClosePlaylistBuilder*) builder {
  return [RequestClosePlaylist builder];
}
- (RequestClosePlaylistBuilder*) toBuilder {
  return [RequestClosePlaylist builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPlaylistId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playlistId", [NSNumber numberWithInteger:self.playlistId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPlaylistId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.playlistId] forKey: @"playlistId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RequestClosePlaylist class]]) {
    return NO;
  }
  RequestClosePlaylist *otherMessage = other;
  return
      self.hasPlaylistId == otherMessage.hasPlaylistId &&
      (!self.hasPlaylistId || self.playlistId == otherMessage.playlistId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPlaylistId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.playlistId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RequestClosePlaylistBuilder()
@property (strong) RequestClosePlaylist* resultRequestClosePlaylist;
@end

@implementation RequestClosePlaylistBuilder
@synthesize resultRequestClosePlaylist;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRequestClosePlaylist = [[RequestClosePlaylist alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRequestClosePlaylist;
}
- (RequestClosePlaylistBuilder*) clear {
  self.resultRequestClosePlaylist = [[RequestClosePlaylist alloc] init];
  return self;
}
- (RequestClosePlaylistBuilder*) clone {
  return [RequestClosePlaylist builderWithPrototype:resultRequestClosePlaylist];
}
- (RequestClosePlaylist*) defaultInstance {
  return [RequestClosePlaylist defaultInstance];
}
- (RequestClosePlaylist*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RequestClosePlaylist*) buildPartial {
  RequestClosePlaylist* returnMe = resultRequestClosePlaylist;
  self.resultRequestClosePlaylist = nil;
  return returnMe;
}
- (RequestClosePlaylistBuilder*) mergeFrom:(RequestClosePlaylist*) other {
  if (other == [RequestClosePlaylist defaultInstance]) {
    return self;
  }
  if (other.hasPlaylistId) {
    [self setPlaylistId:other.playlistId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RequestClosePlaylistBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RequestClosePlaylistBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPlaylistId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPlaylistId {
  return resultRequestClosePlaylist.hasPlaylistId;
}
- (SInt32) playlistId {
  return resultRequestClosePlaylist.playlistId;
}
- (RequestClosePlaylistBuilder*) setPlaylistId:(SInt32) value {
  resultRequestClosePlaylist.hasPlaylistId = YES;
  resultRequestClosePlaylist.playlistId = value;
  return self;
}
- (RequestClosePlaylistBuilder*) clearPlaylistId {
  resultRequestClosePlaylist.hasPlaylistId = NO;
  resultRequestClosePlaylist.playlistId = 0;
  return self;
}
@end

@interface ResponseLyrics ()
@property (strong) NSMutableArray * lyricsArray;
@end

@implementation ResponseLyrics

@synthesize lyricsArray;
@dynamic lyrics;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static ResponseLyrics* defaultResponseLyricsInstance = nil;
+ (void) initialize {
  if (self == [ResponseLyrics class]) {
    defaultResponseLyricsInstance = [[ResponseLyrics alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseLyricsInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseLyricsInstance;
}
- (NSArray *)lyrics {
  return lyricsArray;
}
- (Lyric*)lyricsAtIndex:(NSUInteger)index {
  return [lyricsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.lyricsArray enumerateObjectsUsingBlock:^(Lyric *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.lyricsArray enumerateObjectsUsingBlock:^(Lyric *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseLyrics*) parseFromData:(NSData*) data {
  return (ResponseLyrics*)[[[ResponseLyrics builder] mergeFromData:data] build];
}
+ (ResponseLyrics*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseLyrics*)[[[ResponseLyrics builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseLyrics*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseLyrics*)[[[ResponseLyrics builder] mergeFromInputStream:input] build];
}
+ (ResponseLyrics*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseLyrics*)[[[ResponseLyrics builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseLyrics*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseLyrics*)[[[ResponseLyrics builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseLyrics*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseLyrics*)[[[ResponseLyrics builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseLyricsBuilder*) builder {
  return [[ResponseLyricsBuilder alloc] init];
}
+ (ResponseLyricsBuilder*) builderWithPrototype:(ResponseLyrics*) prototype {
  return [[ResponseLyrics builder] mergeFrom:prototype];
}
- (ResponseLyricsBuilder*) builder {
  return [ResponseLyrics builder];
}
- (ResponseLyricsBuilder*) toBuilder {
  return [ResponseLyrics builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.lyricsArray enumerateObjectsUsingBlock:^(Lyric *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"lyrics"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (Lyric* element in self.lyricsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"lyrics"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseLyrics class]]) {
    return NO;
  }
  ResponseLyrics *otherMessage = other;
  return
      [self.lyricsArray isEqualToArray:otherMessage.lyricsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.lyricsArray enumerateObjectsUsingBlock:^(Lyric *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseLyricsBuilder()
@property (strong) ResponseLyrics* resultResponseLyrics;
@end

@implementation ResponseLyricsBuilder
@synthesize resultResponseLyrics;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponseLyrics = [[ResponseLyrics alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponseLyrics;
}
- (ResponseLyricsBuilder*) clear {
  self.resultResponseLyrics = [[ResponseLyrics alloc] init];
  return self;
}
- (ResponseLyricsBuilder*) clone {
  return [ResponseLyrics builderWithPrototype:resultResponseLyrics];
}
- (ResponseLyrics*) defaultInstance {
  return [ResponseLyrics defaultInstance];
}
- (ResponseLyrics*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseLyrics*) buildPartial {
  ResponseLyrics* returnMe = resultResponseLyrics;
  self.resultResponseLyrics = nil;
  return returnMe;
}
- (ResponseLyricsBuilder*) mergeFrom:(ResponseLyrics*) other {
  if (other == [ResponseLyrics defaultInstance]) {
    return self;
  }
  if (other.lyricsArray.count > 0) {
    if (resultResponseLyrics.lyricsArray == nil) {
      resultResponseLyrics.lyricsArray = [[NSMutableArray alloc] initWithArray:other.lyricsArray];
    } else {
      [resultResponseLyrics.lyricsArray addObjectsFromArray:other.lyricsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseLyricsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseLyricsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        LyricBuilder* subBuilder = [Lyric builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLyrics:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)lyrics {
  return resultResponseLyrics.lyricsArray;
}
- (Lyric*)lyricsAtIndex:(NSUInteger)index {
  return [resultResponseLyrics lyricsAtIndex:index];
}
- (ResponseLyricsBuilder *)addLyrics:(Lyric*)value {
  if (resultResponseLyrics.lyricsArray == nil) {
    resultResponseLyrics.lyricsArray = [[NSMutableArray alloc]init];
  }
  [resultResponseLyrics.lyricsArray addObject:value];
  return self;
}
- (ResponseLyricsBuilder *)setLyricsArray:(NSArray *)array {
  resultResponseLyrics.lyricsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ResponseLyricsBuilder *)clearLyrics {
  resultResponseLyrics.lyricsArray = nil;
  return self;
}
@end

@interface Lyric ()
@property (strong) NSString* id;
@property (strong) NSString* title;
@property (strong) NSString* content;
@end

@implementation Lyric

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = @"";
    self.title = @"";
    self.content = @"";
  }
  return self;
}
static Lyric* defaultLyricInstance = nil;
+ (void) initialize {
  if (self == [Lyric class]) {
    defaultLyricInstance = [[Lyric alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLyricInstance;
}
- (instancetype) defaultInstance {
  return defaultLyricInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasTitle) {
    [output writeString:2 value:self.title];
  }
  if (self.hasContent) {
    [output writeString:3 value:self.content];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeStringSize(1, self.id);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(2, self.title);
  }
  if (self.hasContent) {
    size_ += computeStringSize(3, self.content);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Lyric*) parseFromData:(NSData*) data {
  return (Lyric*)[[[Lyric builder] mergeFromData:data] build];
}
+ (Lyric*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Lyric*)[[[Lyric builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Lyric*) parseFromInputStream:(NSInputStream*) input {
  return (Lyric*)[[[Lyric builder] mergeFromInputStream:input] build];
}
+ (Lyric*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Lyric*)[[[Lyric builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Lyric*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Lyric*)[[[Lyric builder] mergeFromCodedInputStream:input] build];
}
+ (Lyric*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Lyric*)[[[Lyric builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LyricBuilder*) builder {
  return [[LyricBuilder alloc] init];
}
+ (LyricBuilder*) builderWithPrototype:(Lyric*) prototype {
  return [[Lyric builder] mergeFrom:prototype];
}
- (LyricBuilder*) builder {
  return [Lyric builder];
}
- (LyricBuilder*) toBuilder {
  return [Lyric builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: self.id forKey: @"id"];
  }
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  if (self.hasContent) {
    [dictionary setObject: self.content forKey: @"content"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Lyric class]]) {
    return NO;
  }
  Lyric *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || [self.id isEqual:otherMessage.id]) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [self.id hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LyricBuilder()
@property (strong) Lyric* resultLyric;
@end

@implementation LyricBuilder
@synthesize resultLyric;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLyric = [[Lyric alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLyric;
}
- (LyricBuilder*) clear {
  self.resultLyric = [[Lyric alloc] init];
  return self;
}
- (LyricBuilder*) clone {
  return [Lyric builderWithPrototype:resultLyric];
}
- (Lyric*) defaultInstance {
  return [Lyric defaultInstance];
}
- (Lyric*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Lyric*) buildPartial {
  Lyric* returnMe = resultLyric;
  self.resultLyric = nil;
  return returnMe;
}
- (LyricBuilder*) mergeFrom:(Lyric*) other {
  if (other == [Lyric defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LyricBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LyricBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setTitle:[input readString]];
        break;
      }
      case 26: {
        [self setContent:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultLyric.hasId;
}
- (NSString*) id {
  return resultLyric.id;
}
- (LyricBuilder*) setId:(NSString*) value {
  resultLyric.hasId = YES;
  resultLyric.id = value;
  return self;
}
- (LyricBuilder*) clearId {
  resultLyric.hasId = NO;
  resultLyric.id = @"";
  return self;
}
- (BOOL) hasTitle {
  return resultLyric.hasTitle;
}
- (NSString*) title {
  return resultLyric.title;
}
- (LyricBuilder*) setTitle:(NSString*) value {
  resultLyric.hasTitle = YES;
  resultLyric.title = value;
  return self;
}
- (LyricBuilder*) clearTitle {
  resultLyric.hasTitle = NO;
  resultLyric.title = @"";
  return self;
}
- (BOOL) hasContent {
  return resultLyric.hasContent;
}
- (NSString*) content {
  return resultLyric.content;
}
- (LyricBuilder*) setContent:(NSString*) value {
  resultLyric.hasContent = YES;
  resultLyric.content = value;
  return self;
}
- (LyricBuilder*) clearContent {
  resultLyric.hasContent = NO;
  resultLyric.content = @"";
  return self;
}
@end

@interface RequestDownloadSongs ()
@property DownloadItem downloadItem;
@property SInt32 playlistId;
@property (strong) NSMutableArray * urlsArray;
@end

@implementation RequestDownloadSongs

- (BOOL) hasDownloadItem {
  return !!hasDownloadItem_;
}
- (void) setHasDownloadItem:(BOOL) _value_ {
  hasDownloadItem_ = !!_value_;
}
@synthesize downloadItem;
- (BOOL) hasPlaylistId {
  return !!hasPlaylistId_;
}
- (void) setHasPlaylistId:(BOOL) _value_ {
  hasPlaylistId_ = !!_value_;
}
@synthesize playlistId;
@synthesize urlsArray;
@dynamic urls;
- (instancetype) init {
  if ((self = [super init])) {
    self.downloadItem = DownloadItemCurrentItem;
    self.playlistId = 0;
  }
  return self;
}
static RequestDownloadSongs* defaultRequestDownloadSongsInstance = nil;
+ (void) initialize {
  if (self == [RequestDownloadSongs class]) {
    defaultRequestDownloadSongsInstance = [[RequestDownloadSongs alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRequestDownloadSongsInstance;
}
- (instancetype) defaultInstance {
  return defaultRequestDownloadSongsInstance;
}
- (NSArray *)urls {
  return urlsArray;
}
- (NSString*)urlsAtIndex:(NSUInteger)index {
  return [urlsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDownloadItem) {
    [output writeEnum:1 value:self.downloadItem];
  }
  if (self.hasPlaylistId) {
    [output writeInt32:2 value:self.playlistId];
  }
  [self.urlsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDownloadItem) {
    size_ += computeEnumSize(1, self.downloadItem);
  }
  if (self.hasPlaylistId) {
    size_ += computeInt32Size(2, self.playlistId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.urlsArray.count;
    [self.urlsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RequestDownloadSongs*) parseFromData:(NSData*) data {
  return (RequestDownloadSongs*)[[[RequestDownloadSongs builder] mergeFromData:data] build];
}
+ (RequestDownloadSongs*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestDownloadSongs*)[[[RequestDownloadSongs builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RequestDownloadSongs*) parseFromInputStream:(NSInputStream*) input {
  return (RequestDownloadSongs*)[[[RequestDownloadSongs builder] mergeFromInputStream:input] build];
}
+ (RequestDownloadSongs*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestDownloadSongs*)[[[RequestDownloadSongs builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestDownloadSongs*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RequestDownloadSongs*)[[[RequestDownloadSongs builder] mergeFromCodedInputStream:input] build];
}
+ (RequestDownloadSongs*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestDownloadSongs*)[[[RequestDownloadSongs builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestDownloadSongsBuilder*) builder {
  return [[RequestDownloadSongsBuilder alloc] init];
}
+ (RequestDownloadSongsBuilder*) builderWithPrototype:(RequestDownloadSongs*) prototype {
  return [[RequestDownloadSongs builder] mergeFrom:prototype];
}
- (RequestDownloadSongsBuilder*) builder {
  return [RequestDownloadSongs builder];
}
- (RequestDownloadSongsBuilder*) toBuilder {
  return [RequestDownloadSongs builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDownloadItem) {
    [output appendFormat:@"%@%@: %@\n", indent, @"downloadItem", NSStringFromDownloadItem(self.downloadItem)];
  }
  if (self.hasPlaylistId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playlistId", [NSNumber numberWithInteger:self.playlistId]];
  }
  [self.urlsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"urls", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasDownloadItem) {
    [dictionary setObject: @(self.downloadItem) forKey: @"downloadItem"];
  }
  if (self.hasPlaylistId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.playlistId] forKey: @"playlistId"];
  }
  [dictionary setObject:self.urls forKey: @"urls"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RequestDownloadSongs class]]) {
    return NO;
  }
  RequestDownloadSongs *otherMessage = other;
  return
      self.hasDownloadItem == otherMessage.hasDownloadItem &&
      (!self.hasDownloadItem || self.downloadItem == otherMessage.downloadItem) &&
      self.hasPlaylistId == otherMessage.hasPlaylistId &&
      (!self.hasPlaylistId || self.playlistId == otherMessage.playlistId) &&
      [self.urlsArray isEqualToArray:otherMessage.urlsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDownloadItem) {
    hashCode = hashCode * 31 + self.downloadItem;
  }
  if (self.hasPlaylistId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.playlistId] hash];
  }
  [self.urlsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RequestDownloadSongsBuilder()
@property (strong) RequestDownloadSongs* resultRequestDownloadSongs;
@end

@implementation RequestDownloadSongsBuilder
@synthesize resultRequestDownloadSongs;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRequestDownloadSongs = [[RequestDownloadSongs alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRequestDownloadSongs;
}
- (RequestDownloadSongsBuilder*) clear {
  self.resultRequestDownloadSongs = [[RequestDownloadSongs alloc] init];
  return self;
}
- (RequestDownloadSongsBuilder*) clone {
  return [RequestDownloadSongs builderWithPrototype:resultRequestDownloadSongs];
}
- (RequestDownloadSongs*) defaultInstance {
  return [RequestDownloadSongs defaultInstance];
}
- (RequestDownloadSongs*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RequestDownloadSongs*) buildPartial {
  RequestDownloadSongs* returnMe = resultRequestDownloadSongs;
  self.resultRequestDownloadSongs = nil;
  return returnMe;
}
- (RequestDownloadSongsBuilder*) mergeFrom:(RequestDownloadSongs*) other {
  if (other == [RequestDownloadSongs defaultInstance]) {
    return self;
  }
  if (other.hasDownloadItem) {
    [self setDownloadItem:other.downloadItem];
  }
  if (other.hasPlaylistId) {
    [self setPlaylistId:other.playlistId];
  }
  if (other.urlsArray.count > 0) {
    if (resultRequestDownloadSongs.urlsArray == nil) {
      resultRequestDownloadSongs.urlsArray = [[NSMutableArray alloc] initWithArray:other.urlsArray];
    } else {
      [resultRequestDownloadSongs.urlsArray addObjectsFromArray:other.urlsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RequestDownloadSongsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RequestDownloadSongsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        DownloadItem value = (DownloadItem)[input readEnum];
        if (DownloadItemIsValidValue(value)) {
          [self setDownloadItem:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        [self setPlaylistId:[input readInt32]];
        break;
      }
      case 26: {
        [self addUrls:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasDownloadItem {
  return resultRequestDownloadSongs.hasDownloadItem;
}
- (DownloadItem) downloadItem {
  return resultRequestDownloadSongs.downloadItem;
}
- (RequestDownloadSongsBuilder*) setDownloadItem:(DownloadItem) value {
  resultRequestDownloadSongs.hasDownloadItem = YES;
  resultRequestDownloadSongs.downloadItem = value;
  return self;
}
- (RequestDownloadSongsBuilder*) clearDownloadItem {
  resultRequestDownloadSongs.hasDownloadItem = NO;
  resultRequestDownloadSongs.downloadItem = DownloadItemCurrentItem;
  return self;
}
- (BOOL) hasPlaylistId {
  return resultRequestDownloadSongs.hasPlaylistId;
}
- (SInt32) playlistId {
  return resultRequestDownloadSongs.playlistId;
}
- (RequestDownloadSongsBuilder*) setPlaylistId:(SInt32) value {
  resultRequestDownloadSongs.hasPlaylistId = YES;
  resultRequestDownloadSongs.playlistId = value;
  return self;
}
- (RequestDownloadSongsBuilder*) clearPlaylistId {
  resultRequestDownloadSongs.hasPlaylistId = NO;
  resultRequestDownloadSongs.playlistId = 0;
  return self;
}
- (NSMutableArray *)urls {
  return resultRequestDownloadSongs.urlsArray;
}
- (NSString*)urlsAtIndex:(NSUInteger)index {
  return [resultRequestDownloadSongs urlsAtIndex:index];
}
- (RequestDownloadSongsBuilder *)addUrls:(NSString*)value {
  if (resultRequestDownloadSongs.urlsArray == nil) {
    resultRequestDownloadSongs.urlsArray = [[NSMutableArray alloc]init];
  }
  [resultRequestDownloadSongs.urlsArray addObject:value];
  return self;
}
- (RequestDownloadSongsBuilder *)setUrlsArray:(NSArray *)array {
  resultRequestDownloadSongs.urlsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (RequestDownloadSongsBuilder *)clearUrls {
  resultRequestDownloadSongs.urlsArray = nil;
  return self;
}
@end

@interface ResponseSongFileChunk ()
@property SInt32 chunkNumber;
@property SInt32 chunkCount;
@property SInt32 fileNumber;
@property SInt32 fileCount;
@property (strong) SongMetadata* songMetadata;
@property (strong) NSData* data;
@property SInt32 size;
@property (strong) NSData* fileHash;
@end

@implementation ResponseSongFileChunk

- (BOOL) hasChunkNumber {
  return !!hasChunkNumber_;
}
- (void) setHasChunkNumber:(BOOL) _value_ {
  hasChunkNumber_ = !!_value_;
}
@synthesize chunkNumber;
- (BOOL) hasChunkCount {
  return !!hasChunkCount_;
}
- (void) setHasChunkCount:(BOOL) _value_ {
  hasChunkCount_ = !!_value_;
}
@synthesize chunkCount;
- (BOOL) hasFileNumber {
  return !!hasFileNumber_;
}
- (void) setHasFileNumber:(BOOL) _value_ {
  hasFileNumber_ = !!_value_;
}
@synthesize fileNumber;
- (BOOL) hasFileCount {
  return !!hasFileCount_;
}
- (void) setHasFileCount:(BOOL) _value_ {
  hasFileCount_ = !!_value_;
}
@synthesize fileCount;
- (BOOL) hasSongMetadata {
  return !!hasSongMetadata_;
}
- (void) setHasSongMetadata:(BOOL) _value_ {
  hasSongMetadata_ = !!_value_;
}
@synthesize songMetadata;
- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) _value_ {
  hasData_ = !!_value_;
}
@synthesize data;
- (BOOL) hasSize {
  return !!hasSize_;
}
- (void) setHasSize:(BOOL) _value_ {
  hasSize_ = !!_value_;
}
@synthesize size;
- (BOOL) hasFileHash {
  return !!hasFileHash_;
}
- (void) setHasFileHash:(BOOL) _value_ {
  hasFileHash_ = !!_value_;
}
@synthesize fileHash;
- (instancetype) init {
  if ((self = [super init])) {
    self.chunkNumber = 0;
    self.chunkCount = 0;
    self.fileNumber = 0;
    self.fileCount = 0;
    self.songMetadata = [SongMetadata defaultInstance];
    self.data = [NSData data];
    self.size = 0;
    self.fileHash = [NSData data];
  }
  return self;
}
static ResponseSongFileChunk* defaultResponseSongFileChunkInstance = nil;
+ (void) initialize {
  if (self == [ResponseSongFileChunk class]) {
    defaultResponseSongFileChunkInstance = [[ResponseSongFileChunk alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseSongFileChunkInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseSongFileChunkInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChunkNumber) {
    [output writeInt32:1 value:self.chunkNumber];
  }
  if (self.hasChunkCount) {
    [output writeInt32:2 value:self.chunkCount];
  }
  if (self.hasFileNumber) {
    [output writeInt32:3 value:self.fileNumber];
  }
  if (self.hasFileCount) {
    [output writeInt32:4 value:self.fileCount];
  }
  if (self.hasSongMetadata) {
    [output writeMessage:6 value:self.songMetadata];
  }
  if (self.hasData) {
    [output writeData:7 value:self.data];
  }
  if (self.hasSize) {
    [output writeInt32:8 value:self.size];
  }
  if (self.hasFileHash) {
    [output writeData:9 value:self.fileHash];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasChunkNumber) {
    size_ += computeInt32Size(1, self.chunkNumber);
  }
  if (self.hasChunkCount) {
    size_ += computeInt32Size(2, self.chunkCount);
  }
  if (self.hasFileNumber) {
    size_ += computeInt32Size(3, self.fileNumber);
  }
  if (self.hasFileCount) {
    size_ += computeInt32Size(4, self.fileCount);
  }
  if (self.hasSongMetadata) {
    size_ += computeMessageSize(6, self.songMetadata);
  }
  if (self.hasData) {
    size_ += computeDataSize(7, self.data);
  }
  if (self.hasSize) {
    size_ += computeInt32Size(8, self.size);
  }
  if (self.hasFileHash) {
    size_ += computeDataSize(9, self.fileHash);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseSongFileChunk*) parseFromData:(NSData*) data {
  return (ResponseSongFileChunk*)[[[ResponseSongFileChunk builder] mergeFromData:data] build];
}
+ (ResponseSongFileChunk*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseSongFileChunk*)[[[ResponseSongFileChunk builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseSongFileChunk*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseSongFileChunk*)[[[ResponseSongFileChunk builder] mergeFromInputStream:input] build];
}
+ (ResponseSongFileChunk*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseSongFileChunk*)[[[ResponseSongFileChunk builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseSongFileChunk*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseSongFileChunk*)[[[ResponseSongFileChunk builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseSongFileChunk*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseSongFileChunk*)[[[ResponseSongFileChunk builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseSongFileChunkBuilder*) builder {
  return [[ResponseSongFileChunkBuilder alloc] init];
}
+ (ResponseSongFileChunkBuilder*) builderWithPrototype:(ResponseSongFileChunk*) prototype {
  return [[ResponseSongFileChunk builder] mergeFrom:prototype];
}
- (ResponseSongFileChunkBuilder*) builder {
  return [ResponseSongFileChunk builder];
}
- (ResponseSongFileChunkBuilder*) toBuilder {
  return [ResponseSongFileChunk builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChunkNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"chunkNumber", [NSNumber numberWithInteger:self.chunkNumber]];
  }
  if (self.hasChunkCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"chunkCount", [NSNumber numberWithInteger:self.chunkCount]];
  }
  if (self.hasFileNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileNumber", [NSNumber numberWithInteger:self.fileNumber]];
  }
  if (self.hasFileCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileCount", [NSNumber numberWithInteger:self.fileCount]];
  }
  if (self.hasSongMetadata) {
    [output appendFormat:@"%@%@ {\n", indent, @"songMetadata"];
    [self.songMetadata writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
  }
  if (self.hasSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"size", [NSNumber numberWithInteger:self.size]];
  }
  if (self.hasFileHash) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileHash", self.fileHash];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasChunkNumber) {
    [dictionary setObject: [NSNumber numberWithInteger:self.chunkNumber] forKey: @"chunkNumber"];
  }
  if (self.hasChunkCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.chunkCount] forKey: @"chunkCount"];
  }
  if (self.hasFileNumber) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fileNumber] forKey: @"fileNumber"];
  }
  if (self.hasFileCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fileCount] forKey: @"fileCount"];
  }
  if (self.hasSongMetadata) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.songMetadata storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"songMetadata"];
  }
  if (self.hasData) {
    [dictionary setObject: self.data forKey: @"data"];
  }
  if (self.hasSize) {
    [dictionary setObject: [NSNumber numberWithInteger:self.size] forKey: @"size"];
  }
  if (self.hasFileHash) {
    [dictionary setObject: self.fileHash forKey: @"fileHash"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseSongFileChunk class]]) {
    return NO;
  }
  ResponseSongFileChunk *otherMessage = other;
  return
      self.hasChunkNumber == otherMessage.hasChunkNumber &&
      (!self.hasChunkNumber || self.chunkNumber == otherMessage.chunkNumber) &&
      self.hasChunkCount == otherMessage.hasChunkCount &&
      (!self.hasChunkCount || self.chunkCount == otherMessage.chunkCount) &&
      self.hasFileNumber == otherMessage.hasFileNumber &&
      (!self.hasFileNumber || self.fileNumber == otherMessage.fileNumber) &&
      self.hasFileCount == otherMessage.hasFileCount &&
      (!self.hasFileCount || self.fileCount == otherMessage.fileCount) &&
      self.hasSongMetadata == otherMessage.hasSongMetadata &&
      (!self.hasSongMetadata || [self.songMetadata isEqual:otherMessage.songMetadata]) &&
      self.hasData == otherMessage.hasData &&
      (!self.hasData || [self.data isEqual:otherMessage.data]) &&
      self.hasSize == otherMessage.hasSize &&
      (!self.hasSize || self.size == otherMessage.size) &&
      self.hasFileHash == otherMessage.hasFileHash &&
      (!self.hasFileHash || [self.fileHash isEqual:otherMessage.fileHash]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasChunkNumber) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.chunkNumber] hash];
  }
  if (self.hasChunkCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.chunkCount] hash];
  }
  if (self.hasFileNumber) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fileNumber] hash];
  }
  if (self.hasFileCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fileCount] hash];
  }
  if (self.hasSongMetadata) {
    hashCode = hashCode * 31 + [self.songMetadata hash];
  }
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  if (self.hasSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.size] hash];
  }
  if (self.hasFileHash) {
    hashCode = hashCode * 31 + [self.fileHash hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseSongFileChunkBuilder()
@property (strong) ResponseSongFileChunk* resultResponseSongFileChunk;
@end

@implementation ResponseSongFileChunkBuilder
@synthesize resultResponseSongFileChunk;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponseSongFileChunk = [[ResponseSongFileChunk alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponseSongFileChunk;
}
- (ResponseSongFileChunkBuilder*) clear {
  self.resultResponseSongFileChunk = [[ResponseSongFileChunk alloc] init];
  return self;
}
- (ResponseSongFileChunkBuilder*) clone {
  return [ResponseSongFileChunk builderWithPrototype:resultResponseSongFileChunk];
}
- (ResponseSongFileChunk*) defaultInstance {
  return [ResponseSongFileChunk defaultInstance];
}
- (ResponseSongFileChunk*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseSongFileChunk*) buildPartial {
  ResponseSongFileChunk* returnMe = resultResponseSongFileChunk;
  self.resultResponseSongFileChunk = nil;
  return returnMe;
}
- (ResponseSongFileChunkBuilder*) mergeFrom:(ResponseSongFileChunk*) other {
  if (other == [ResponseSongFileChunk defaultInstance]) {
    return self;
  }
  if (other.hasChunkNumber) {
    [self setChunkNumber:other.chunkNumber];
  }
  if (other.hasChunkCount) {
    [self setChunkCount:other.chunkCount];
  }
  if (other.hasFileNumber) {
    [self setFileNumber:other.fileNumber];
  }
  if (other.hasFileCount) {
    [self setFileCount:other.fileCount];
  }
  if (other.hasSongMetadata) {
    [self mergeSongMetadata:other.songMetadata];
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  if (other.hasSize) {
    [self setSize:other.size];
  }
  if (other.hasFileHash) {
    [self setFileHash:other.fileHash];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseSongFileChunkBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseSongFileChunkBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setChunkNumber:[input readInt32]];
        break;
      }
      case 16: {
        [self setChunkCount:[input readInt32]];
        break;
      }
      case 24: {
        [self setFileNumber:[input readInt32]];
        break;
      }
      case 32: {
        [self setFileCount:[input readInt32]];
        break;
      }
      case 50: {
        SongMetadataBuilder* subBuilder = [SongMetadata builder];
        if (self.hasSongMetadata) {
          [subBuilder mergeFrom:self.songMetadata];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSongMetadata:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        [self setData:[input readData]];
        break;
      }
      case 64: {
        [self setSize:[input readInt32]];
        break;
      }
      case 74: {
        [self setFileHash:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasChunkNumber {
  return resultResponseSongFileChunk.hasChunkNumber;
}
- (SInt32) chunkNumber {
  return resultResponseSongFileChunk.chunkNumber;
}
- (ResponseSongFileChunkBuilder*) setChunkNumber:(SInt32) value {
  resultResponseSongFileChunk.hasChunkNumber = YES;
  resultResponseSongFileChunk.chunkNumber = value;
  return self;
}
- (ResponseSongFileChunkBuilder*) clearChunkNumber {
  resultResponseSongFileChunk.hasChunkNumber = NO;
  resultResponseSongFileChunk.chunkNumber = 0;
  return self;
}
- (BOOL) hasChunkCount {
  return resultResponseSongFileChunk.hasChunkCount;
}
- (SInt32) chunkCount {
  return resultResponseSongFileChunk.chunkCount;
}
- (ResponseSongFileChunkBuilder*) setChunkCount:(SInt32) value {
  resultResponseSongFileChunk.hasChunkCount = YES;
  resultResponseSongFileChunk.chunkCount = value;
  return self;
}
- (ResponseSongFileChunkBuilder*) clearChunkCount {
  resultResponseSongFileChunk.hasChunkCount = NO;
  resultResponseSongFileChunk.chunkCount = 0;
  return self;
}
- (BOOL) hasFileNumber {
  return resultResponseSongFileChunk.hasFileNumber;
}
- (SInt32) fileNumber {
  return resultResponseSongFileChunk.fileNumber;
}
- (ResponseSongFileChunkBuilder*) setFileNumber:(SInt32) value {
  resultResponseSongFileChunk.hasFileNumber = YES;
  resultResponseSongFileChunk.fileNumber = value;
  return self;
}
- (ResponseSongFileChunkBuilder*) clearFileNumber {
  resultResponseSongFileChunk.hasFileNumber = NO;
  resultResponseSongFileChunk.fileNumber = 0;
  return self;
}
- (BOOL) hasFileCount {
  return resultResponseSongFileChunk.hasFileCount;
}
- (SInt32) fileCount {
  return resultResponseSongFileChunk.fileCount;
}
- (ResponseSongFileChunkBuilder*) setFileCount:(SInt32) value {
  resultResponseSongFileChunk.hasFileCount = YES;
  resultResponseSongFileChunk.fileCount = value;
  return self;
}
- (ResponseSongFileChunkBuilder*) clearFileCount {
  resultResponseSongFileChunk.hasFileCount = NO;
  resultResponseSongFileChunk.fileCount = 0;
  return self;
}
- (BOOL) hasSongMetadata {
  return resultResponseSongFileChunk.hasSongMetadata;
}
- (SongMetadata*) songMetadata {
  return resultResponseSongFileChunk.songMetadata;
}
- (ResponseSongFileChunkBuilder*) setSongMetadata:(SongMetadata*) value {
  resultResponseSongFileChunk.hasSongMetadata = YES;
  resultResponseSongFileChunk.songMetadata = value;
  return self;
}
- (ResponseSongFileChunkBuilder*) setSongMetadataBuilder:(SongMetadataBuilder*) builderForValue {
  return [self setSongMetadata:[builderForValue build]];
}
- (ResponseSongFileChunkBuilder*) mergeSongMetadata:(SongMetadata*) value {
  if (resultResponseSongFileChunk.hasSongMetadata &&
      resultResponseSongFileChunk.songMetadata != [SongMetadata defaultInstance]) {
    resultResponseSongFileChunk.songMetadata =
      [[[SongMetadata builderWithPrototype:resultResponseSongFileChunk.songMetadata] mergeFrom:value] buildPartial];
  } else {
    resultResponseSongFileChunk.songMetadata = value;
  }
  resultResponseSongFileChunk.hasSongMetadata = YES;
  return self;
}
- (ResponseSongFileChunkBuilder*) clearSongMetadata {
  resultResponseSongFileChunk.hasSongMetadata = NO;
  resultResponseSongFileChunk.songMetadata = [SongMetadata defaultInstance];
  return self;
}
- (BOOL) hasData {
  return resultResponseSongFileChunk.hasData;
}
- (NSData*) data {
  return resultResponseSongFileChunk.data;
}
- (ResponseSongFileChunkBuilder*) setData:(NSData*) value {
  resultResponseSongFileChunk.hasData = YES;
  resultResponseSongFileChunk.data = value;
  return self;
}
- (ResponseSongFileChunkBuilder*) clearData {
  resultResponseSongFileChunk.hasData = NO;
  resultResponseSongFileChunk.data = [NSData data];
  return self;
}
- (BOOL) hasSize {
  return resultResponseSongFileChunk.hasSize;
}
- (SInt32) size {
  return resultResponseSongFileChunk.size;
}
- (ResponseSongFileChunkBuilder*) setSize:(SInt32) value {
  resultResponseSongFileChunk.hasSize = YES;
  resultResponseSongFileChunk.size = value;
  return self;
}
- (ResponseSongFileChunkBuilder*) clearSize {
  resultResponseSongFileChunk.hasSize = NO;
  resultResponseSongFileChunk.size = 0;
  return self;
}
- (BOOL) hasFileHash {
  return resultResponseSongFileChunk.hasFileHash;
}
- (NSData*) fileHash {
  return resultResponseSongFileChunk.fileHash;
}
- (ResponseSongFileChunkBuilder*) setFileHash:(NSData*) value {
  resultResponseSongFileChunk.hasFileHash = YES;
  resultResponseSongFileChunk.fileHash = value;
  return self;
}
- (ResponseSongFileChunkBuilder*) clearFileHash {
  resultResponseSongFileChunk.hasFileHash = NO;
  resultResponseSongFileChunk.fileHash = [NSData data];
  return self;
}
@end

@interface ResponseLibraryChunk ()
@property SInt32 chunkNumber;
@property SInt32 chunkCount;
@property (strong) NSData* data;
@property SInt32 size;
@property (strong) NSData* fileHash;
@end

@implementation ResponseLibraryChunk

- (BOOL) hasChunkNumber {
  return !!hasChunkNumber_;
}
- (void) setHasChunkNumber:(BOOL) _value_ {
  hasChunkNumber_ = !!_value_;
}
@synthesize chunkNumber;
- (BOOL) hasChunkCount {
  return !!hasChunkCount_;
}
- (void) setHasChunkCount:(BOOL) _value_ {
  hasChunkCount_ = !!_value_;
}
@synthesize chunkCount;
- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) _value_ {
  hasData_ = !!_value_;
}
@synthesize data;
- (BOOL) hasSize {
  return !!hasSize_;
}
- (void) setHasSize:(BOOL) _value_ {
  hasSize_ = !!_value_;
}
@synthesize size;
- (BOOL) hasFileHash {
  return !!hasFileHash_;
}
- (void) setHasFileHash:(BOOL) _value_ {
  hasFileHash_ = !!_value_;
}
@synthesize fileHash;
- (instancetype) init {
  if ((self = [super init])) {
    self.chunkNumber = 0;
    self.chunkCount = 0;
    self.data = [NSData data];
    self.size = 0;
    self.fileHash = [NSData data];
  }
  return self;
}
static ResponseLibraryChunk* defaultResponseLibraryChunkInstance = nil;
+ (void) initialize {
  if (self == [ResponseLibraryChunk class]) {
    defaultResponseLibraryChunkInstance = [[ResponseLibraryChunk alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseLibraryChunkInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseLibraryChunkInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChunkNumber) {
    [output writeInt32:1 value:self.chunkNumber];
  }
  if (self.hasChunkCount) {
    [output writeInt32:2 value:self.chunkCount];
  }
  if (self.hasData) {
    [output writeData:3 value:self.data];
  }
  if (self.hasSize) {
    [output writeInt32:4 value:self.size];
  }
  if (self.hasFileHash) {
    [output writeData:5 value:self.fileHash];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasChunkNumber) {
    size_ += computeInt32Size(1, self.chunkNumber);
  }
  if (self.hasChunkCount) {
    size_ += computeInt32Size(2, self.chunkCount);
  }
  if (self.hasData) {
    size_ += computeDataSize(3, self.data);
  }
  if (self.hasSize) {
    size_ += computeInt32Size(4, self.size);
  }
  if (self.hasFileHash) {
    size_ += computeDataSize(5, self.fileHash);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseLibraryChunk*) parseFromData:(NSData*) data {
  return (ResponseLibraryChunk*)[[[ResponseLibraryChunk builder] mergeFromData:data] build];
}
+ (ResponseLibraryChunk*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseLibraryChunk*)[[[ResponseLibraryChunk builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseLibraryChunk*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseLibraryChunk*)[[[ResponseLibraryChunk builder] mergeFromInputStream:input] build];
}
+ (ResponseLibraryChunk*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseLibraryChunk*)[[[ResponseLibraryChunk builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseLibraryChunk*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseLibraryChunk*)[[[ResponseLibraryChunk builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseLibraryChunk*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseLibraryChunk*)[[[ResponseLibraryChunk builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseLibraryChunkBuilder*) builder {
  return [[ResponseLibraryChunkBuilder alloc] init];
}
+ (ResponseLibraryChunkBuilder*) builderWithPrototype:(ResponseLibraryChunk*) prototype {
  return [[ResponseLibraryChunk builder] mergeFrom:prototype];
}
- (ResponseLibraryChunkBuilder*) builder {
  return [ResponseLibraryChunk builder];
}
- (ResponseLibraryChunkBuilder*) toBuilder {
  return [ResponseLibraryChunk builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChunkNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"chunkNumber", [NSNumber numberWithInteger:self.chunkNumber]];
  }
  if (self.hasChunkCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"chunkCount", [NSNumber numberWithInteger:self.chunkCount]];
  }
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
  }
  if (self.hasSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"size", [NSNumber numberWithInteger:self.size]];
  }
  if (self.hasFileHash) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileHash", self.fileHash];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasChunkNumber) {
    [dictionary setObject: [NSNumber numberWithInteger:self.chunkNumber] forKey: @"chunkNumber"];
  }
  if (self.hasChunkCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.chunkCount] forKey: @"chunkCount"];
  }
  if (self.hasData) {
    [dictionary setObject: self.data forKey: @"data"];
  }
  if (self.hasSize) {
    [dictionary setObject: [NSNumber numberWithInteger:self.size] forKey: @"size"];
  }
  if (self.hasFileHash) {
    [dictionary setObject: self.fileHash forKey: @"fileHash"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseLibraryChunk class]]) {
    return NO;
  }
  ResponseLibraryChunk *otherMessage = other;
  return
      self.hasChunkNumber == otherMessage.hasChunkNumber &&
      (!self.hasChunkNumber || self.chunkNumber == otherMessage.chunkNumber) &&
      self.hasChunkCount == otherMessage.hasChunkCount &&
      (!self.hasChunkCount || self.chunkCount == otherMessage.chunkCount) &&
      self.hasData == otherMessage.hasData &&
      (!self.hasData || [self.data isEqual:otherMessage.data]) &&
      self.hasSize == otherMessage.hasSize &&
      (!self.hasSize || self.size == otherMessage.size) &&
      self.hasFileHash == otherMessage.hasFileHash &&
      (!self.hasFileHash || [self.fileHash isEqual:otherMessage.fileHash]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasChunkNumber) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.chunkNumber] hash];
  }
  if (self.hasChunkCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.chunkCount] hash];
  }
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  if (self.hasSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.size] hash];
  }
  if (self.hasFileHash) {
    hashCode = hashCode * 31 + [self.fileHash hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseLibraryChunkBuilder()
@property (strong) ResponseLibraryChunk* resultResponseLibraryChunk;
@end

@implementation ResponseLibraryChunkBuilder
@synthesize resultResponseLibraryChunk;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponseLibraryChunk = [[ResponseLibraryChunk alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponseLibraryChunk;
}
- (ResponseLibraryChunkBuilder*) clear {
  self.resultResponseLibraryChunk = [[ResponseLibraryChunk alloc] init];
  return self;
}
- (ResponseLibraryChunkBuilder*) clone {
  return [ResponseLibraryChunk builderWithPrototype:resultResponseLibraryChunk];
}
- (ResponseLibraryChunk*) defaultInstance {
  return [ResponseLibraryChunk defaultInstance];
}
- (ResponseLibraryChunk*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseLibraryChunk*) buildPartial {
  ResponseLibraryChunk* returnMe = resultResponseLibraryChunk;
  self.resultResponseLibraryChunk = nil;
  return returnMe;
}
- (ResponseLibraryChunkBuilder*) mergeFrom:(ResponseLibraryChunk*) other {
  if (other == [ResponseLibraryChunk defaultInstance]) {
    return self;
  }
  if (other.hasChunkNumber) {
    [self setChunkNumber:other.chunkNumber];
  }
  if (other.hasChunkCount) {
    [self setChunkCount:other.chunkCount];
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  if (other.hasSize) {
    [self setSize:other.size];
  }
  if (other.hasFileHash) {
    [self setFileHash:other.fileHash];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseLibraryChunkBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseLibraryChunkBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setChunkNumber:[input readInt32]];
        break;
      }
      case 16: {
        [self setChunkCount:[input readInt32]];
        break;
      }
      case 26: {
        [self setData:[input readData]];
        break;
      }
      case 32: {
        [self setSize:[input readInt32]];
        break;
      }
      case 42: {
        [self setFileHash:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasChunkNumber {
  return resultResponseLibraryChunk.hasChunkNumber;
}
- (SInt32) chunkNumber {
  return resultResponseLibraryChunk.chunkNumber;
}
- (ResponseLibraryChunkBuilder*) setChunkNumber:(SInt32) value {
  resultResponseLibraryChunk.hasChunkNumber = YES;
  resultResponseLibraryChunk.chunkNumber = value;
  return self;
}
- (ResponseLibraryChunkBuilder*) clearChunkNumber {
  resultResponseLibraryChunk.hasChunkNumber = NO;
  resultResponseLibraryChunk.chunkNumber = 0;
  return self;
}
- (BOOL) hasChunkCount {
  return resultResponseLibraryChunk.hasChunkCount;
}
- (SInt32) chunkCount {
  return resultResponseLibraryChunk.chunkCount;
}
- (ResponseLibraryChunkBuilder*) setChunkCount:(SInt32) value {
  resultResponseLibraryChunk.hasChunkCount = YES;
  resultResponseLibraryChunk.chunkCount = value;
  return self;
}
- (ResponseLibraryChunkBuilder*) clearChunkCount {
  resultResponseLibraryChunk.hasChunkCount = NO;
  resultResponseLibraryChunk.chunkCount = 0;
  return self;
}
- (BOOL) hasData {
  return resultResponseLibraryChunk.hasData;
}
- (NSData*) data {
  return resultResponseLibraryChunk.data;
}
- (ResponseLibraryChunkBuilder*) setData:(NSData*) value {
  resultResponseLibraryChunk.hasData = YES;
  resultResponseLibraryChunk.data = value;
  return self;
}
- (ResponseLibraryChunkBuilder*) clearData {
  resultResponseLibraryChunk.hasData = NO;
  resultResponseLibraryChunk.data = [NSData data];
  return self;
}
- (BOOL) hasSize {
  return resultResponseLibraryChunk.hasSize;
}
- (SInt32) size {
  return resultResponseLibraryChunk.size;
}
- (ResponseLibraryChunkBuilder*) setSize:(SInt32) value {
  resultResponseLibraryChunk.hasSize = YES;
  resultResponseLibraryChunk.size = value;
  return self;
}
- (ResponseLibraryChunkBuilder*) clearSize {
  resultResponseLibraryChunk.hasSize = NO;
  resultResponseLibraryChunk.size = 0;
  return self;
}
- (BOOL) hasFileHash {
  return resultResponseLibraryChunk.hasFileHash;
}
- (NSData*) fileHash {
  return resultResponseLibraryChunk.fileHash;
}
- (ResponseLibraryChunkBuilder*) setFileHash:(NSData*) value {
  resultResponseLibraryChunk.hasFileHash = YES;
  resultResponseLibraryChunk.fileHash = value;
  return self;
}
- (ResponseLibraryChunkBuilder*) clearFileHash {
  resultResponseLibraryChunk.hasFileHash = NO;
  resultResponseLibraryChunk.fileHash = [NSData data];
  return self;
}
@end

@interface ResponseSongOffer ()
@property BOOL accepted;
@end

@implementation ResponseSongOffer

- (BOOL) hasAccepted {
  return !!hasAccepted_;
}
- (void) setHasAccepted:(BOOL) _value_ {
  hasAccepted_ = !!_value_;
}
- (BOOL) accepted {
  return !!accepted_;
}
- (void) setAccepted:(BOOL) _value_ {
  accepted_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.accepted = NO;
  }
  return self;
}
static ResponseSongOffer* defaultResponseSongOfferInstance = nil;
+ (void) initialize {
  if (self == [ResponseSongOffer class]) {
    defaultResponseSongOfferInstance = [[ResponseSongOffer alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseSongOfferInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseSongOfferInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccepted) {
    [output writeBool:1 value:self.accepted];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccepted) {
    size_ += computeBoolSize(1, self.accepted);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseSongOffer*) parseFromData:(NSData*) data {
  return (ResponseSongOffer*)[[[ResponseSongOffer builder] mergeFromData:data] build];
}
+ (ResponseSongOffer*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseSongOffer*)[[[ResponseSongOffer builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseSongOffer*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseSongOffer*)[[[ResponseSongOffer builder] mergeFromInputStream:input] build];
}
+ (ResponseSongOffer*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseSongOffer*)[[[ResponseSongOffer builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseSongOffer*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseSongOffer*)[[[ResponseSongOffer builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseSongOffer*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseSongOffer*)[[[ResponseSongOffer builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseSongOfferBuilder*) builder {
  return [[ResponseSongOfferBuilder alloc] init];
}
+ (ResponseSongOfferBuilder*) builderWithPrototype:(ResponseSongOffer*) prototype {
  return [[ResponseSongOffer builder] mergeFrom:prototype];
}
- (ResponseSongOfferBuilder*) builder {
  return [ResponseSongOffer builder];
}
- (ResponseSongOfferBuilder*) toBuilder {
  return [ResponseSongOffer builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccepted) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accepted", [NSNumber numberWithBool:self.accepted]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasAccepted) {
    [dictionary setObject: [NSNumber numberWithBool:self.accepted] forKey: @"accepted"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseSongOffer class]]) {
    return NO;
  }
  ResponseSongOffer *otherMessage = other;
  return
      self.hasAccepted == otherMessage.hasAccepted &&
      (!self.hasAccepted || self.accepted == otherMessage.accepted) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAccepted) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.accepted] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseSongOfferBuilder()
@property (strong) ResponseSongOffer* resultResponseSongOffer;
@end

@implementation ResponseSongOfferBuilder
@synthesize resultResponseSongOffer;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponseSongOffer = [[ResponseSongOffer alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponseSongOffer;
}
- (ResponseSongOfferBuilder*) clear {
  self.resultResponseSongOffer = [[ResponseSongOffer alloc] init];
  return self;
}
- (ResponseSongOfferBuilder*) clone {
  return [ResponseSongOffer builderWithPrototype:resultResponseSongOffer];
}
- (ResponseSongOffer*) defaultInstance {
  return [ResponseSongOffer defaultInstance];
}
- (ResponseSongOffer*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseSongOffer*) buildPartial {
  ResponseSongOffer* returnMe = resultResponseSongOffer;
  self.resultResponseSongOffer = nil;
  return returnMe;
}
- (ResponseSongOfferBuilder*) mergeFrom:(ResponseSongOffer*) other {
  if (other == [ResponseSongOffer defaultInstance]) {
    return self;
  }
  if (other.hasAccepted) {
    [self setAccepted:other.accepted];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseSongOfferBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseSongOfferBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAccepted:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasAccepted {
  return resultResponseSongOffer.hasAccepted;
}
- (BOOL) accepted {
  return resultResponseSongOffer.accepted;
}
- (ResponseSongOfferBuilder*) setAccepted:(BOOL) value {
  resultResponseSongOffer.hasAccepted = YES;
  resultResponseSongOffer.accepted = value;
  return self;
}
- (ResponseSongOfferBuilder*) clearAccepted {
  resultResponseSongOffer.hasAccepted = NO;
  resultResponseSongOffer.accepted = NO;
  return self;
}
@end

@interface RequestRateSong ()
@property Float32 rating;
@end

@implementation RequestRateSong

- (BOOL) hasRating {
  return !!hasRating_;
}
- (void) setHasRating:(BOOL) _value_ {
  hasRating_ = !!_value_;
}
@synthesize rating;
- (instancetype) init {
  if ((self = [super init])) {
    self.rating = 0;
  }
  return self;
}
static RequestRateSong* defaultRequestRateSongInstance = nil;
+ (void) initialize {
  if (self == [RequestRateSong class]) {
    defaultRequestRateSongInstance = [[RequestRateSong alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRequestRateSongInstance;
}
- (instancetype) defaultInstance {
  return defaultRequestRateSongInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRating) {
    [output writeFloat:1 value:self.rating];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRating) {
    size_ += computeFloatSize(1, self.rating);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RequestRateSong*) parseFromData:(NSData*) data {
  return (RequestRateSong*)[[[RequestRateSong builder] mergeFromData:data] build];
}
+ (RequestRateSong*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestRateSong*)[[[RequestRateSong builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RequestRateSong*) parseFromInputStream:(NSInputStream*) input {
  return (RequestRateSong*)[[[RequestRateSong builder] mergeFromInputStream:input] build];
}
+ (RequestRateSong*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestRateSong*)[[[RequestRateSong builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestRateSong*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RequestRateSong*)[[[RequestRateSong builder] mergeFromCodedInputStream:input] build];
}
+ (RequestRateSong*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestRateSong*)[[[RequestRateSong builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestRateSongBuilder*) builder {
  return [[RequestRateSongBuilder alloc] init];
}
+ (RequestRateSongBuilder*) builderWithPrototype:(RequestRateSong*) prototype {
  return [[RequestRateSong builder] mergeFrom:prototype];
}
- (RequestRateSongBuilder*) builder {
  return [RequestRateSong builder];
}
- (RequestRateSongBuilder*) toBuilder {
  return [RequestRateSong builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRating) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rating", [NSNumber numberWithFloat:self.rating]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRating) {
    [dictionary setObject: [NSNumber numberWithFloat:self.rating] forKey: @"rating"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RequestRateSong class]]) {
    return NO;
  }
  RequestRateSong *otherMessage = other;
  return
      self.hasRating == otherMessage.hasRating &&
      (!self.hasRating || self.rating == otherMessage.rating) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRating) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.rating] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RequestRateSongBuilder()
@property (strong) RequestRateSong* resultRequestRateSong;
@end

@implementation RequestRateSongBuilder
@synthesize resultRequestRateSong;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRequestRateSong = [[RequestRateSong alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRequestRateSong;
}
- (RequestRateSongBuilder*) clear {
  self.resultRequestRateSong = [[RequestRateSong alloc] init];
  return self;
}
- (RequestRateSongBuilder*) clone {
  return [RequestRateSong builderWithPrototype:resultRequestRateSong];
}
- (RequestRateSong*) defaultInstance {
  return [RequestRateSong defaultInstance];
}
- (RequestRateSong*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RequestRateSong*) buildPartial {
  RequestRateSong* returnMe = resultRequestRateSong;
  self.resultRequestRateSong = nil;
  return returnMe;
}
- (RequestRateSongBuilder*) mergeFrom:(RequestRateSong*) other {
  if (other == [RequestRateSong defaultInstance]) {
    return self;
  }
  if (other.hasRating) {
    [self setRating:other.rating];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RequestRateSongBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RequestRateSongBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setRating:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasRating {
  return resultRequestRateSong.hasRating;
}
- (Float32) rating {
  return resultRequestRateSong.rating;
}
- (RequestRateSongBuilder*) setRating:(Float32) value {
  resultRequestRateSong.hasRating = YES;
  resultRequestRateSong.rating = value;
  return self;
}
- (RequestRateSongBuilder*) clearRating {
  resultRequestRateSong.hasRating = NO;
  resultRequestRateSong.rating = 0;
  return self;
}
@end

@interface ResponseDownloadTotalSize ()
@property SInt32 totalSize;
@property SInt32 fileCount;
@end

@implementation ResponseDownloadTotalSize

- (BOOL) hasTotalSize {
  return !!hasTotalSize_;
}
- (void) setHasTotalSize:(BOOL) _value_ {
  hasTotalSize_ = !!_value_;
}
@synthesize totalSize;
- (BOOL) hasFileCount {
  return !!hasFileCount_;
}
- (void) setHasFileCount:(BOOL) _value_ {
  hasFileCount_ = !!_value_;
}
@synthesize fileCount;
- (instancetype) init {
  if ((self = [super init])) {
    self.totalSize = 0;
    self.fileCount = 0;
  }
  return self;
}
static ResponseDownloadTotalSize* defaultResponseDownloadTotalSizeInstance = nil;
+ (void) initialize {
  if (self == [ResponseDownloadTotalSize class]) {
    defaultResponseDownloadTotalSizeInstance = [[ResponseDownloadTotalSize alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseDownloadTotalSizeInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseDownloadTotalSizeInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTotalSize) {
    [output writeInt32:1 value:self.totalSize];
  }
  if (self.hasFileCount) {
    [output writeInt32:2 value:self.fileCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTotalSize) {
    size_ += computeInt32Size(1, self.totalSize);
  }
  if (self.hasFileCount) {
    size_ += computeInt32Size(2, self.fileCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseDownloadTotalSize*) parseFromData:(NSData*) data {
  return (ResponseDownloadTotalSize*)[[[ResponseDownloadTotalSize builder] mergeFromData:data] build];
}
+ (ResponseDownloadTotalSize*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseDownloadTotalSize*)[[[ResponseDownloadTotalSize builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseDownloadTotalSize*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseDownloadTotalSize*)[[[ResponseDownloadTotalSize builder] mergeFromInputStream:input] build];
}
+ (ResponseDownloadTotalSize*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseDownloadTotalSize*)[[[ResponseDownloadTotalSize builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseDownloadTotalSize*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseDownloadTotalSize*)[[[ResponseDownloadTotalSize builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseDownloadTotalSize*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseDownloadTotalSize*)[[[ResponseDownloadTotalSize builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseDownloadTotalSizeBuilder*) builder {
  return [[ResponseDownloadTotalSizeBuilder alloc] init];
}
+ (ResponseDownloadTotalSizeBuilder*) builderWithPrototype:(ResponseDownloadTotalSize*) prototype {
  return [[ResponseDownloadTotalSize builder] mergeFrom:prototype];
}
- (ResponseDownloadTotalSizeBuilder*) builder {
  return [ResponseDownloadTotalSize builder];
}
- (ResponseDownloadTotalSizeBuilder*) toBuilder {
  return [ResponseDownloadTotalSize builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTotalSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalSize", [NSNumber numberWithInteger:self.totalSize]];
  }
  if (self.hasFileCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileCount", [NSNumber numberWithInteger:self.fileCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTotalSize) {
    [dictionary setObject: [NSNumber numberWithInteger:self.totalSize] forKey: @"totalSize"];
  }
  if (self.hasFileCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fileCount] forKey: @"fileCount"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseDownloadTotalSize class]]) {
    return NO;
  }
  ResponseDownloadTotalSize *otherMessage = other;
  return
      self.hasTotalSize == otherMessage.hasTotalSize &&
      (!self.hasTotalSize || self.totalSize == otherMessage.totalSize) &&
      self.hasFileCount == otherMessage.hasFileCount &&
      (!self.hasFileCount || self.fileCount == otherMessage.fileCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTotalSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalSize] hash];
  }
  if (self.hasFileCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fileCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseDownloadTotalSizeBuilder()
@property (strong) ResponseDownloadTotalSize* resultResponseDownloadTotalSize;
@end

@implementation ResponseDownloadTotalSizeBuilder
@synthesize resultResponseDownloadTotalSize;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponseDownloadTotalSize = [[ResponseDownloadTotalSize alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponseDownloadTotalSize;
}
- (ResponseDownloadTotalSizeBuilder*) clear {
  self.resultResponseDownloadTotalSize = [[ResponseDownloadTotalSize alloc] init];
  return self;
}
- (ResponseDownloadTotalSizeBuilder*) clone {
  return [ResponseDownloadTotalSize builderWithPrototype:resultResponseDownloadTotalSize];
}
- (ResponseDownloadTotalSize*) defaultInstance {
  return [ResponseDownloadTotalSize defaultInstance];
}
- (ResponseDownloadTotalSize*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseDownloadTotalSize*) buildPartial {
  ResponseDownloadTotalSize* returnMe = resultResponseDownloadTotalSize;
  self.resultResponseDownloadTotalSize = nil;
  return returnMe;
}
- (ResponseDownloadTotalSizeBuilder*) mergeFrom:(ResponseDownloadTotalSize*) other {
  if (other == [ResponseDownloadTotalSize defaultInstance]) {
    return self;
  }
  if (other.hasTotalSize) {
    [self setTotalSize:other.totalSize];
  }
  if (other.hasFileCount) {
    [self setFileCount:other.fileCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseDownloadTotalSizeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseDownloadTotalSizeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTotalSize:[input readInt32]];
        break;
      }
      case 16: {
        [self setFileCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasTotalSize {
  return resultResponseDownloadTotalSize.hasTotalSize;
}
- (SInt32) totalSize {
  return resultResponseDownloadTotalSize.totalSize;
}
- (ResponseDownloadTotalSizeBuilder*) setTotalSize:(SInt32) value {
  resultResponseDownloadTotalSize.hasTotalSize = YES;
  resultResponseDownloadTotalSize.totalSize = value;
  return self;
}
- (ResponseDownloadTotalSizeBuilder*) clearTotalSize {
  resultResponseDownloadTotalSize.hasTotalSize = NO;
  resultResponseDownloadTotalSize.totalSize = 0;
  return self;
}
- (BOOL) hasFileCount {
  return resultResponseDownloadTotalSize.hasFileCount;
}
- (SInt32) fileCount {
  return resultResponseDownloadTotalSize.fileCount;
}
- (ResponseDownloadTotalSizeBuilder*) setFileCount:(SInt32) value {
  resultResponseDownloadTotalSize.hasFileCount = YES;
  resultResponseDownloadTotalSize.fileCount = value;
  return self;
}
- (ResponseDownloadTotalSizeBuilder*) clearFileCount {
  resultResponseDownloadTotalSize.hasFileCount = NO;
  resultResponseDownloadTotalSize.fileCount = 0;
  return self;
}
@end

@interface RequestGlobalSearch ()
@property (strong) NSString* query;
@end

@implementation RequestGlobalSearch

- (BOOL) hasQuery {
  return !!hasQuery_;
}
- (void) setHasQuery:(BOOL) _value_ {
  hasQuery_ = !!_value_;
}
@synthesize query;
- (instancetype) init {
  if ((self = [super init])) {
    self.query = @"";
  }
  return self;
}
static RequestGlobalSearch* defaultRequestGlobalSearchInstance = nil;
+ (void) initialize {
  if (self == [RequestGlobalSearch class]) {
    defaultRequestGlobalSearchInstance = [[RequestGlobalSearch alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRequestGlobalSearchInstance;
}
- (instancetype) defaultInstance {
  return defaultRequestGlobalSearchInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasQuery) {
    [output writeString:1 value:self.query];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasQuery) {
    size_ += computeStringSize(1, self.query);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RequestGlobalSearch*) parseFromData:(NSData*) data {
  return (RequestGlobalSearch*)[[[RequestGlobalSearch builder] mergeFromData:data] build];
}
+ (RequestGlobalSearch*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestGlobalSearch*)[[[RequestGlobalSearch builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RequestGlobalSearch*) parseFromInputStream:(NSInputStream*) input {
  return (RequestGlobalSearch*)[[[RequestGlobalSearch builder] mergeFromInputStream:input] build];
}
+ (RequestGlobalSearch*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestGlobalSearch*)[[[RequestGlobalSearch builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestGlobalSearch*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RequestGlobalSearch*)[[[RequestGlobalSearch builder] mergeFromCodedInputStream:input] build];
}
+ (RequestGlobalSearch*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RequestGlobalSearch*)[[[RequestGlobalSearch builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RequestGlobalSearchBuilder*) builder {
  return [[RequestGlobalSearchBuilder alloc] init];
}
+ (RequestGlobalSearchBuilder*) builderWithPrototype:(RequestGlobalSearch*) prototype {
  return [[RequestGlobalSearch builder] mergeFrom:prototype];
}
- (RequestGlobalSearchBuilder*) builder {
  return [RequestGlobalSearch builder];
}
- (RequestGlobalSearchBuilder*) toBuilder {
  return [RequestGlobalSearch builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasQuery) {
    [output appendFormat:@"%@%@: %@\n", indent, @"query", self.query];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasQuery) {
    [dictionary setObject: self.query forKey: @"query"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RequestGlobalSearch class]]) {
    return NO;
  }
  RequestGlobalSearch *otherMessage = other;
  return
      self.hasQuery == otherMessage.hasQuery &&
      (!self.hasQuery || [self.query isEqual:otherMessage.query]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasQuery) {
    hashCode = hashCode * 31 + [self.query hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RequestGlobalSearchBuilder()
@property (strong) RequestGlobalSearch* resultRequestGlobalSearch;
@end

@implementation RequestGlobalSearchBuilder
@synthesize resultRequestGlobalSearch;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRequestGlobalSearch = [[RequestGlobalSearch alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRequestGlobalSearch;
}
- (RequestGlobalSearchBuilder*) clear {
  self.resultRequestGlobalSearch = [[RequestGlobalSearch alloc] init];
  return self;
}
- (RequestGlobalSearchBuilder*) clone {
  return [RequestGlobalSearch builderWithPrototype:resultRequestGlobalSearch];
}
- (RequestGlobalSearch*) defaultInstance {
  return [RequestGlobalSearch defaultInstance];
}
- (RequestGlobalSearch*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RequestGlobalSearch*) buildPartial {
  RequestGlobalSearch* returnMe = resultRequestGlobalSearch;
  self.resultRequestGlobalSearch = nil;
  return returnMe;
}
- (RequestGlobalSearchBuilder*) mergeFrom:(RequestGlobalSearch*) other {
  if (other == [RequestGlobalSearch defaultInstance]) {
    return self;
  }
  if (other.hasQuery) {
    [self setQuery:other.query];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RequestGlobalSearchBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RequestGlobalSearchBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setQuery:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasQuery {
  return resultRequestGlobalSearch.hasQuery;
}
- (NSString*) query {
  return resultRequestGlobalSearch.query;
}
- (RequestGlobalSearchBuilder*) setQuery:(NSString*) value {
  resultRequestGlobalSearch.hasQuery = YES;
  resultRequestGlobalSearch.query = value;
  return self;
}
- (RequestGlobalSearchBuilder*) clearQuery {
  resultRequestGlobalSearch.hasQuery = NO;
  resultRequestGlobalSearch.query = @"";
  return self;
}
@end

@interface ResponseGlobalSearch ()
@property SInt32 id;
@property (strong) NSString* query;
@property (strong) NSString* searchProvider;
@property (strong) NSMutableArray * songMetadataArray;
@property (strong) NSData* searchProviderIcon;
@end

@implementation ResponseGlobalSearch

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasQuery {
  return !!hasQuery_;
}
- (void) setHasQuery:(BOOL) _value_ {
  hasQuery_ = !!_value_;
}
@synthesize query;
- (BOOL) hasSearchProvider {
  return !!hasSearchProvider_;
}
- (void) setHasSearchProvider:(BOOL) _value_ {
  hasSearchProvider_ = !!_value_;
}
@synthesize searchProvider;
@synthesize songMetadataArray;
@dynamic songMetadata;
- (BOOL) hasSearchProviderIcon {
  return !!hasSearchProviderIcon_;
}
- (void) setHasSearchProviderIcon:(BOOL) _value_ {
  hasSearchProviderIcon_ = !!_value_;
}
@synthesize searchProviderIcon;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
    self.query = @"";
    self.searchProvider = @"";
    self.searchProviderIcon = [NSData data];
  }
  return self;
}
static ResponseGlobalSearch* defaultResponseGlobalSearchInstance = nil;
+ (void) initialize {
  if (self == [ResponseGlobalSearch class]) {
    defaultResponseGlobalSearchInstance = [[ResponseGlobalSearch alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseGlobalSearchInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseGlobalSearchInstance;
}
- (NSArray *)songMetadata {
  return songMetadataArray;
}
- (SongMetadata*)songMetadataAtIndex:(NSUInteger)index {
  return [songMetadataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasQuery) {
    [output writeString:2 value:self.query];
  }
  if (self.hasSearchProvider) {
    [output writeString:3 value:self.searchProvider];
  }
  [self.songMetadataArray enumerateObjectsUsingBlock:^(SongMetadata *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  if (self.hasSearchProviderIcon) {
    [output writeData:5 value:self.searchProviderIcon];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasQuery) {
    size_ += computeStringSize(2, self.query);
  }
  if (self.hasSearchProvider) {
    size_ += computeStringSize(3, self.searchProvider);
  }
  [self.songMetadataArray enumerateObjectsUsingBlock:^(SongMetadata *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  if (self.hasSearchProviderIcon) {
    size_ += computeDataSize(5, self.searchProviderIcon);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseGlobalSearch*) parseFromData:(NSData*) data {
  return (ResponseGlobalSearch*)[[[ResponseGlobalSearch builder] mergeFromData:data] build];
}
+ (ResponseGlobalSearch*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseGlobalSearch*)[[[ResponseGlobalSearch builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseGlobalSearch*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseGlobalSearch*)[[[ResponseGlobalSearch builder] mergeFromInputStream:input] build];
}
+ (ResponseGlobalSearch*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseGlobalSearch*)[[[ResponseGlobalSearch builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseGlobalSearch*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseGlobalSearch*)[[[ResponseGlobalSearch builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseGlobalSearch*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseGlobalSearch*)[[[ResponseGlobalSearch builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseGlobalSearchBuilder*) builder {
  return [[ResponseGlobalSearchBuilder alloc] init];
}
+ (ResponseGlobalSearchBuilder*) builderWithPrototype:(ResponseGlobalSearch*) prototype {
  return [[ResponseGlobalSearch builder] mergeFrom:prototype];
}
- (ResponseGlobalSearchBuilder*) builder {
  return [ResponseGlobalSearch builder];
}
- (ResponseGlobalSearchBuilder*) toBuilder {
  return [ResponseGlobalSearch builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  if (self.hasQuery) {
    [output appendFormat:@"%@%@: %@\n", indent, @"query", self.query];
  }
  if (self.hasSearchProvider) {
    [output appendFormat:@"%@%@: %@\n", indent, @"searchProvider", self.searchProvider];
  }
  [self.songMetadataArray enumerateObjectsUsingBlock:^(SongMetadata *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"songMetadata"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasSearchProviderIcon) {
    [output appendFormat:@"%@%@: %@\n", indent, @"searchProviderIcon", self.searchProviderIcon];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  if (self.hasQuery) {
    [dictionary setObject: self.query forKey: @"query"];
  }
  if (self.hasSearchProvider) {
    [dictionary setObject: self.searchProvider forKey: @"searchProvider"];
  }
  for (SongMetadata* element in self.songMetadataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"songMetadata"];
  }
  if (self.hasSearchProviderIcon) {
    [dictionary setObject: self.searchProviderIcon forKey: @"searchProviderIcon"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseGlobalSearch class]]) {
    return NO;
  }
  ResponseGlobalSearch *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasQuery == otherMessage.hasQuery &&
      (!self.hasQuery || [self.query isEqual:otherMessage.query]) &&
      self.hasSearchProvider == otherMessage.hasSearchProvider &&
      (!self.hasSearchProvider || [self.searchProvider isEqual:otherMessage.searchProvider]) &&
      [self.songMetadataArray isEqualToArray:otherMessage.songMetadataArray] &&
      self.hasSearchProviderIcon == otherMessage.hasSearchProviderIcon &&
      (!self.hasSearchProviderIcon || [self.searchProviderIcon isEqual:otherMessage.searchProviderIcon]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  if (self.hasQuery) {
    hashCode = hashCode * 31 + [self.query hash];
  }
  if (self.hasSearchProvider) {
    hashCode = hashCode * 31 + [self.searchProvider hash];
  }
  [self.songMetadataArray enumerateObjectsUsingBlock:^(SongMetadata *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasSearchProviderIcon) {
    hashCode = hashCode * 31 + [self.searchProviderIcon hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseGlobalSearchBuilder()
@property (strong) ResponseGlobalSearch* resultResponseGlobalSearch;
@end

@implementation ResponseGlobalSearchBuilder
@synthesize resultResponseGlobalSearch;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponseGlobalSearch = [[ResponseGlobalSearch alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponseGlobalSearch;
}
- (ResponseGlobalSearchBuilder*) clear {
  self.resultResponseGlobalSearch = [[ResponseGlobalSearch alloc] init];
  return self;
}
- (ResponseGlobalSearchBuilder*) clone {
  return [ResponseGlobalSearch builderWithPrototype:resultResponseGlobalSearch];
}
- (ResponseGlobalSearch*) defaultInstance {
  return [ResponseGlobalSearch defaultInstance];
}
- (ResponseGlobalSearch*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseGlobalSearch*) buildPartial {
  ResponseGlobalSearch* returnMe = resultResponseGlobalSearch;
  self.resultResponseGlobalSearch = nil;
  return returnMe;
}
- (ResponseGlobalSearchBuilder*) mergeFrom:(ResponseGlobalSearch*) other {
  if (other == [ResponseGlobalSearch defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasQuery) {
    [self setQuery:other.query];
  }
  if (other.hasSearchProvider) {
    [self setSearchProvider:other.searchProvider];
  }
  if (other.songMetadataArray.count > 0) {
    if (resultResponseGlobalSearch.songMetadataArray == nil) {
      resultResponseGlobalSearch.songMetadataArray = [[NSMutableArray alloc] initWithArray:other.songMetadataArray];
    } else {
      [resultResponseGlobalSearch.songMetadataArray addObjectsFromArray:other.songMetadataArray];
    }
  }
  if (other.hasSearchProviderIcon) {
    [self setSearchProviderIcon:other.searchProviderIcon];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseGlobalSearchBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseGlobalSearchBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setQuery:[input readString]];
        break;
      }
      case 26: {
        [self setSearchProvider:[input readString]];
        break;
      }
      case 34: {
        SongMetadataBuilder* subBuilder = [SongMetadata builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSongMetadata:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setSearchProviderIcon:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultResponseGlobalSearch.hasId;
}
- (SInt32) id {
  return resultResponseGlobalSearch.id;
}
- (ResponseGlobalSearchBuilder*) setId:(SInt32) value {
  resultResponseGlobalSearch.hasId = YES;
  resultResponseGlobalSearch.id = value;
  return self;
}
- (ResponseGlobalSearchBuilder*) clearId {
  resultResponseGlobalSearch.hasId = NO;
  resultResponseGlobalSearch.id = 0;
  return self;
}
- (BOOL) hasQuery {
  return resultResponseGlobalSearch.hasQuery;
}
- (NSString*) query {
  return resultResponseGlobalSearch.query;
}
- (ResponseGlobalSearchBuilder*) setQuery:(NSString*) value {
  resultResponseGlobalSearch.hasQuery = YES;
  resultResponseGlobalSearch.query = value;
  return self;
}
- (ResponseGlobalSearchBuilder*) clearQuery {
  resultResponseGlobalSearch.hasQuery = NO;
  resultResponseGlobalSearch.query = @"";
  return self;
}
- (BOOL) hasSearchProvider {
  return resultResponseGlobalSearch.hasSearchProvider;
}
- (NSString*) searchProvider {
  return resultResponseGlobalSearch.searchProvider;
}
- (ResponseGlobalSearchBuilder*) setSearchProvider:(NSString*) value {
  resultResponseGlobalSearch.hasSearchProvider = YES;
  resultResponseGlobalSearch.searchProvider = value;
  return self;
}
- (ResponseGlobalSearchBuilder*) clearSearchProvider {
  resultResponseGlobalSearch.hasSearchProvider = NO;
  resultResponseGlobalSearch.searchProvider = @"";
  return self;
}
- (NSMutableArray *)songMetadata {
  return resultResponseGlobalSearch.songMetadataArray;
}
- (SongMetadata*)songMetadataAtIndex:(NSUInteger)index {
  return [resultResponseGlobalSearch songMetadataAtIndex:index];
}
- (ResponseGlobalSearchBuilder *)addSongMetadata:(SongMetadata*)value {
  if (resultResponseGlobalSearch.songMetadataArray == nil) {
    resultResponseGlobalSearch.songMetadataArray = [[NSMutableArray alloc]init];
  }
  [resultResponseGlobalSearch.songMetadataArray addObject:value];
  return self;
}
- (ResponseGlobalSearchBuilder *)setSongMetadataArray:(NSArray *)array {
  resultResponseGlobalSearch.songMetadataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ResponseGlobalSearchBuilder *)clearSongMetadata {
  resultResponseGlobalSearch.songMetadataArray = nil;
  return self;
}
- (BOOL) hasSearchProviderIcon {
  return resultResponseGlobalSearch.hasSearchProviderIcon;
}
- (NSData*) searchProviderIcon {
  return resultResponseGlobalSearch.searchProviderIcon;
}
- (ResponseGlobalSearchBuilder*) setSearchProviderIcon:(NSData*) value {
  resultResponseGlobalSearch.hasSearchProviderIcon = YES;
  resultResponseGlobalSearch.searchProviderIcon = value;
  return self;
}
- (ResponseGlobalSearchBuilder*) clearSearchProviderIcon {
  resultResponseGlobalSearch.hasSearchProviderIcon = NO;
  resultResponseGlobalSearch.searchProviderIcon = [NSData data];
  return self;
}
@end

@interface ResponseTranscoderStatus ()
@property SInt32 processed;
@property SInt32 total;
@end

@implementation ResponseTranscoderStatus

- (BOOL) hasProcessed {
  return !!hasProcessed_;
}
- (void) setHasProcessed:(BOOL) _value_ {
  hasProcessed_ = !!_value_;
}
@synthesize processed;
- (BOOL) hasTotal {
  return !!hasTotal_;
}
- (void) setHasTotal:(BOOL) _value_ {
  hasTotal_ = !!_value_;
}
@synthesize total;
- (instancetype) init {
  if ((self = [super init])) {
    self.processed = 0;
    self.total = 0;
  }
  return self;
}
static ResponseTranscoderStatus* defaultResponseTranscoderStatusInstance = nil;
+ (void) initialize {
  if (self == [ResponseTranscoderStatus class]) {
    defaultResponseTranscoderStatusInstance = [[ResponseTranscoderStatus alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseTranscoderStatusInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseTranscoderStatusInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProcessed) {
    [output writeInt32:1 value:self.processed];
  }
  if (self.hasTotal) {
    [output writeInt32:2 value:self.total];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasProcessed) {
    size_ += computeInt32Size(1, self.processed);
  }
  if (self.hasTotal) {
    size_ += computeInt32Size(2, self.total);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseTranscoderStatus*) parseFromData:(NSData*) data {
  return (ResponseTranscoderStatus*)[[[ResponseTranscoderStatus builder] mergeFromData:data] build];
}
+ (ResponseTranscoderStatus*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseTranscoderStatus*)[[[ResponseTranscoderStatus builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseTranscoderStatus*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseTranscoderStatus*)[[[ResponseTranscoderStatus builder] mergeFromInputStream:input] build];
}
+ (ResponseTranscoderStatus*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseTranscoderStatus*)[[[ResponseTranscoderStatus builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseTranscoderStatus*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseTranscoderStatus*)[[[ResponseTranscoderStatus builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseTranscoderStatus*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseTranscoderStatus*)[[[ResponseTranscoderStatus builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseTranscoderStatusBuilder*) builder {
  return [[ResponseTranscoderStatusBuilder alloc] init];
}
+ (ResponseTranscoderStatusBuilder*) builderWithPrototype:(ResponseTranscoderStatus*) prototype {
  return [[ResponseTranscoderStatus builder] mergeFrom:prototype];
}
- (ResponseTranscoderStatusBuilder*) builder {
  return [ResponseTranscoderStatus builder];
}
- (ResponseTranscoderStatusBuilder*) toBuilder {
  return [ResponseTranscoderStatus builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProcessed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"processed", [NSNumber numberWithInteger:self.processed]];
  }
  if (self.hasTotal) {
    [output appendFormat:@"%@%@: %@\n", indent, @"total", [NSNumber numberWithInteger:self.total]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasProcessed) {
    [dictionary setObject: [NSNumber numberWithInteger:self.processed] forKey: @"processed"];
  }
  if (self.hasTotal) {
    [dictionary setObject: [NSNumber numberWithInteger:self.total] forKey: @"total"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseTranscoderStatus class]]) {
    return NO;
  }
  ResponseTranscoderStatus *otherMessage = other;
  return
      self.hasProcessed == otherMessage.hasProcessed &&
      (!self.hasProcessed || self.processed == otherMessage.processed) &&
      self.hasTotal == otherMessage.hasTotal &&
      (!self.hasTotal || self.total == otherMessage.total) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasProcessed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.processed] hash];
  }
  if (self.hasTotal) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.total] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseTranscoderStatusBuilder()
@property (strong) ResponseTranscoderStatus* resultResponseTranscoderStatus;
@end

@implementation ResponseTranscoderStatusBuilder
@synthesize resultResponseTranscoderStatus;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponseTranscoderStatus = [[ResponseTranscoderStatus alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponseTranscoderStatus;
}
- (ResponseTranscoderStatusBuilder*) clear {
  self.resultResponseTranscoderStatus = [[ResponseTranscoderStatus alloc] init];
  return self;
}
- (ResponseTranscoderStatusBuilder*) clone {
  return [ResponseTranscoderStatus builderWithPrototype:resultResponseTranscoderStatus];
}
- (ResponseTranscoderStatus*) defaultInstance {
  return [ResponseTranscoderStatus defaultInstance];
}
- (ResponseTranscoderStatus*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseTranscoderStatus*) buildPartial {
  ResponseTranscoderStatus* returnMe = resultResponseTranscoderStatus;
  self.resultResponseTranscoderStatus = nil;
  return returnMe;
}
- (ResponseTranscoderStatusBuilder*) mergeFrom:(ResponseTranscoderStatus*) other {
  if (other == [ResponseTranscoderStatus defaultInstance]) {
    return self;
  }
  if (other.hasProcessed) {
    [self setProcessed:other.processed];
  }
  if (other.hasTotal) {
    [self setTotal:other.total];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseTranscoderStatusBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseTranscoderStatusBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setProcessed:[input readInt32]];
        break;
      }
      case 16: {
        [self setTotal:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasProcessed {
  return resultResponseTranscoderStatus.hasProcessed;
}
- (SInt32) processed {
  return resultResponseTranscoderStatus.processed;
}
- (ResponseTranscoderStatusBuilder*) setProcessed:(SInt32) value {
  resultResponseTranscoderStatus.hasProcessed = YES;
  resultResponseTranscoderStatus.processed = value;
  return self;
}
- (ResponseTranscoderStatusBuilder*) clearProcessed {
  resultResponseTranscoderStatus.hasProcessed = NO;
  resultResponseTranscoderStatus.processed = 0;
  return self;
}
- (BOOL) hasTotal {
  return resultResponseTranscoderStatus.hasTotal;
}
- (SInt32) total {
  return resultResponseTranscoderStatus.total;
}
- (ResponseTranscoderStatusBuilder*) setTotal:(SInt32) value {
  resultResponseTranscoderStatus.hasTotal = YES;
  resultResponseTranscoderStatus.total = value;
  return self;
}
- (ResponseTranscoderStatusBuilder*) clearTotal {
  resultResponseTranscoderStatus.hasTotal = NO;
  resultResponseTranscoderStatus.total = 0;
  return self;
}
@end

@interface ResponseGlobalSearchStatus ()
@property SInt32 id;
@property (strong) NSString* query;
@property GlobalSearchStatus status;
@end

@implementation ResponseGlobalSearchStatus

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasQuery {
  return !!hasQuery_;
}
- (void) setHasQuery:(BOOL) _value_ {
  hasQuery_ = !!_value_;
}
@synthesize query;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
    self.query = @"";
    self.status = GlobalSearchStatusGlobalSearchStarted;
  }
  return self;
}
static ResponseGlobalSearchStatus* defaultResponseGlobalSearchStatusInstance = nil;
+ (void) initialize {
  if (self == [ResponseGlobalSearchStatus class]) {
    defaultResponseGlobalSearchStatusInstance = [[ResponseGlobalSearchStatus alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseGlobalSearchStatusInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseGlobalSearchStatusInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasQuery) {
    [output writeString:2 value:self.query];
  }
  if (self.hasStatus) {
    [output writeEnum:3 value:self.status];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasQuery) {
    size_ += computeStringSize(2, self.query);
  }
  if (self.hasStatus) {
    size_ += computeEnumSize(3, self.status);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseGlobalSearchStatus*) parseFromData:(NSData*) data {
  return (ResponseGlobalSearchStatus*)[[[ResponseGlobalSearchStatus builder] mergeFromData:data] build];
}
+ (ResponseGlobalSearchStatus*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseGlobalSearchStatus*)[[[ResponseGlobalSearchStatus builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseGlobalSearchStatus*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseGlobalSearchStatus*)[[[ResponseGlobalSearchStatus builder] mergeFromInputStream:input] build];
}
+ (ResponseGlobalSearchStatus*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseGlobalSearchStatus*)[[[ResponseGlobalSearchStatus builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseGlobalSearchStatus*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseGlobalSearchStatus*)[[[ResponseGlobalSearchStatus builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseGlobalSearchStatus*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseGlobalSearchStatus*)[[[ResponseGlobalSearchStatus builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseGlobalSearchStatusBuilder*) builder {
  return [[ResponseGlobalSearchStatusBuilder alloc] init];
}
+ (ResponseGlobalSearchStatusBuilder*) builderWithPrototype:(ResponseGlobalSearchStatus*) prototype {
  return [[ResponseGlobalSearchStatus builder] mergeFrom:prototype];
}
- (ResponseGlobalSearchStatusBuilder*) builder {
  return [ResponseGlobalSearchStatus builder];
}
- (ResponseGlobalSearchStatusBuilder*) toBuilder {
  return [ResponseGlobalSearchStatus builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  if (self.hasQuery) {
    [output appendFormat:@"%@%@: %@\n", indent, @"query", self.query];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", NSStringFromGlobalSearchStatus(self.status)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  if (self.hasQuery) {
    [dictionary setObject: self.query forKey: @"query"];
  }
  if (self.hasStatus) {
    [dictionary setObject: @(self.status) forKey: @"status"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseGlobalSearchStatus class]]) {
    return NO;
  }
  ResponseGlobalSearchStatus *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasQuery == otherMessage.hasQuery &&
      (!self.hasQuery || [self.query isEqual:otherMessage.query]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  if (self.hasQuery) {
    hashCode = hashCode * 31 + [self.query hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseGlobalSearchStatusBuilder()
@property (strong) ResponseGlobalSearchStatus* resultResponseGlobalSearchStatus;
@end

@implementation ResponseGlobalSearchStatusBuilder
@synthesize resultResponseGlobalSearchStatus;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponseGlobalSearchStatus = [[ResponseGlobalSearchStatus alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponseGlobalSearchStatus;
}
- (ResponseGlobalSearchStatusBuilder*) clear {
  self.resultResponseGlobalSearchStatus = [[ResponseGlobalSearchStatus alloc] init];
  return self;
}
- (ResponseGlobalSearchStatusBuilder*) clone {
  return [ResponseGlobalSearchStatus builderWithPrototype:resultResponseGlobalSearchStatus];
}
- (ResponseGlobalSearchStatus*) defaultInstance {
  return [ResponseGlobalSearchStatus defaultInstance];
}
- (ResponseGlobalSearchStatus*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseGlobalSearchStatus*) buildPartial {
  ResponseGlobalSearchStatus* returnMe = resultResponseGlobalSearchStatus;
  self.resultResponseGlobalSearchStatus = nil;
  return returnMe;
}
- (ResponseGlobalSearchStatusBuilder*) mergeFrom:(ResponseGlobalSearchStatus*) other {
  if (other == [ResponseGlobalSearchStatus defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasQuery) {
    [self setQuery:other.query];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseGlobalSearchStatusBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseGlobalSearchStatusBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setQuery:[input readString]];
        break;
      }
      case 24: {
        GlobalSearchStatus value = (GlobalSearchStatus)[input readEnum];
        if (GlobalSearchStatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultResponseGlobalSearchStatus.hasId;
}
- (SInt32) id {
  return resultResponseGlobalSearchStatus.id;
}
- (ResponseGlobalSearchStatusBuilder*) setId:(SInt32) value {
  resultResponseGlobalSearchStatus.hasId = YES;
  resultResponseGlobalSearchStatus.id = value;
  return self;
}
- (ResponseGlobalSearchStatusBuilder*) clearId {
  resultResponseGlobalSearchStatus.hasId = NO;
  resultResponseGlobalSearchStatus.id = 0;
  return self;
}
- (BOOL) hasQuery {
  return resultResponseGlobalSearchStatus.hasQuery;
}
- (NSString*) query {
  return resultResponseGlobalSearchStatus.query;
}
- (ResponseGlobalSearchStatusBuilder*) setQuery:(NSString*) value {
  resultResponseGlobalSearchStatus.hasQuery = YES;
  resultResponseGlobalSearchStatus.query = value;
  return self;
}
- (ResponseGlobalSearchStatusBuilder*) clearQuery {
  resultResponseGlobalSearchStatus.hasQuery = NO;
  resultResponseGlobalSearchStatus.query = @"";
  return self;
}
- (BOOL) hasStatus {
  return resultResponseGlobalSearchStatus.hasStatus;
}
- (GlobalSearchStatus) status {
  return resultResponseGlobalSearchStatus.status;
}
- (ResponseGlobalSearchStatusBuilder*) setStatus:(GlobalSearchStatus) value {
  resultResponseGlobalSearchStatus.hasStatus = YES;
  resultResponseGlobalSearchStatus.status = value;
  return self;
}
- (ResponseGlobalSearchStatusBuilder*) clearStatus {
  resultResponseGlobalSearchStatus.hasStatus = NO;
  resultResponseGlobalSearchStatus.status = GlobalSearchStatusGlobalSearchStarted;
  return self;
}
@end

@interface Message ()
@property SInt32 version;
@property MsgType type;
@property (strong) RequestConnect* requestConnect;
@property (strong) RequestPlaylists* requestPlaylists;
@property (strong) RequestPlaylistSongs* requestPlaylistSongs;
@property (strong) RequestChangeSong* requestChangeSong;
@property (strong) RequestSetVolume* requestSetVolume;
@property (strong) RequestSetTrackPosition* requestSetTrackPosition;
@property (strong) RequestInsertUrls* requestInsertUrls;
@property (strong) RequestRemoveSongs* requestRemoveSongs;
@property (strong) RequestOpenPlaylist* requestOpenPlaylist;
@property (strong) RequestClosePlaylist* requestClosePlaylist;
@property (strong) RequestDownloadSongs* requestDownloadSongs;
@property (strong) RequestRateSong* requestRateSong;
@property (strong) RequestGlobalSearch* requestGlobalSearch;
@property (strong) Repeat* repeat;
@property (strong) Shuffle* shuffle;
@property (strong) ResponseClementineInfo* responseClementineInfo;
@property (strong) ResponseCurrentMetadata* responseCurrentMetadata;
@property (strong) ResponsePlaylists* responsePlaylists;
@property (strong) ResponsePlaylistSongs* responsePlaylistSongs;
@property (strong) ResponseEngineStateChanged* responseEngineStateChanged;
@property (strong) ResponseUpdateTrackPosition* responseUpdateTrackPosition;
@property (strong) ResponseDisconnect* responseDisconnect;
@property (strong) ResponseActiveChanged* responseActiveChanged;
@property (strong) ResponseLyrics* responseLyrics;
@property (strong) ResponseSongFileChunk* responseSongFileChunk;
@property (strong) ResponseSongOffer* responseSongOffer;
@property (strong) ResponseLibraryChunk* responseLibraryChunk;
@property (strong) ResponseDownloadTotalSize* responseDownloadTotalSize;
@property (strong) ResponseGlobalSearch* responseGlobalSearch;
@property (strong) ResponseTranscoderStatus* responseTranscoderStatus;
@property (strong) ResponseGlobalSearchStatus* responseGlobalSearchStatus;
@end

@implementation Message

- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasRequestConnect {
  return !!hasRequestConnect_;
}
- (void) setHasRequestConnect:(BOOL) _value_ {
  hasRequestConnect_ = !!_value_;
}
@synthesize requestConnect;
- (BOOL) hasRequestPlaylists {
  return !!hasRequestPlaylists_;
}
- (void) setHasRequestPlaylists:(BOOL) _value_ {
  hasRequestPlaylists_ = !!_value_;
}
@synthesize requestPlaylists;
- (BOOL) hasRequestPlaylistSongs {
  return !!hasRequestPlaylistSongs_;
}
- (void) setHasRequestPlaylistSongs:(BOOL) _value_ {
  hasRequestPlaylistSongs_ = !!_value_;
}
@synthesize requestPlaylistSongs;
- (BOOL) hasRequestChangeSong {
  return !!hasRequestChangeSong_;
}
- (void) setHasRequestChangeSong:(BOOL) _value_ {
  hasRequestChangeSong_ = !!_value_;
}
@synthesize requestChangeSong;
- (BOOL) hasRequestSetVolume {
  return !!hasRequestSetVolume_;
}
- (void) setHasRequestSetVolume:(BOOL) _value_ {
  hasRequestSetVolume_ = !!_value_;
}
@synthesize requestSetVolume;
- (BOOL) hasRequestSetTrackPosition {
  return !!hasRequestSetTrackPosition_;
}
- (void) setHasRequestSetTrackPosition:(BOOL) _value_ {
  hasRequestSetTrackPosition_ = !!_value_;
}
@synthesize requestSetTrackPosition;
- (BOOL) hasRequestInsertUrls {
  return !!hasRequestInsertUrls_;
}
- (void) setHasRequestInsertUrls:(BOOL) _value_ {
  hasRequestInsertUrls_ = !!_value_;
}
@synthesize requestInsertUrls;
- (BOOL) hasRequestRemoveSongs {
  return !!hasRequestRemoveSongs_;
}
- (void) setHasRequestRemoveSongs:(BOOL) _value_ {
  hasRequestRemoveSongs_ = !!_value_;
}
@synthesize requestRemoveSongs;
- (BOOL) hasRequestOpenPlaylist {
  return !!hasRequestOpenPlaylist_;
}
- (void) setHasRequestOpenPlaylist:(BOOL) _value_ {
  hasRequestOpenPlaylist_ = !!_value_;
}
@synthesize requestOpenPlaylist;
- (BOOL) hasRequestClosePlaylist {
  return !!hasRequestClosePlaylist_;
}
- (void) setHasRequestClosePlaylist:(BOOL) _value_ {
  hasRequestClosePlaylist_ = !!_value_;
}
@synthesize requestClosePlaylist;
- (BOOL) hasRequestDownloadSongs {
  return !!hasRequestDownloadSongs_;
}
- (void) setHasRequestDownloadSongs:(BOOL) _value_ {
  hasRequestDownloadSongs_ = !!_value_;
}
@synthesize requestDownloadSongs;
- (BOOL) hasRequestRateSong {
  return !!hasRequestRateSong_;
}
- (void) setHasRequestRateSong:(BOOL) _value_ {
  hasRequestRateSong_ = !!_value_;
}
@synthesize requestRateSong;
- (BOOL) hasRequestGlobalSearch {
  return !!hasRequestGlobalSearch_;
}
- (void) setHasRequestGlobalSearch:(BOOL) _value_ {
  hasRequestGlobalSearch_ = !!_value_;
}
@synthesize requestGlobalSearch;
- (BOOL) hasRepeat {
  return !!hasRepeat_;
}
- (void) setHasRepeat:(BOOL) _value_ {
  hasRepeat_ = !!_value_;
}
@synthesize repeat;
- (BOOL) hasShuffle {
  return !!hasShuffle_;
}
- (void) setHasShuffle:(BOOL) _value_ {
  hasShuffle_ = !!_value_;
}
@synthesize shuffle;
- (BOOL) hasResponseClementineInfo {
  return !!hasResponseClementineInfo_;
}
- (void) setHasResponseClementineInfo:(BOOL) _value_ {
  hasResponseClementineInfo_ = !!_value_;
}
@synthesize responseClementineInfo;
- (BOOL) hasResponseCurrentMetadata {
  return !!hasResponseCurrentMetadata_;
}
- (void) setHasResponseCurrentMetadata:(BOOL) _value_ {
  hasResponseCurrentMetadata_ = !!_value_;
}
@synthesize responseCurrentMetadata;
- (BOOL) hasResponsePlaylists {
  return !!hasResponsePlaylists_;
}
- (void) setHasResponsePlaylists:(BOOL) _value_ {
  hasResponsePlaylists_ = !!_value_;
}
@synthesize responsePlaylists;
- (BOOL) hasResponsePlaylistSongs {
  return !!hasResponsePlaylistSongs_;
}
- (void) setHasResponsePlaylistSongs:(BOOL) _value_ {
  hasResponsePlaylistSongs_ = !!_value_;
}
@synthesize responsePlaylistSongs;
- (BOOL) hasResponseEngineStateChanged {
  return !!hasResponseEngineStateChanged_;
}
- (void) setHasResponseEngineStateChanged:(BOOL) _value_ {
  hasResponseEngineStateChanged_ = !!_value_;
}
@synthesize responseEngineStateChanged;
- (BOOL) hasResponseUpdateTrackPosition {
  return !!hasResponseUpdateTrackPosition_;
}
- (void) setHasResponseUpdateTrackPosition:(BOOL) _value_ {
  hasResponseUpdateTrackPosition_ = !!_value_;
}
@synthesize responseUpdateTrackPosition;
- (BOOL) hasResponseDisconnect {
  return !!hasResponseDisconnect_;
}
- (void) setHasResponseDisconnect:(BOOL) _value_ {
  hasResponseDisconnect_ = !!_value_;
}
@synthesize responseDisconnect;
- (BOOL) hasResponseActiveChanged {
  return !!hasResponseActiveChanged_;
}
- (void) setHasResponseActiveChanged:(BOOL) _value_ {
  hasResponseActiveChanged_ = !!_value_;
}
@synthesize responseActiveChanged;
- (BOOL) hasResponseLyrics {
  return !!hasResponseLyrics_;
}
- (void) setHasResponseLyrics:(BOOL) _value_ {
  hasResponseLyrics_ = !!_value_;
}
@synthesize responseLyrics;
- (BOOL) hasResponseSongFileChunk {
  return !!hasResponseSongFileChunk_;
}
- (void) setHasResponseSongFileChunk:(BOOL) _value_ {
  hasResponseSongFileChunk_ = !!_value_;
}
@synthesize responseSongFileChunk;
- (BOOL) hasResponseSongOffer {
  return !!hasResponseSongOffer_;
}
- (void) setHasResponseSongOffer:(BOOL) _value_ {
  hasResponseSongOffer_ = !!_value_;
}
@synthesize responseSongOffer;
- (BOOL) hasResponseLibraryChunk {
  return !!hasResponseLibraryChunk_;
}
- (void) setHasResponseLibraryChunk:(BOOL) _value_ {
  hasResponseLibraryChunk_ = !!_value_;
}
@synthesize responseLibraryChunk;
- (BOOL) hasResponseDownloadTotalSize {
  return !!hasResponseDownloadTotalSize_;
}
- (void) setHasResponseDownloadTotalSize:(BOOL) _value_ {
  hasResponseDownloadTotalSize_ = !!_value_;
}
@synthesize responseDownloadTotalSize;
- (BOOL) hasResponseGlobalSearch {
  return !!hasResponseGlobalSearch_;
}
- (void) setHasResponseGlobalSearch:(BOOL) _value_ {
  hasResponseGlobalSearch_ = !!_value_;
}
@synthesize responseGlobalSearch;
- (BOOL) hasResponseTranscoderStatus {
  return !!hasResponseTranscoderStatus_;
}
- (void) setHasResponseTranscoderStatus:(BOOL) _value_ {
  hasResponseTranscoderStatus_ = !!_value_;
}
@synthesize responseTranscoderStatus;
- (BOOL) hasResponseGlobalSearchStatus {
  return !!hasResponseGlobalSearchStatus_;
}
- (void) setHasResponseGlobalSearchStatus:(BOOL) _value_ {
  hasResponseGlobalSearchStatus_ = !!_value_;
}
@synthesize responseGlobalSearchStatus;
- (instancetype) init {
  if ((self = [super init])) {
    self.version = 21;
    self.type = MsgTypeUnknown;
    self.requestConnect = [RequestConnect defaultInstance];
    self.requestPlaylists = [RequestPlaylists defaultInstance];
    self.requestPlaylistSongs = [RequestPlaylistSongs defaultInstance];
    self.requestChangeSong = [RequestChangeSong defaultInstance];
    self.requestSetVolume = [RequestSetVolume defaultInstance];
    self.requestSetTrackPosition = [RequestSetTrackPosition defaultInstance];
    self.requestInsertUrls = [RequestInsertUrls defaultInstance];
    self.requestRemoveSongs = [RequestRemoveSongs defaultInstance];
    self.requestOpenPlaylist = [RequestOpenPlaylist defaultInstance];
    self.requestClosePlaylist = [RequestClosePlaylist defaultInstance];
    self.requestDownloadSongs = [RequestDownloadSongs defaultInstance];
    self.requestRateSong = [RequestRateSong defaultInstance];
    self.requestGlobalSearch = [RequestGlobalSearch defaultInstance];
    self.repeat = [Repeat defaultInstance];
    self.shuffle = [Shuffle defaultInstance];
    self.responseClementineInfo = [ResponseClementineInfo defaultInstance];
    self.responseCurrentMetadata = [ResponseCurrentMetadata defaultInstance];
    self.responsePlaylists = [ResponsePlaylists defaultInstance];
    self.responsePlaylistSongs = [ResponsePlaylistSongs defaultInstance];
    self.responseEngineStateChanged = [ResponseEngineStateChanged defaultInstance];
    self.responseUpdateTrackPosition = [ResponseUpdateTrackPosition defaultInstance];
    self.responseDisconnect = [ResponseDisconnect defaultInstance];
    self.responseActiveChanged = [ResponseActiveChanged defaultInstance];
    self.responseLyrics = [ResponseLyrics defaultInstance];
    self.responseSongFileChunk = [ResponseSongFileChunk defaultInstance];
    self.responseSongOffer = [ResponseSongOffer defaultInstance];
    self.responseLibraryChunk = [ResponseLibraryChunk defaultInstance];
    self.responseDownloadTotalSize = [ResponseDownloadTotalSize defaultInstance];
    self.responseGlobalSearch = [ResponseGlobalSearch defaultInstance];
    self.responseTranscoderStatus = [ResponseTranscoderStatus defaultInstance];
    self.responseGlobalSearchStatus = [ResponseGlobalSearchStatus defaultInstance];
  }
  return self;
}
static Message* defaultMessageInstance = nil;
+ (void) initialize {
  if (self == [Message class]) {
    defaultMessageInstance = [[Message alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasVersion) {
    [output writeInt32:1 value:self.version];
  }
  if (self.hasType) {
    [output writeEnum:2 value:self.type];
  }
  if (self.hasRequestPlaylistSongs) {
    [output writeMessage:10 value:self.requestPlaylistSongs];
  }
  if (self.hasRequestChangeSong) {
    [output writeMessage:11 value:self.requestChangeSong];
  }
  if (self.hasRequestSetVolume) {
    [output writeMessage:12 value:self.requestSetVolume];
  }
  if (self.hasRepeat) {
    [output writeMessage:13 value:self.repeat];
  }
  if (self.hasShuffle) {
    [output writeMessage:14 value:self.shuffle];
  }
  if (self.hasResponseClementineInfo) {
    [output writeMessage:15 value:self.responseClementineInfo];
  }
  if (self.hasResponseCurrentMetadata) {
    [output writeMessage:16 value:self.responseCurrentMetadata];
  }
  if (self.hasResponsePlaylists) {
    [output writeMessage:17 value:self.responsePlaylists];
  }
  if (self.hasResponsePlaylistSongs) {
    [output writeMessage:18 value:self.responsePlaylistSongs];
  }
  if (self.hasResponseEngineStateChanged) {
    [output writeMessage:19 value:self.responseEngineStateChanged];
  }
  if (self.hasResponseUpdateTrackPosition) {
    [output writeMessage:20 value:self.responseUpdateTrackPosition];
  }
  if (self.hasRequestConnect) {
    [output writeMessage:21 value:self.requestConnect];
  }
  if (self.hasResponseDisconnect) {
    [output writeMessage:22 value:self.responseDisconnect];
  }
  if (self.hasRequestSetTrackPosition) {
    [output writeMessage:23 value:self.requestSetTrackPosition];
  }
  if (self.hasResponseActiveChanged) {
    [output writeMessage:24 value:self.responseActiveChanged];
  }
  if (self.hasRequestInsertUrls) {
    [output writeMessage:25 value:self.requestInsertUrls];
  }
  if (self.hasRequestRemoveSongs) {
    [output writeMessage:26 value:self.requestRemoveSongs];
  }
  if (self.hasRequestPlaylists) {
    [output writeMessage:27 value:self.requestPlaylists];
  }
  if (self.hasRequestOpenPlaylist) {
    [output writeMessage:28 value:self.requestOpenPlaylist];
  }
  if (self.hasRequestClosePlaylist) {
    [output writeMessage:29 value:self.requestClosePlaylist];
  }
  if (self.hasResponseLyrics) {
    [output writeMessage:30 value:self.responseLyrics];
  }
  if (self.hasRequestDownloadSongs) {
    [output writeMessage:31 value:self.requestDownloadSongs];
  }
  if (self.hasResponseSongFileChunk) {
    [output writeMessage:32 value:self.responseSongFileChunk];
  }
  if (self.hasResponseSongOffer) {
    [output writeMessage:33 value:self.responseSongOffer];
  }
  if (self.hasResponseLibraryChunk) {
    [output writeMessage:34 value:self.responseLibraryChunk];
  }
  if (self.hasRequestRateSong) {
    [output writeMessage:35 value:self.requestRateSong];
  }
  if (self.hasResponseDownloadTotalSize) {
    [output writeMessage:36 value:self.responseDownloadTotalSize];
  }
  if (self.hasRequestGlobalSearch) {
    [output writeMessage:37 value:self.requestGlobalSearch];
  }
  if (self.hasResponseGlobalSearch) {
    [output writeMessage:38 value:self.responseGlobalSearch];
  }
  if (self.hasResponseTranscoderStatus) {
    [output writeMessage:39 value:self.responseTranscoderStatus];
  }
  if (self.hasResponseGlobalSearchStatus) {
    [output writeMessage:40 value:self.responseGlobalSearchStatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasVersion) {
    size_ += computeInt32Size(1, self.version);
  }
  if (self.hasType) {
    size_ += computeEnumSize(2, self.type);
  }
  if (self.hasRequestPlaylistSongs) {
    size_ += computeMessageSize(10, self.requestPlaylistSongs);
  }
  if (self.hasRequestChangeSong) {
    size_ += computeMessageSize(11, self.requestChangeSong);
  }
  if (self.hasRequestSetVolume) {
    size_ += computeMessageSize(12, self.requestSetVolume);
  }
  if (self.hasRepeat) {
    size_ += computeMessageSize(13, self.repeat);
  }
  if (self.hasShuffle) {
    size_ += computeMessageSize(14, self.shuffle);
  }
  if (self.hasResponseClementineInfo) {
    size_ += computeMessageSize(15, self.responseClementineInfo);
  }
  if (self.hasResponseCurrentMetadata) {
    size_ += computeMessageSize(16, self.responseCurrentMetadata);
  }
  if (self.hasResponsePlaylists) {
    size_ += computeMessageSize(17, self.responsePlaylists);
  }
  if (self.hasResponsePlaylistSongs) {
    size_ += computeMessageSize(18, self.responsePlaylistSongs);
  }
  if (self.hasResponseEngineStateChanged) {
    size_ += computeMessageSize(19, self.responseEngineStateChanged);
  }
  if (self.hasResponseUpdateTrackPosition) {
    size_ += computeMessageSize(20, self.responseUpdateTrackPosition);
  }
  if (self.hasRequestConnect) {
    size_ += computeMessageSize(21, self.requestConnect);
  }
  if (self.hasResponseDisconnect) {
    size_ += computeMessageSize(22, self.responseDisconnect);
  }
  if (self.hasRequestSetTrackPosition) {
    size_ += computeMessageSize(23, self.requestSetTrackPosition);
  }
  if (self.hasResponseActiveChanged) {
    size_ += computeMessageSize(24, self.responseActiveChanged);
  }
  if (self.hasRequestInsertUrls) {
    size_ += computeMessageSize(25, self.requestInsertUrls);
  }
  if (self.hasRequestRemoveSongs) {
    size_ += computeMessageSize(26, self.requestRemoveSongs);
  }
  if (self.hasRequestPlaylists) {
    size_ += computeMessageSize(27, self.requestPlaylists);
  }
  if (self.hasRequestOpenPlaylist) {
    size_ += computeMessageSize(28, self.requestOpenPlaylist);
  }
  if (self.hasRequestClosePlaylist) {
    size_ += computeMessageSize(29, self.requestClosePlaylist);
  }
  if (self.hasResponseLyrics) {
    size_ += computeMessageSize(30, self.responseLyrics);
  }
  if (self.hasRequestDownloadSongs) {
    size_ += computeMessageSize(31, self.requestDownloadSongs);
  }
  if (self.hasResponseSongFileChunk) {
    size_ += computeMessageSize(32, self.responseSongFileChunk);
  }
  if (self.hasResponseSongOffer) {
    size_ += computeMessageSize(33, self.responseSongOffer);
  }
  if (self.hasResponseLibraryChunk) {
    size_ += computeMessageSize(34, self.responseLibraryChunk);
  }
  if (self.hasRequestRateSong) {
    size_ += computeMessageSize(35, self.requestRateSong);
  }
  if (self.hasResponseDownloadTotalSize) {
    size_ += computeMessageSize(36, self.responseDownloadTotalSize);
  }
  if (self.hasRequestGlobalSearch) {
    size_ += computeMessageSize(37, self.requestGlobalSearch);
  }
  if (self.hasResponseGlobalSearch) {
    size_ += computeMessageSize(38, self.responseGlobalSearch);
  }
  if (self.hasResponseTranscoderStatus) {
    size_ += computeMessageSize(39, self.responseTranscoderStatus);
  }
  if (self.hasResponseGlobalSearchStatus) {
    size_ += computeMessageSize(40, self.responseGlobalSearchStatus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Message*) parseFromData:(NSData*) data {
  return (Message*)[[[Message builder] mergeFromData:data] build];
}
+ (Message*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Message*)[[[Message builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Message*) parseFromInputStream:(NSInputStream*) input {
  return (Message*)[[[Message builder] mergeFromInputStream:input] build];
}
+ (Message*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Message*)[[[Message builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Message*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Message*)[[[Message builder] mergeFromCodedInputStream:input] build];
}
+ (Message*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Message*)[[[Message builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MessageBuilder*) builder {
  return [[MessageBuilder alloc] init];
}
+ (MessageBuilder*) builderWithPrototype:(Message*) prototype {
  return [[Message builder] mergeFrom:prototype];
}
- (MessageBuilder*) builder {
  return [Message builder];
}
- (MessageBuilder*) toBuilder {
  return [Message builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInteger:self.version]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromMsgType(self.type)];
  }
  if (self.hasRequestPlaylistSongs) {
    [output appendFormat:@"%@%@ {\n", indent, @"requestPlaylistSongs"];
    [self.requestPlaylistSongs writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRequestChangeSong) {
    [output appendFormat:@"%@%@ {\n", indent, @"requestChangeSong"];
    [self.requestChangeSong writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRequestSetVolume) {
    [output appendFormat:@"%@%@ {\n", indent, @"requestSetVolume"];
    [self.requestSetVolume writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRepeat) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeat"];
    [self.repeat writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasShuffle) {
    [output appendFormat:@"%@%@ {\n", indent, @"shuffle"];
    [self.shuffle writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasResponseClementineInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"responseClementineInfo"];
    [self.responseClementineInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasResponseCurrentMetadata) {
    [output appendFormat:@"%@%@ {\n", indent, @"responseCurrentMetadata"];
    [self.responseCurrentMetadata writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasResponsePlaylists) {
    [output appendFormat:@"%@%@ {\n", indent, @"responsePlaylists"];
    [self.responsePlaylists writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasResponsePlaylistSongs) {
    [output appendFormat:@"%@%@ {\n", indent, @"responsePlaylistSongs"];
    [self.responsePlaylistSongs writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasResponseEngineStateChanged) {
    [output appendFormat:@"%@%@ {\n", indent, @"responseEngineStateChanged"];
    [self.responseEngineStateChanged writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasResponseUpdateTrackPosition) {
    [output appendFormat:@"%@%@ {\n", indent, @"responseUpdateTrackPosition"];
    [self.responseUpdateTrackPosition writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRequestConnect) {
    [output appendFormat:@"%@%@ {\n", indent, @"requestConnect"];
    [self.requestConnect writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasResponseDisconnect) {
    [output appendFormat:@"%@%@ {\n", indent, @"responseDisconnect"];
    [self.responseDisconnect writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRequestSetTrackPosition) {
    [output appendFormat:@"%@%@ {\n", indent, @"requestSetTrackPosition"];
    [self.requestSetTrackPosition writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasResponseActiveChanged) {
    [output appendFormat:@"%@%@ {\n", indent, @"responseActiveChanged"];
    [self.responseActiveChanged writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRequestInsertUrls) {
    [output appendFormat:@"%@%@ {\n", indent, @"requestInsertUrls"];
    [self.requestInsertUrls writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRequestRemoveSongs) {
    [output appendFormat:@"%@%@ {\n", indent, @"requestRemoveSongs"];
    [self.requestRemoveSongs writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRequestPlaylists) {
    [output appendFormat:@"%@%@ {\n", indent, @"requestPlaylists"];
    [self.requestPlaylists writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRequestOpenPlaylist) {
    [output appendFormat:@"%@%@ {\n", indent, @"requestOpenPlaylist"];
    [self.requestOpenPlaylist writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRequestClosePlaylist) {
    [output appendFormat:@"%@%@ {\n", indent, @"requestClosePlaylist"];
    [self.requestClosePlaylist writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasResponseLyrics) {
    [output appendFormat:@"%@%@ {\n", indent, @"responseLyrics"];
    [self.responseLyrics writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRequestDownloadSongs) {
    [output appendFormat:@"%@%@ {\n", indent, @"requestDownloadSongs"];
    [self.requestDownloadSongs writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasResponseSongFileChunk) {
    [output appendFormat:@"%@%@ {\n", indent, @"responseSongFileChunk"];
    [self.responseSongFileChunk writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasResponseSongOffer) {
    [output appendFormat:@"%@%@ {\n", indent, @"responseSongOffer"];
    [self.responseSongOffer writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasResponseLibraryChunk) {
    [output appendFormat:@"%@%@ {\n", indent, @"responseLibraryChunk"];
    [self.responseLibraryChunk writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRequestRateSong) {
    [output appendFormat:@"%@%@ {\n", indent, @"requestRateSong"];
    [self.requestRateSong writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasResponseDownloadTotalSize) {
    [output appendFormat:@"%@%@ {\n", indent, @"responseDownloadTotalSize"];
    [self.responseDownloadTotalSize writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRequestGlobalSearch) {
    [output appendFormat:@"%@%@ {\n", indent, @"requestGlobalSearch"];
    [self.requestGlobalSearch writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasResponseGlobalSearch) {
    [output appendFormat:@"%@%@ {\n", indent, @"responseGlobalSearch"];
    [self.responseGlobalSearch writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasResponseTranscoderStatus) {
    [output appendFormat:@"%@%@ {\n", indent, @"responseTranscoderStatus"];
    [self.responseTranscoderStatus writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasResponseGlobalSearchStatus) {
    [output appendFormat:@"%@%@ {\n", indent, @"responseGlobalSearchStatus"];
    [self.responseGlobalSearchStatus writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasVersion) {
    [dictionary setObject: [NSNumber numberWithInteger:self.version] forKey: @"version"];
  }
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasRequestPlaylistSongs) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.requestPlaylistSongs storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"requestPlaylistSongs"];
  }
  if (self.hasRequestChangeSong) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.requestChangeSong storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"requestChangeSong"];
  }
  if (self.hasRequestSetVolume) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.requestSetVolume storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"requestSetVolume"];
  }
  if (self.hasRepeat) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.repeat storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"repeat"];
  }
  if (self.hasShuffle) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.shuffle storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"shuffle"];
  }
  if (self.hasResponseClementineInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.responseClementineInfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"responseClementineInfo"];
  }
  if (self.hasResponseCurrentMetadata) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.responseCurrentMetadata storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"responseCurrentMetadata"];
  }
  if (self.hasResponsePlaylists) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.responsePlaylists storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"responsePlaylists"];
  }
  if (self.hasResponsePlaylistSongs) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.responsePlaylistSongs storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"responsePlaylistSongs"];
  }
  if (self.hasResponseEngineStateChanged) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.responseEngineStateChanged storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"responseEngineStateChanged"];
  }
  if (self.hasResponseUpdateTrackPosition) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.responseUpdateTrackPosition storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"responseUpdateTrackPosition"];
  }
  if (self.hasRequestConnect) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.requestConnect storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"requestConnect"];
  }
  if (self.hasResponseDisconnect) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.responseDisconnect storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"responseDisconnect"];
  }
  if (self.hasRequestSetTrackPosition) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.requestSetTrackPosition storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"requestSetTrackPosition"];
  }
  if (self.hasResponseActiveChanged) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.responseActiveChanged storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"responseActiveChanged"];
  }
  if (self.hasRequestInsertUrls) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.requestInsertUrls storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"requestInsertUrls"];
  }
  if (self.hasRequestRemoveSongs) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.requestRemoveSongs storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"requestRemoveSongs"];
  }
  if (self.hasRequestPlaylists) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.requestPlaylists storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"requestPlaylists"];
  }
  if (self.hasRequestOpenPlaylist) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.requestOpenPlaylist storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"requestOpenPlaylist"];
  }
  if (self.hasRequestClosePlaylist) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.requestClosePlaylist storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"requestClosePlaylist"];
  }
  if (self.hasResponseLyrics) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.responseLyrics storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"responseLyrics"];
  }
  if (self.hasRequestDownloadSongs) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.requestDownloadSongs storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"requestDownloadSongs"];
  }
  if (self.hasResponseSongFileChunk) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.responseSongFileChunk storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"responseSongFileChunk"];
  }
  if (self.hasResponseSongOffer) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.responseSongOffer storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"responseSongOffer"];
  }
  if (self.hasResponseLibraryChunk) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.responseLibraryChunk storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"responseLibraryChunk"];
  }
  if (self.hasRequestRateSong) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.requestRateSong storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"requestRateSong"];
  }
  if (self.hasResponseDownloadTotalSize) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.responseDownloadTotalSize storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"responseDownloadTotalSize"];
  }
  if (self.hasRequestGlobalSearch) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.requestGlobalSearch storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"requestGlobalSearch"];
  }
  if (self.hasResponseGlobalSearch) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.responseGlobalSearch storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"responseGlobalSearch"];
  }
  if (self.hasResponseTranscoderStatus) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.responseTranscoderStatus storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"responseTranscoderStatus"];
  }
  if (self.hasResponseGlobalSearchStatus) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.responseGlobalSearchStatus storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"responseGlobalSearchStatus"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Message class]]) {
    return NO;
  }
  Message *otherMessage = other;
  return
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasRequestPlaylistSongs == otherMessage.hasRequestPlaylistSongs &&
      (!self.hasRequestPlaylistSongs || [self.requestPlaylistSongs isEqual:otherMessage.requestPlaylistSongs]) &&
      self.hasRequestChangeSong == otherMessage.hasRequestChangeSong &&
      (!self.hasRequestChangeSong || [self.requestChangeSong isEqual:otherMessage.requestChangeSong]) &&
      self.hasRequestSetVolume == otherMessage.hasRequestSetVolume &&
      (!self.hasRequestSetVolume || [self.requestSetVolume isEqual:otherMessage.requestSetVolume]) &&
      self.hasRepeat == otherMessage.hasRepeat &&
      (!self.hasRepeat || [self.repeat isEqual:otherMessage.repeat]) &&
      self.hasShuffle == otherMessage.hasShuffle &&
      (!self.hasShuffle || [self.shuffle isEqual:otherMessage.shuffle]) &&
      self.hasResponseClementineInfo == otherMessage.hasResponseClementineInfo &&
      (!self.hasResponseClementineInfo || [self.responseClementineInfo isEqual:otherMessage.responseClementineInfo]) &&
      self.hasResponseCurrentMetadata == otherMessage.hasResponseCurrentMetadata &&
      (!self.hasResponseCurrentMetadata || [self.responseCurrentMetadata isEqual:otherMessage.responseCurrentMetadata]) &&
      self.hasResponsePlaylists == otherMessage.hasResponsePlaylists &&
      (!self.hasResponsePlaylists || [self.responsePlaylists isEqual:otherMessage.responsePlaylists]) &&
      self.hasResponsePlaylistSongs == otherMessage.hasResponsePlaylistSongs &&
      (!self.hasResponsePlaylistSongs || [self.responsePlaylistSongs isEqual:otherMessage.responsePlaylistSongs]) &&
      self.hasResponseEngineStateChanged == otherMessage.hasResponseEngineStateChanged &&
      (!self.hasResponseEngineStateChanged || [self.responseEngineStateChanged isEqual:otherMessage.responseEngineStateChanged]) &&
      self.hasResponseUpdateTrackPosition == otherMessage.hasResponseUpdateTrackPosition &&
      (!self.hasResponseUpdateTrackPosition || [self.responseUpdateTrackPosition isEqual:otherMessage.responseUpdateTrackPosition]) &&
      self.hasRequestConnect == otherMessage.hasRequestConnect &&
      (!self.hasRequestConnect || [self.requestConnect isEqual:otherMessage.requestConnect]) &&
      self.hasResponseDisconnect == otherMessage.hasResponseDisconnect &&
      (!self.hasResponseDisconnect || [self.responseDisconnect isEqual:otherMessage.responseDisconnect]) &&
      self.hasRequestSetTrackPosition == otherMessage.hasRequestSetTrackPosition &&
      (!self.hasRequestSetTrackPosition || [self.requestSetTrackPosition isEqual:otherMessage.requestSetTrackPosition]) &&
      self.hasResponseActiveChanged == otherMessage.hasResponseActiveChanged &&
      (!self.hasResponseActiveChanged || [self.responseActiveChanged isEqual:otherMessage.responseActiveChanged]) &&
      self.hasRequestInsertUrls == otherMessage.hasRequestInsertUrls &&
      (!self.hasRequestInsertUrls || [self.requestInsertUrls isEqual:otherMessage.requestInsertUrls]) &&
      self.hasRequestRemoveSongs == otherMessage.hasRequestRemoveSongs &&
      (!self.hasRequestRemoveSongs || [self.requestRemoveSongs isEqual:otherMessage.requestRemoveSongs]) &&
      self.hasRequestPlaylists == otherMessage.hasRequestPlaylists &&
      (!self.hasRequestPlaylists || [self.requestPlaylists isEqual:otherMessage.requestPlaylists]) &&
      self.hasRequestOpenPlaylist == otherMessage.hasRequestOpenPlaylist &&
      (!self.hasRequestOpenPlaylist || [self.requestOpenPlaylist isEqual:otherMessage.requestOpenPlaylist]) &&
      self.hasRequestClosePlaylist == otherMessage.hasRequestClosePlaylist &&
      (!self.hasRequestClosePlaylist || [self.requestClosePlaylist isEqual:otherMessage.requestClosePlaylist]) &&
      self.hasResponseLyrics == otherMessage.hasResponseLyrics &&
      (!self.hasResponseLyrics || [self.responseLyrics isEqual:otherMessage.responseLyrics]) &&
      self.hasRequestDownloadSongs == otherMessage.hasRequestDownloadSongs &&
      (!self.hasRequestDownloadSongs || [self.requestDownloadSongs isEqual:otherMessage.requestDownloadSongs]) &&
      self.hasResponseSongFileChunk == otherMessage.hasResponseSongFileChunk &&
      (!self.hasResponseSongFileChunk || [self.responseSongFileChunk isEqual:otherMessage.responseSongFileChunk]) &&
      self.hasResponseSongOffer == otherMessage.hasResponseSongOffer &&
      (!self.hasResponseSongOffer || [self.responseSongOffer isEqual:otherMessage.responseSongOffer]) &&
      self.hasResponseLibraryChunk == otherMessage.hasResponseLibraryChunk &&
      (!self.hasResponseLibraryChunk || [self.responseLibraryChunk isEqual:otherMessage.responseLibraryChunk]) &&
      self.hasRequestRateSong == otherMessage.hasRequestRateSong &&
      (!self.hasRequestRateSong || [self.requestRateSong isEqual:otherMessage.requestRateSong]) &&
      self.hasResponseDownloadTotalSize == otherMessage.hasResponseDownloadTotalSize &&
      (!self.hasResponseDownloadTotalSize || [self.responseDownloadTotalSize isEqual:otherMessage.responseDownloadTotalSize]) &&
      self.hasRequestGlobalSearch == otherMessage.hasRequestGlobalSearch &&
      (!self.hasRequestGlobalSearch || [self.requestGlobalSearch isEqual:otherMessage.requestGlobalSearch]) &&
      self.hasResponseGlobalSearch == otherMessage.hasResponseGlobalSearch &&
      (!self.hasResponseGlobalSearch || [self.responseGlobalSearch isEqual:otherMessage.responseGlobalSearch]) &&
      self.hasResponseTranscoderStatus == otherMessage.hasResponseTranscoderStatus &&
      (!self.hasResponseTranscoderStatus || [self.responseTranscoderStatus isEqual:otherMessage.responseTranscoderStatus]) &&
      self.hasResponseGlobalSearchStatus == otherMessage.hasResponseGlobalSearchStatus &&
      (!self.hasResponseGlobalSearchStatus || [self.responseGlobalSearchStatus isEqual:otherMessage.responseGlobalSearchStatus]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.version] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasRequestPlaylistSongs) {
    hashCode = hashCode * 31 + [self.requestPlaylistSongs hash];
  }
  if (self.hasRequestChangeSong) {
    hashCode = hashCode * 31 + [self.requestChangeSong hash];
  }
  if (self.hasRequestSetVolume) {
    hashCode = hashCode * 31 + [self.requestSetVolume hash];
  }
  if (self.hasRepeat) {
    hashCode = hashCode * 31 + [self.repeat hash];
  }
  if (self.hasShuffle) {
    hashCode = hashCode * 31 + [self.shuffle hash];
  }
  if (self.hasResponseClementineInfo) {
    hashCode = hashCode * 31 + [self.responseClementineInfo hash];
  }
  if (self.hasResponseCurrentMetadata) {
    hashCode = hashCode * 31 + [self.responseCurrentMetadata hash];
  }
  if (self.hasResponsePlaylists) {
    hashCode = hashCode * 31 + [self.responsePlaylists hash];
  }
  if (self.hasResponsePlaylistSongs) {
    hashCode = hashCode * 31 + [self.responsePlaylistSongs hash];
  }
  if (self.hasResponseEngineStateChanged) {
    hashCode = hashCode * 31 + [self.responseEngineStateChanged hash];
  }
  if (self.hasResponseUpdateTrackPosition) {
    hashCode = hashCode * 31 + [self.responseUpdateTrackPosition hash];
  }
  if (self.hasRequestConnect) {
    hashCode = hashCode * 31 + [self.requestConnect hash];
  }
  if (self.hasResponseDisconnect) {
    hashCode = hashCode * 31 + [self.responseDisconnect hash];
  }
  if (self.hasRequestSetTrackPosition) {
    hashCode = hashCode * 31 + [self.requestSetTrackPosition hash];
  }
  if (self.hasResponseActiveChanged) {
    hashCode = hashCode * 31 + [self.responseActiveChanged hash];
  }
  if (self.hasRequestInsertUrls) {
    hashCode = hashCode * 31 + [self.requestInsertUrls hash];
  }
  if (self.hasRequestRemoveSongs) {
    hashCode = hashCode * 31 + [self.requestRemoveSongs hash];
  }
  if (self.hasRequestPlaylists) {
    hashCode = hashCode * 31 + [self.requestPlaylists hash];
  }
  if (self.hasRequestOpenPlaylist) {
    hashCode = hashCode * 31 + [self.requestOpenPlaylist hash];
  }
  if (self.hasRequestClosePlaylist) {
    hashCode = hashCode * 31 + [self.requestClosePlaylist hash];
  }
  if (self.hasResponseLyrics) {
    hashCode = hashCode * 31 + [self.responseLyrics hash];
  }
  if (self.hasRequestDownloadSongs) {
    hashCode = hashCode * 31 + [self.requestDownloadSongs hash];
  }
  if (self.hasResponseSongFileChunk) {
    hashCode = hashCode * 31 + [self.responseSongFileChunk hash];
  }
  if (self.hasResponseSongOffer) {
    hashCode = hashCode * 31 + [self.responseSongOffer hash];
  }
  if (self.hasResponseLibraryChunk) {
    hashCode = hashCode * 31 + [self.responseLibraryChunk hash];
  }
  if (self.hasRequestRateSong) {
    hashCode = hashCode * 31 + [self.requestRateSong hash];
  }
  if (self.hasResponseDownloadTotalSize) {
    hashCode = hashCode * 31 + [self.responseDownloadTotalSize hash];
  }
  if (self.hasRequestGlobalSearch) {
    hashCode = hashCode * 31 + [self.requestGlobalSearch hash];
  }
  if (self.hasResponseGlobalSearch) {
    hashCode = hashCode * 31 + [self.responseGlobalSearch hash];
  }
  if (self.hasResponseTranscoderStatus) {
    hashCode = hashCode * 31 + [self.responseTranscoderStatus hash];
  }
  if (self.hasResponseGlobalSearchStatus) {
    hashCode = hashCode * 31 + [self.responseGlobalSearchStatus hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MessageBuilder()
@property (strong) Message* resultMessage;
@end

@implementation MessageBuilder
@synthesize resultMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMessage = [[Message alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMessage;
}
- (MessageBuilder*) clear {
  self.resultMessage = [[Message alloc] init];
  return self;
}
- (MessageBuilder*) clone {
  return [Message builderWithPrototype:resultMessage];
}
- (Message*) defaultInstance {
  return [Message defaultInstance];
}
- (Message*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Message*) buildPartial {
  Message* returnMe = resultMessage;
  self.resultMessage = nil;
  return returnMe;
}
- (MessageBuilder*) mergeFrom:(Message*) other {
  if (other == [Message defaultInstance]) {
    return self;
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasRequestConnect) {
    [self mergeRequestConnect:other.requestConnect];
  }
  if (other.hasRequestPlaylists) {
    [self mergeRequestPlaylists:other.requestPlaylists];
  }
  if (other.hasRequestPlaylistSongs) {
    [self mergeRequestPlaylistSongs:other.requestPlaylistSongs];
  }
  if (other.hasRequestChangeSong) {
    [self mergeRequestChangeSong:other.requestChangeSong];
  }
  if (other.hasRequestSetVolume) {
    [self mergeRequestSetVolume:other.requestSetVolume];
  }
  if (other.hasRequestSetTrackPosition) {
    [self mergeRequestSetTrackPosition:other.requestSetTrackPosition];
  }
  if (other.hasRequestInsertUrls) {
    [self mergeRequestInsertUrls:other.requestInsertUrls];
  }
  if (other.hasRequestRemoveSongs) {
    [self mergeRequestRemoveSongs:other.requestRemoveSongs];
  }
  if (other.hasRequestOpenPlaylist) {
    [self mergeRequestOpenPlaylist:other.requestOpenPlaylist];
  }
  if (other.hasRequestClosePlaylist) {
    [self mergeRequestClosePlaylist:other.requestClosePlaylist];
  }
  if (other.hasRequestDownloadSongs) {
    [self mergeRequestDownloadSongs:other.requestDownloadSongs];
  }
  if (other.hasRequestRateSong) {
    [self mergeRequestRateSong:other.requestRateSong];
  }
  if (other.hasRequestGlobalSearch) {
    [self mergeRequestGlobalSearch:other.requestGlobalSearch];
  }
  if (other.hasRepeat) {
    [self mergeRepeat:other.repeat];
  }
  if (other.hasShuffle) {
    [self mergeShuffle:other.shuffle];
  }
  if (other.hasResponseClementineInfo) {
    [self mergeResponseClementineInfo:other.responseClementineInfo];
  }
  if (other.hasResponseCurrentMetadata) {
    [self mergeResponseCurrentMetadata:other.responseCurrentMetadata];
  }
  if (other.hasResponsePlaylists) {
    [self mergeResponsePlaylists:other.responsePlaylists];
  }
  if (other.hasResponsePlaylistSongs) {
    [self mergeResponsePlaylistSongs:other.responsePlaylistSongs];
  }
  if (other.hasResponseEngineStateChanged) {
    [self mergeResponseEngineStateChanged:other.responseEngineStateChanged];
  }
  if (other.hasResponseUpdateTrackPosition) {
    [self mergeResponseUpdateTrackPosition:other.responseUpdateTrackPosition];
  }
  if (other.hasResponseDisconnect) {
    [self mergeResponseDisconnect:other.responseDisconnect];
  }
  if (other.hasResponseActiveChanged) {
    [self mergeResponseActiveChanged:other.responseActiveChanged];
  }
  if (other.hasResponseLyrics) {
    [self mergeResponseLyrics:other.responseLyrics];
  }
  if (other.hasResponseSongFileChunk) {
    [self mergeResponseSongFileChunk:other.responseSongFileChunk];
  }
  if (other.hasResponseSongOffer) {
    [self mergeResponseSongOffer:other.responseSongOffer];
  }
  if (other.hasResponseLibraryChunk) {
    [self mergeResponseLibraryChunk:other.responseLibraryChunk];
  }
  if (other.hasResponseDownloadTotalSize) {
    [self mergeResponseDownloadTotalSize:other.responseDownloadTotalSize];
  }
  if (other.hasResponseGlobalSearch) {
    [self mergeResponseGlobalSearch:other.responseGlobalSearch];
  }
  if (other.hasResponseTranscoderStatus) {
    [self mergeResponseTranscoderStatus:other.responseTranscoderStatus];
  }
  if (other.hasResponseGlobalSearchStatus) {
    [self mergeResponseGlobalSearchStatus:other.responseGlobalSearchStatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setVersion:[input readInt32]];
        break;
      }
      case 16: {
        MsgType value = (MsgType)[input readEnum];
        if (MsgTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 82: {
        RequestPlaylistSongsBuilder* subBuilder = [RequestPlaylistSongs builder];
        if (self.hasRequestPlaylistSongs) {
          [subBuilder mergeFrom:self.requestPlaylistSongs];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRequestPlaylistSongs:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        RequestChangeSongBuilder* subBuilder = [RequestChangeSong builder];
        if (self.hasRequestChangeSong) {
          [subBuilder mergeFrom:self.requestChangeSong];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRequestChangeSong:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        RequestSetVolumeBuilder* subBuilder = [RequestSetVolume builder];
        if (self.hasRequestSetVolume) {
          [subBuilder mergeFrom:self.requestSetVolume];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRequestSetVolume:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        RepeatBuilder* subBuilder = [Repeat builder];
        if (self.hasRepeat) {
          [subBuilder mergeFrom:self.repeat];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRepeat:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        ShuffleBuilder* subBuilder = [Shuffle builder];
        if (self.hasShuffle) {
          [subBuilder mergeFrom:self.shuffle];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setShuffle:[subBuilder buildPartial]];
        break;
      }
      case 122: {
        ResponseClementineInfoBuilder* subBuilder = [ResponseClementineInfo builder];
        if (self.hasResponseClementineInfo) {
          [subBuilder mergeFrom:self.responseClementineInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setResponseClementineInfo:[subBuilder buildPartial]];
        break;
      }
      case 130: {
        ResponseCurrentMetadataBuilder* subBuilder = [ResponseCurrentMetadata builder];
        if (self.hasResponseCurrentMetadata) {
          [subBuilder mergeFrom:self.responseCurrentMetadata];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setResponseCurrentMetadata:[subBuilder buildPartial]];
        break;
      }
      case 138: {
        ResponsePlaylistsBuilder* subBuilder = [ResponsePlaylists builder];
        if (self.hasResponsePlaylists) {
          [subBuilder mergeFrom:self.responsePlaylists];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setResponsePlaylists:[subBuilder buildPartial]];
        break;
      }
      case 146: {
        ResponsePlaylistSongsBuilder* subBuilder = [ResponsePlaylistSongs builder];
        if (self.hasResponsePlaylistSongs) {
          [subBuilder mergeFrom:self.responsePlaylistSongs];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setResponsePlaylistSongs:[subBuilder buildPartial]];
        break;
      }
      case 154: {
        ResponseEngineStateChangedBuilder* subBuilder = [ResponseEngineStateChanged builder];
        if (self.hasResponseEngineStateChanged) {
          [subBuilder mergeFrom:self.responseEngineStateChanged];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setResponseEngineStateChanged:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        ResponseUpdateTrackPositionBuilder* subBuilder = [ResponseUpdateTrackPosition builder];
        if (self.hasResponseUpdateTrackPosition) {
          [subBuilder mergeFrom:self.responseUpdateTrackPosition];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setResponseUpdateTrackPosition:[subBuilder buildPartial]];
        break;
      }
      case 170: {
        RequestConnectBuilder* subBuilder = [RequestConnect builder];
        if (self.hasRequestConnect) {
          [subBuilder mergeFrom:self.requestConnect];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRequestConnect:[subBuilder buildPartial]];
        break;
      }
      case 178: {
        ResponseDisconnectBuilder* subBuilder = [ResponseDisconnect builder];
        if (self.hasResponseDisconnect) {
          [subBuilder mergeFrom:self.responseDisconnect];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setResponseDisconnect:[subBuilder buildPartial]];
        break;
      }
      case 186: {
        RequestSetTrackPositionBuilder* subBuilder = [RequestSetTrackPosition builder];
        if (self.hasRequestSetTrackPosition) {
          [subBuilder mergeFrom:self.requestSetTrackPosition];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRequestSetTrackPosition:[subBuilder buildPartial]];
        break;
      }
      case 194: {
        ResponseActiveChangedBuilder* subBuilder = [ResponseActiveChanged builder];
        if (self.hasResponseActiveChanged) {
          [subBuilder mergeFrom:self.responseActiveChanged];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setResponseActiveChanged:[subBuilder buildPartial]];
        break;
      }
      case 202: {
        RequestInsertUrlsBuilder* subBuilder = [RequestInsertUrls builder];
        if (self.hasRequestInsertUrls) {
          [subBuilder mergeFrom:self.requestInsertUrls];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRequestInsertUrls:[subBuilder buildPartial]];
        break;
      }
      case 210: {
        RequestRemoveSongsBuilder* subBuilder = [RequestRemoveSongs builder];
        if (self.hasRequestRemoveSongs) {
          [subBuilder mergeFrom:self.requestRemoveSongs];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRequestRemoveSongs:[subBuilder buildPartial]];
        break;
      }
      case 218: {
        RequestPlaylistsBuilder* subBuilder = [RequestPlaylists builder];
        if (self.hasRequestPlaylists) {
          [subBuilder mergeFrom:self.requestPlaylists];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRequestPlaylists:[subBuilder buildPartial]];
        break;
      }
      case 226: {
        RequestOpenPlaylistBuilder* subBuilder = [RequestOpenPlaylist builder];
        if (self.hasRequestOpenPlaylist) {
          [subBuilder mergeFrom:self.requestOpenPlaylist];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRequestOpenPlaylist:[subBuilder buildPartial]];
        break;
      }
      case 234: {
        RequestClosePlaylistBuilder* subBuilder = [RequestClosePlaylist builder];
        if (self.hasRequestClosePlaylist) {
          [subBuilder mergeFrom:self.requestClosePlaylist];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRequestClosePlaylist:[subBuilder buildPartial]];
        break;
      }
      case 242: {
        ResponseLyricsBuilder* subBuilder = [ResponseLyrics builder];
        if (self.hasResponseLyrics) {
          [subBuilder mergeFrom:self.responseLyrics];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setResponseLyrics:[subBuilder buildPartial]];
        break;
      }
      case 250: {
        RequestDownloadSongsBuilder* subBuilder = [RequestDownloadSongs builder];
        if (self.hasRequestDownloadSongs) {
          [subBuilder mergeFrom:self.requestDownloadSongs];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRequestDownloadSongs:[subBuilder buildPartial]];
        break;
      }
      case 258: {
        ResponseSongFileChunkBuilder* subBuilder = [ResponseSongFileChunk builder];
        if (self.hasResponseSongFileChunk) {
          [subBuilder mergeFrom:self.responseSongFileChunk];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setResponseSongFileChunk:[subBuilder buildPartial]];
        break;
      }
      case 266: {
        ResponseSongOfferBuilder* subBuilder = [ResponseSongOffer builder];
        if (self.hasResponseSongOffer) {
          [subBuilder mergeFrom:self.responseSongOffer];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setResponseSongOffer:[subBuilder buildPartial]];
        break;
      }
      case 274: {
        ResponseLibraryChunkBuilder* subBuilder = [ResponseLibraryChunk builder];
        if (self.hasResponseLibraryChunk) {
          [subBuilder mergeFrom:self.responseLibraryChunk];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setResponseLibraryChunk:[subBuilder buildPartial]];
        break;
      }
      case 282: {
        RequestRateSongBuilder* subBuilder = [RequestRateSong builder];
        if (self.hasRequestRateSong) {
          [subBuilder mergeFrom:self.requestRateSong];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRequestRateSong:[subBuilder buildPartial]];
        break;
      }
      case 290: {
        ResponseDownloadTotalSizeBuilder* subBuilder = [ResponseDownloadTotalSize builder];
        if (self.hasResponseDownloadTotalSize) {
          [subBuilder mergeFrom:self.responseDownloadTotalSize];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setResponseDownloadTotalSize:[subBuilder buildPartial]];
        break;
      }
      case 298: {
        RequestGlobalSearchBuilder* subBuilder = [RequestGlobalSearch builder];
        if (self.hasRequestGlobalSearch) {
          [subBuilder mergeFrom:self.requestGlobalSearch];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRequestGlobalSearch:[subBuilder buildPartial]];
        break;
      }
      case 306: {
        ResponseGlobalSearchBuilder* subBuilder = [ResponseGlobalSearch builder];
        if (self.hasResponseGlobalSearch) {
          [subBuilder mergeFrom:self.responseGlobalSearch];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setResponseGlobalSearch:[subBuilder buildPartial]];
        break;
      }
      case 314: {
        ResponseTranscoderStatusBuilder* subBuilder = [ResponseTranscoderStatus builder];
        if (self.hasResponseTranscoderStatus) {
          [subBuilder mergeFrom:self.responseTranscoderStatus];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setResponseTranscoderStatus:[subBuilder buildPartial]];
        break;
      }
      case 322: {
        ResponseGlobalSearchStatusBuilder* subBuilder = [ResponseGlobalSearchStatus builder];
        if (self.hasResponseGlobalSearchStatus) {
          [subBuilder mergeFrom:self.responseGlobalSearchStatus];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setResponseGlobalSearchStatus:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasVersion {
  return resultMessage.hasVersion;
}
- (SInt32) version {
  return resultMessage.version;
}
- (MessageBuilder*) setVersion:(SInt32) value {
  resultMessage.hasVersion = YES;
  resultMessage.version = value;
  return self;
}
- (MessageBuilder*) clearVersion {
  resultMessage.hasVersion = NO;
  resultMessage.version = 21;
  return self;
}
- (BOOL) hasType {
  return resultMessage.hasType;
}
- (MsgType) type {
  return resultMessage.type;
}
- (MessageBuilder*) setType:(MsgType) value {
  resultMessage.hasType = YES;
  resultMessage.type = value;
  return self;
}
- (MessageBuilder*) clearType {
  resultMessage.hasType = NO;
  resultMessage.type = MsgTypeUnknown;
  return self;
}
- (BOOL) hasRequestConnect {
  return resultMessage.hasRequestConnect;
}
- (RequestConnect*) requestConnect {
  return resultMessage.requestConnect;
}
- (MessageBuilder*) setRequestConnect:(RequestConnect*) value {
  resultMessage.hasRequestConnect = YES;
  resultMessage.requestConnect = value;
  return self;
}
- (MessageBuilder*) setRequestConnectBuilder:(RequestConnectBuilder*) builderForValue {
  return [self setRequestConnect:[builderForValue build]];
}
- (MessageBuilder*) mergeRequestConnect:(RequestConnect*) value {
  if (resultMessage.hasRequestConnect &&
      resultMessage.requestConnect != [RequestConnect defaultInstance]) {
    resultMessage.requestConnect =
      [[[RequestConnect builderWithPrototype:resultMessage.requestConnect] mergeFrom:value] buildPartial];
  } else {
    resultMessage.requestConnect = value;
  }
  resultMessage.hasRequestConnect = YES;
  return self;
}
- (MessageBuilder*) clearRequestConnect {
  resultMessage.hasRequestConnect = NO;
  resultMessage.requestConnect = [RequestConnect defaultInstance];
  return self;
}
- (BOOL) hasRequestPlaylists {
  return resultMessage.hasRequestPlaylists;
}
- (RequestPlaylists*) requestPlaylists {
  return resultMessage.requestPlaylists;
}
- (MessageBuilder*) setRequestPlaylists:(RequestPlaylists*) value {
  resultMessage.hasRequestPlaylists = YES;
  resultMessage.requestPlaylists = value;
  return self;
}
- (MessageBuilder*) setRequestPlaylistsBuilder:(RequestPlaylistsBuilder*) builderForValue {
  return [self setRequestPlaylists:[builderForValue build]];
}
- (MessageBuilder*) mergeRequestPlaylists:(RequestPlaylists*) value {
  if (resultMessage.hasRequestPlaylists &&
      resultMessage.requestPlaylists != [RequestPlaylists defaultInstance]) {
    resultMessage.requestPlaylists =
      [[[RequestPlaylists builderWithPrototype:resultMessage.requestPlaylists] mergeFrom:value] buildPartial];
  } else {
    resultMessage.requestPlaylists = value;
  }
  resultMessage.hasRequestPlaylists = YES;
  return self;
}
- (MessageBuilder*) clearRequestPlaylists {
  resultMessage.hasRequestPlaylists = NO;
  resultMessage.requestPlaylists = [RequestPlaylists defaultInstance];
  return self;
}
- (BOOL) hasRequestPlaylistSongs {
  return resultMessage.hasRequestPlaylistSongs;
}
- (RequestPlaylistSongs*) requestPlaylistSongs {
  return resultMessage.requestPlaylistSongs;
}
- (MessageBuilder*) setRequestPlaylistSongs:(RequestPlaylistSongs*) value {
  resultMessage.hasRequestPlaylistSongs = YES;
  resultMessage.requestPlaylistSongs = value;
  return self;
}
- (MessageBuilder*) setRequestPlaylistSongsBuilder:(RequestPlaylistSongsBuilder*) builderForValue {
  return [self setRequestPlaylistSongs:[builderForValue build]];
}
- (MessageBuilder*) mergeRequestPlaylistSongs:(RequestPlaylistSongs*) value {
  if (resultMessage.hasRequestPlaylistSongs &&
      resultMessage.requestPlaylistSongs != [RequestPlaylistSongs defaultInstance]) {
    resultMessage.requestPlaylistSongs =
      [[[RequestPlaylistSongs builderWithPrototype:resultMessage.requestPlaylistSongs] mergeFrom:value] buildPartial];
  } else {
    resultMessage.requestPlaylistSongs = value;
  }
  resultMessage.hasRequestPlaylistSongs = YES;
  return self;
}
- (MessageBuilder*) clearRequestPlaylistSongs {
  resultMessage.hasRequestPlaylistSongs = NO;
  resultMessage.requestPlaylistSongs = [RequestPlaylistSongs defaultInstance];
  return self;
}
- (BOOL) hasRequestChangeSong {
  return resultMessage.hasRequestChangeSong;
}
- (RequestChangeSong*) requestChangeSong {
  return resultMessage.requestChangeSong;
}
- (MessageBuilder*) setRequestChangeSong:(RequestChangeSong*) value {
  resultMessage.hasRequestChangeSong = YES;
  resultMessage.requestChangeSong = value;
  return self;
}
- (MessageBuilder*) setRequestChangeSongBuilder:(RequestChangeSongBuilder*) builderForValue {
  return [self setRequestChangeSong:[builderForValue build]];
}
- (MessageBuilder*) mergeRequestChangeSong:(RequestChangeSong*) value {
  if (resultMessage.hasRequestChangeSong &&
      resultMessage.requestChangeSong != [RequestChangeSong defaultInstance]) {
    resultMessage.requestChangeSong =
      [[[RequestChangeSong builderWithPrototype:resultMessage.requestChangeSong] mergeFrom:value] buildPartial];
  } else {
    resultMessage.requestChangeSong = value;
  }
  resultMessage.hasRequestChangeSong = YES;
  return self;
}
- (MessageBuilder*) clearRequestChangeSong {
  resultMessage.hasRequestChangeSong = NO;
  resultMessage.requestChangeSong = [RequestChangeSong defaultInstance];
  return self;
}
- (BOOL) hasRequestSetVolume {
  return resultMessage.hasRequestSetVolume;
}
- (RequestSetVolume*) requestSetVolume {
  return resultMessage.requestSetVolume;
}
- (MessageBuilder*) setRequestSetVolume:(RequestSetVolume*) value {
  resultMessage.hasRequestSetVolume = YES;
  resultMessage.requestSetVolume = value;
  return self;
}
- (MessageBuilder*) setRequestSetVolumeBuilder:(RequestSetVolumeBuilder*) builderForValue {
  return [self setRequestSetVolume:[builderForValue build]];
}
- (MessageBuilder*) mergeRequestSetVolume:(RequestSetVolume*) value {
  if (resultMessage.hasRequestSetVolume &&
      resultMessage.requestSetVolume != [RequestSetVolume defaultInstance]) {
    resultMessage.requestSetVolume =
      [[[RequestSetVolume builderWithPrototype:resultMessage.requestSetVolume] mergeFrom:value] buildPartial];
  } else {
    resultMessage.requestSetVolume = value;
  }
  resultMessage.hasRequestSetVolume = YES;
  return self;
}
- (MessageBuilder*) clearRequestSetVolume {
  resultMessage.hasRequestSetVolume = NO;
  resultMessage.requestSetVolume = [RequestSetVolume defaultInstance];
  return self;
}
- (BOOL) hasRequestSetTrackPosition {
  return resultMessage.hasRequestSetTrackPosition;
}
- (RequestSetTrackPosition*) requestSetTrackPosition {
  return resultMessage.requestSetTrackPosition;
}
- (MessageBuilder*) setRequestSetTrackPosition:(RequestSetTrackPosition*) value {
  resultMessage.hasRequestSetTrackPosition = YES;
  resultMessage.requestSetTrackPosition = value;
  return self;
}
- (MessageBuilder*) setRequestSetTrackPositionBuilder:(RequestSetTrackPositionBuilder*) builderForValue {
  return [self setRequestSetTrackPosition:[builderForValue build]];
}
- (MessageBuilder*) mergeRequestSetTrackPosition:(RequestSetTrackPosition*) value {
  if (resultMessage.hasRequestSetTrackPosition &&
      resultMessage.requestSetTrackPosition != [RequestSetTrackPosition defaultInstance]) {
    resultMessage.requestSetTrackPosition =
      [[[RequestSetTrackPosition builderWithPrototype:resultMessage.requestSetTrackPosition] mergeFrom:value] buildPartial];
  } else {
    resultMessage.requestSetTrackPosition = value;
  }
  resultMessage.hasRequestSetTrackPosition = YES;
  return self;
}
- (MessageBuilder*) clearRequestSetTrackPosition {
  resultMessage.hasRequestSetTrackPosition = NO;
  resultMessage.requestSetTrackPosition = [RequestSetTrackPosition defaultInstance];
  return self;
}
- (BOOL) hasRequestInsertUrls {
  return resultMessage.hasRequestInsertUrls;
}
- (RequestInsertUrls*) requestInsertUrls {
  return resultMessage.requestInsertUrls;
}
- (MessageBuilder*) setRequestInsertUrls:(RequestInsertUrls*) value {
  resultMessage.hasRequestInsertUrls = YES;
  resultMessage.requestInsertUrls = value;
  return self;
}
- (MessageBuilder*) setRequestInsertUrlsBuilder:(RequestInsertUrlsBuilder*) builderForValue {
  return [self setRequestInsertUrls:[builderForValue build]];
}
- (MessageBuilder*) mergeRequestInsertUrls:(RequestInsertUrls*) value {
  if (resultMessage.hasRequestInsertUrls &&
      resultMessage.requestInsertUrls != [RequestInsertUrls defaultInstance]) {
    resultMessage.requestInsertUrls =
      [[[RequestInsertUrls builderWithPrototype:resultMessage.requestInsertUrls] mergeFrom:value] buildPartial];
  } else {
    resultMessage.requestInsertUrls = value;
  }
  resultMessage.hasRequestInsertUrls = YES;
  return self;
}
- (MessageBuilder*) clearRequestInsertUrls {
  resultMessage.hasRequestInsertUrls = NO;
  resultMessage.requestInsertUrls = [RequestInsertUrls defaultInstance];
  return self;
}
- (BOOL) hasRequestRemoveSongs {
  return resultMessage.hasRequestRemoveSongs;
}
- (RequestRemoveSongs*) requestRemoveSongs {
  return resultMessage.requestRemoveSongs;
}
- (MessageBuilder*) setRequestRemoveSongs:(RequestRemoveSongs*) value {
  resultMessage.hasRequestRemoveSongs = YES;
  resultMessage.requestRemoveSongs = value;
  return self;
}
- (MessageBuilder*) setRequestRemoveSongsBuilder:(RequestRemoveSongsBuilder*) builderForValue {
  return [self setRequestRemoveSongs:[builderForValue build]];
}
- (MessageBuilder*) mergeRequestRemoveSongs:(RequestRemoveSongs*) value {
  if (resultMessage.hasRequestRemoveSongs &&
      resultMessage.requestRemoveSongs != [RequestRemoveSongs defaultInstance]) {
    resultMessage.requestRemoveSongs =
      [[[RequestRemoveSongs builderWithPrototype:resultMessage.requestRemoveSongs] mergeFrom:value] buildPartial];
  } else {
    resultMessage.requestRemoveSongs = value;
  }
  resultMessage.hasRequestRemoveSongs = YES;
  return self;
}
- (MessageBuilder*) clearRequestRemoveSongs {
  resultMessage.hasRequestRemoveSongs = NO;
  resultMessage.requestRemoveSongs = [RequestRemoveSongs defaultInstance];
  return self;
}
- (BOOL) hasRequestOpenPlaylist {
  return resultMessage.hasRequestOpenPlaylist;
}
- (RequestOpenPlaylist*) requestOpenPlaylist {
  return resultMessage.requestOpenPlaylist;
}
- (MessageBuilder*) setRequestOpenPlaylist:(RequestOpenPlaylist*) value {
  resultMessage.hasRequestOpenPlaylist = YES;
  resultMessage.requestOpenPlaylist = value;
  return self;
}
- (MessageBuilder*) setRequestOpenPlaylistBuilder:(RequestOpenPlaylistBuilder*) builderForValue {
  return [self setRequestOpenPlaylist:[builderForValue build]];
}
- (MessageBuilder*) mergeRequestOpenPlaylist:(RequestOpenPlaylist*) value {
  if (resultMessage.hasRequestOpenPlaylist &&
      resultMessage.requestOpenPlaylist != [RequestOpenPlaylist defaultInstance]) {
    resultMessage.requestOpenPlaylist =
      [[[RequestOpenPlaylist builderWithPrototype:resultMessage.requestOpenPlaylist] mergeFrom:value] buildPartial];
  } else {
    resultMessage.requestOpenPlaylist = value;
  }
  resultMessage.hasRequestOpenPlaylist = YES;
  return self;
}
- (MessageBuilder*) clearRequestOpenPlaylist {
  resultMessage.hasRequestOpenPlaylist = NO;
  resultMessage.requestOpenPlaylist = [RequestOpenPlaylist defaultInstance];
  return self;
}
- (BOOL) hasRequestClosePlaylist {
  return resultMessage.hasRequestClosePlaylist;
}
- (RequestClosePlaylist*) requestClosePlaylist {
  return resultMessage.requestClosePlaylist;
}
- (MessageBuilder*) setRequestClosePlaylist:(RequestClosePlaylist*) value {
  resultMessage.hasRequestClosePlaylist = YES;
  resultMessage.requestClosePlaylist = value;
  return self;
}
- (MessageBuilder*) setRequestClosePlaylistBuilder:(RequestClosePlaylistBuilder*) builderForValue {
  return [self setRequestClosePlaylist:[builderForValue build]];
}
- (MessageBuilder*) mergeRequestClosePlaylist:(RequestClosePlaylist*) value {
  if (resultMessage.hasRequestClosePlaylist &&
      resultMessage.requestClosePlaylist != [RequestClosePlaylist defaultInstance]) {
    resultMessage.requestClosePlaylist =
      [[[RequestClosePlaylist builderWithPrototype:resultMessage.requestClosePlaylist] mergeFrom:value] buildPartial];
  } else {
    resultMessage.requestClosePlaylist = value;
  }
  resultMessage.hasRequestClosePlaylist = YES;
  return self;
}
- (MessageBuilder*) clearRequestClosePlaylist {
  resultMessage.hasRequestClosePlaylist = NO;
  resultMessage.requestClosePlaylist = [RequestClosePlaylist defaultInstance];
  return self;
}
- (BOOL) hasRequestDownloadSongs {
  return resultMessage.hasRequestDownloadSongs;
}
- (RequestDownloadSongs*) requestDownloadSongs {
  return resultMessage.requestDownloadSongs;
}
- (MessageBuilder*) setRequestDownloadSongs:(RequestDownloadSongs*) value {
  resultMessage.hasRequestDownloadSongs = YES;
  resultMessage.requestDownloadSongs = value;
  return self;
}
- (MessageBuilder*) setRequestDownloadSongsBuilder:(RequestDownloadSongsBuilder*) builderForValue {
  return [self setRequestDownloadSongs:[builderForValue build]];
}
- (MessageBuilder*) mergeRequestDownloadSongs:(RequestDownloadSongs*) value {
  if (resultMessage.hasRequestDownloadSongs &&
      resultMessage.requestDownloadSongs != [RequestDownloadSongs defaultInstance]) {
    resultMessage.requestDownloadSongs =
      [[[RequestDownloadSongs builderWithPrototype:resultMessage.requestDownloadSongs] mergeFrom:value] buildPartial];
  } else {
    resultMessage.requestDownloadSongs = value;
  }
  resultMessage.hasRequestDownloadSongs = YES;
  return self;
}
- (MessageBuilder*) clearRequestDownloadSongs {
  resultMessage.hasRequestDownloadSongs = NO;
  resultMessage.requestDownloadSongs = [RequestDownloadSongs defaultInstance];
  return self;
}
- (BOOL) hasRequestRateSong {
  return resultMessage.hasRequestRateSong;
}
- (RequestRateSong*) requestRateSong {
  return resultMessage.requestRateSong;
}
- (MessageBuilder*) setRequestRateSong:(RequestRateSong*) value {
  resultMessage.hasRequestRateSong = YES;
  resultMessage.requestRateSong = value;
  return self;
}
- (MessageBuilder*) setRequestRateSongBuilder:(RequestRateSongBuilder*) builderForValue {
  return [self setRequestRateSong:[builderForValue build]];
}
- (MessageBuilder*) mergeRequestRateSong:(RequestRateSong*) value {
  if (resultMessage.hasRequestRateSong &&
      resultMessage.requestRateSong != [RequestRateSong defaultInstance]) {
    resultMessage.requestRateSong =
      [[[RequestRateSong builderWithPrototype:resultMessage.requestRateSong] mergeFrom:value] buildPartial];
  } else {
    resultMessage.requestRateSong = value;
  }
  resultMessage.hasRequestRateSong = YES;
  return self;
}
- (MessageBuilder*) clearRequestRateSong {
  resultMessage.hasRequestRateSong = NO;
  resultMessage.requestRateSong = [RequestRateSong defaultInstance];
  return self;
}
- (BOOL) hasRequestGlobalSearch {
  return resultMessage.hasRequestGlobalSearch;
}
- (RequestGlobalSearch*) requestGlobalSearch {
  return resultMessage.requestGlobalSearch;
}
- (MessageBuilder*) setRequestGlobalSearch:(RequestGlobalSearch*) value {
  resultMessage.hasRequestGlobalSearch = YES;
  resultMessage.requestGlobalSearch = value;
  return self;
}
- (MessageBuilder*) setRequestGlobalSearchBuilder:(RequestGlobalSearchBuilder*) builderForValue {
  return [self setRequestGlobalSearch:[builderForValue build]];
}
- (MessageBuilder*) mergeRequestGlobalSearch:(RequestGlobalSearch*) value {
  if (resultMessage.hasRequestGlobalSearch &&
      resultMessage.requestGlobalSearch != [RequestGlobalSearch defaultInstance]) {
    resultMessage.requestGlobalSearch =
      [[[RequestGlobalSearch builderWithPrototype:resultMessage.requestGlobalSearch] mergeFrom:value] buildPartial];
  } else {
    resultMessage.requestGlobalSearch = value;
  }
  resultMessage.hasRequestGlobalSearch = YES;
  return self;
}
- (MessageBuilder*) clearRequestGlobalSearch {
  resultMessage.hasRequestGlobalSearch = NO;
  resultMessage.requestGlobalSearch = [RequestGlobalSearch defaultInstance];
  return self;
}
- (BOOL) hasRepeat {
  return resultMessage.hasRepeat;
}
- (Repeat*) repeat {
  return resultMessage.repeat;
}
- (MessageBuilder*) setRepeat:(Repeat*) value {
  resultMessage.hasRepeat = YES;
  resultMessage.repeat = value;
  return self;
}
- (MessageBuilder*) setRepeatBuilder:(RepeatBuilder*) builderForValue {
  return [self setRepeat:[builderForValue build]];
}
- (MessageBuilder*) mergeRepeat:(Repeat*) value {
  if (resultMessage.hasRepeat &&
      resultMessage.repeat != [Repeat defaultInstance]) {
    resultMessage.repeat =
      [[[Repeat builderWithPrototype:resultMessage.repeat] mergeFrom:value] buildPartial];
  } else {
    resultMessage.repeat = value;
  }
  resultMessage.hasRepeat = YES;
  return self;
}
- (MessageBuilder*) clearRepeat {
  resultMessage.hasRepeat = NO;
  resultMessage.repeat = [Repeat defaultInstance];
  return self;
}
- (BOOL) hasShuffle {
  return resultMessage.hasShuffle;
}
- (Shuffle*) shuffle {
  return resultMessage.shuffle;
}
- (MessageBuilder*) setShuffle:(Shuffle*) value {
  resultMessage.hasShuffle = YES;
  resultMessage.shuffle = value;
  return self;
}
- (MessageBuilder*) setShuffleBuilder:(ShuffleBuilder*) builderForValue {
  return [self setShuffle:[builderForValue build]];
}
- (MessageBuilder*) mergeShuffle:(Shuffle*) value {
  if (resultMessage.hasShuffle &&
      resultMessage.shuffle != [Shuffle defaultInstance]) {
    resultMessage.shuffle =
      [[[Shuffle builderWithPrototype:resultMessage.shuffle] mergeFrom:value] buildPartial];
  } else {
    resultMessage.shuffle = value;
  }
  resultMessage.hasShuffle = YES;
  return self;
}
- (MessageBuilder*) clearShuffle {
  resultMessage.hasShuffle = NO;
  resultMessage.shuffle = [Shuffle defaultInstance];
  return self;
}
- (BOOL) hasResponseClementineInfo {
  return resultMessage.hasResponseClementineInfo;
}
- (ResponseClementineInfo*) responseClementineInfo {
  return resultMessage.responseClementineInfo;
}
- (MessageBuilder*) setResponseClementineInfo:(ResponseClementineInfo*) value {
  resultMessage.hasResponseClementineInfo = YES;
  resultMessage.responseClementineInfo = value;
  return self;
}
- (MessageBuilder*) setResponseClementineInfoBuilder:(ResponseClementineInfoBuilder*) builderForValue {
  return [self setResponseClementineInfo:[builderForValue build]];
}
- (MessageBuilder*) mergeResponseClementineInfo:(ResponseClementineInfo*) value {
  if (resultMessage.hasResponseClementineInfo &&
      resultMessage.responseClementineInfo != [ResponseClementineInfo defaultInstance]) {
    resultMessage.responseClementineInfo =
      [[[ResponseClementineInfo builderWithPrototype:resultMessage.responseClementineInfo] mergeFrom:value] buildPartial];
  } else {
    resultMessage.responseClementineInfo = value;
  }
  resultMessage.hasResponseClementineInfo = YES;
  return self;
}
- (MessageBuilder*) clearResponseClementineInfo {
  resultMessage.hasResponseClementineInfo = NO;
  resultMessage.responseClementineInfo = [ResponseClementineInfo defaultInstance];
  return self;
}
- (BOOL) hasResponseCurrentMetadata {
  return resultMessage.hasResponseCurrentMetadata;
}
- (ResponseCurrentMetadata*) responseCurrentMetadata {
  return resultMessage.responseCurrentMetadata;
}
- (MessageBuilder*) setResponseCurrentMetadata:(ResponseCurrentMetadata*) value {
  resultMessage.hasResponseCurrentMetadata = YES;
  resultMessage.responseCurrentMetadata = value;
  return self;
}
- (MessageBuilder*) setResponseCurrentMetadataBuilder:(ResponseCurrentMetadataBuilder*) builderForValue {
  return [self setResponseCurrentMetadata:[builderForValue build]];
}
- (MessageBuilder*) mergeResponseCurrentMetadata:(ResponseCurrentMetadata*) value {
  if (resultMessage.hasResponseCurrentMetadata &&
      resultMessage.responseCurrentMetadata != [ResponseCurrentMetadata defaultInstance]) {
    resultMessage.responseCurrentMetadata =
      [[[ResponseCurrentMetadata builderWithPrototype:resultMessage.responseCurrentMetadata] mergeFrom:value] buildPartial];
  } else {
    resultMessage.responseCurrentMetadata = value;
  }
  resultMessage.hasResponseCurrentMetadata = YES;
  return self;
}
- (MessageBuilder*) clearResponseCurrentMetadata {
  resultMessage.hasResponseCurrentMetadata = NO;
  resultMessage.responseCurrentMetadata = [ResponseCurrentMetadata defaultInstance];
  return self;
}
- (BOOL) hasResponsePlaylists {
  return resultMessage.hasResponsePlaylists;
}
- (ResponsePlaylists*) responsePlaylists {
  return resultMessage.responsePlaylists;
}
- (MessageBuilder*) setResponsePlaylists:(ResponsePlaylists*) value {
  resultMessage.hasResponsePlaylists = YES;
  resultMessage.responsePlaylists = value;
  return self;
}
- (MessageBuilder*) setResponsePlaylistsBuilder:(ResponsePlaylistsBuilder*) builderForValue {
  return [self setResponsePlaylists:[builderForValue build]];
}
- (MessageBuilder*) mergeResponsePlaylists:(ResponsePlaylists*) value {
  if (resultMessage.hasResponsePlaylists &&
      resultMessage.responsePlaylists != [ResponsePlaylists defaultInstance]) {
    resultMessage.responsePlaylists =
      [[[ResponsePlaylists builderWithPrototype:resultMessage.responsePlaylists] mergeFrom:value] buildPartial];
  } else {
    resultMessage.responsePlaylists = value;
  }
  resultMessage.hasResponsePlaylists = YES;
  return self;
}
- (MessageBuilder*) clearResponsePlaylists {
  resultMessage.hasResponsePlaylists = NO;
  resultMessage.responsePlaylists = [ResponsePlaylists defaultInstance];
  return self;
}
- (BOOL) hasResponsePlaylistSongs {
  return resultMessage.hasResponsePlaylistSongs;
}
- (ResponsePlaylistSongs*) responsePlaylistSongs {
  return resultMessage.responsePlaylistSongs;
}
- (MessageBuilder*) setResponsePlaylistSongs:(ResponsePlaylistSongs*) value {
  resultMessage.hasResponsePlaylistSongs = YES;
  resultMessage.responsePlaylistSongs = value;
  return self;
}
- (MessageBuilder*) setResponsePlaylistSongsBuilder:(ResponsePlaylistSongsBuilder*) builderForValue {
  return [self setResponsePlaylistSongs:[builderForValue build]];
}
- (MessageBuilder*) mergeResponsePlaylistSongs:(ResponsePlaylistSongs*) value {
  if (resultMessage.hasResponsePlaylistSongs &&
      resultMessage.responsePlaylistSongs != [ResponsePlaylistSongs defaultInstance]) {
    resultMessage.responsePlaylistSongs =
      [[[ResponsePlaylistSongs builderWithPrototype:resultMessage.responsePlaylistSongs] mergeFrom:value] buildPartial];
  } else {
    resultMessage.responsePlaylistSongs = value;
  }
  resultMessage.hasResponsePlaylistSongs = YES;
  return self;
}
- (MessageBuilder*) clearResponsePlaylistSongs {
  resultMessage.hasResponsePlaylistSongs = NO;
  resultMessage.responsePlaylistSongs = [ResponsePlaylistSongs defaultInstance];
  return self;
}
- (BOOL) hasResponseEngineStateChanged {
  return resultMessage.hasResponseEngineStateChanged;
}
- (ResponseEngineStateChanged*) responseEngineStateChanged {
  return resultMessage.responseEngineStateChanged;
}
- (MessageBuilder*) setResponseEngineStateChanged:(ResponseEngineStateChanged*) value {
  resultMessage.hasResponseEngineStateChanged = YES;
  resultMessage.responseEngineStateChanged = value;
  return self;
}
- (MessageBuilder*) setResponseEngineStateChangedBuilder:(ResponseEngineStateChangedBuilder*) builderForValue {
  return [self setResponseEngineStateChanged:[builderForValue build]];
}
- (MessageBuilder*) mergeResponseEngineStateChanged:(ResponseEngineStateChanged*) value {
  if (resultMessage.hasResponseEngineStateChanged &&
      resultMessage.responseEngineStateChanged != [ResponseEngineStateChanged defaultInstance]) {
    resultMessage.responseEngineStateChanged =
      [[[ResponseEngineStateChanged builderWithPrototype:resultMessage.responseEngineStateChanged] mergeFrom:value] buildPartial];
  } else {
    resultMessage.responseEngineStateChanged = value;
  }
  resultMessage.hasResponseEngineStateChanged = YES;
  return self;
}
- (MessageBuilder*) clearResponseEngineStateChanged {
  resultMessage.hasResponseEngineStateChanged = NO;
  resultMessage.responseEngineStateChanged = [ResponseEngineStateChanged defaultInstance];
  return self;
}
- (BOOL) hasResponseUpdateTrackPosition {
  return resultMessage.hasResponseUpdateTrackPosition;
}
- (ResponseUpdateTrackPosition*) responseUpdateTrackPosition {
  return resultMessage.responseUpdateTrackPosition;
}
- (MessageBuilder*) setResponseUpdateTrackPosition:(ResponseUpdateTrackPosition*) value {
  resultMessage.hasResponseUpdateTrackPosition = YES;
  resultMessage.responseUpdateTrackPosition = value;
  return self;
}
- (MessageBuilder*) setResponseUpdateTrackPositionBuilder:(ResponseUpdateTrackPositionBuilder*) builderForValue {
  return [self setResponseUpdateTrackPosition:[builderForValue build]];
}
- (MessageBuilder*) mergeResponseUpdateTrackPosition:(ResponseUpdateTrackPosition*) value {
  if (resultMessage.hasResponseUpdateTrackPosition &&
      resultMessage.responseUpdateTrackPosition != [ResponseUpdateTrackPosition defaultInstance]) {
    resultMessage.responseUpdateTrackPosition =
      [[[ResponseUpdateTrackPosition builderWithPrototype:resultMessage.responseUpdateTrackPosition] mergeFrom:value] buildPartial];
  } else {
    resultMessage.responseUpdateTrackPosition = value;
  }
  resultMessage.hasResponseUpdateTrackPosition = YES;
  return self;
}
- (MessageBuilder*) clearResponseUpdateTrackPosition {
  resultMessage.hasResponseUpdateTrackPosition = NO;
  resultMessage.responseUpdateTrackPosition = [ResponseUpdateTrackPosition defaultInstance];
  return self;
}
- (BOOL) hasResponseDisconnect {
  return resultMessage.hasResponseDisconnect;
}
- (ResponseDisconnect*) responseDisconnect {
  return resultMessage.responseDisconnect;
}
- (MessageBuilder*) setResponseDisconnect:(ResponseDisconnect*) value {
  resultMessage.hasResponseDisconnect = YES;
  resultMessage.responseDisconnect = value;
  return self;
}
- (MessageBuilder*) setResponseDisconnectBuilder:(ResponseDisconnectBuilder*) builderForValue {
  return [self setResponseDisconnect:[builderForValue build]];
}
- (MessageBuilder*) mergeResponseDisconnect:(ResponseDisconnect*) value {
  if (resultMessage.hasResponseDisconnect &&
      resultMessage.responseDisconnect != [ResponseDisconnect defaultInstance]) {
    resultMessage.responseDisconnect =
      [[[ResponseDisconnect builderWithPrototype:resultMessage.responseDisconnect] mergeFrom:value] buildPartial];
  } else {
    resultMessage.responseDisconnect = value;
  }
  resultMessage.hasResponseDisconnect = YES;
  return self;
}
- (MessageBuilder*) clearResponseDisconnect {
  resultMessage.hasResponseDisconnect = NO;
  resultMessage.responseDisconnect = [ResponseDisconnect defaultInstance];
  return self;
}
- (BOOL) hasResponseActiveChanged {
  return resultMessage.hasResponseActiveChanged;
}
- (ResponseActiveChanged*) responseActiveChanged {
  return resultMessage.responseActiveChanged;
}
- (MessageBuilder*) setResponseActiveChanged:(ResponseActiveChanged*) value {
  resultMessage.hasResponseActiveChanged = YES;
  resultMessage.responseActiveChanged = value;
  return self;
}
- (MessageBuilder*) setResponseActiveChangedBuilder:(ResponseActiveChangedBuilder*) builderForValue {
  return [self setResponseActiveChanged:[builderForValue build]];
}
- (MessageBuilder*) mergeResponseActiveChanged:(ResponseActiveChanged*) value {
  if (resultMessage.hasResponseActiveChanged &&
      resultMessage.responseActiveChanged != [ResponseActiveChanged defaultInstance]) {
    resultMessage.responseActiveChanged =
      [[[ResponseActiveChanged builderWithPrototype:resultMessage.responseActiveChanged] mergeFrom:value] buildPartial];
  } else {
    resultMessage.responseActiveChanged = value;
  }
  resultMessage.hasResponseActiveChanged = YES;
  return self;
}
- (MessageBuilder*) clearResponseActiveChanged {
  resultMessage.hasResponseActiveChanged = NO;
  resultMessage.responseActiveChanged = [ResponseActiveChanged defaultInstance];
  return self;
}
- (BOOL) hasResponseLyrics {
  return resultMessage.hasResponseLyrics;
}
- (ResponseLyrics*) responseLyrics {
  return resultMessage.responseLyrics;
}
- (MessageBuilder*) setResponseLyrics:(ResponseLyrics*) value {
  resultMessage.hasResponseLyrics = YES;
  resultMessage.responseLyrics = value;
  return self;
}
- (MessageBuilder*) setResponseLyricsBuilder:(ResponseLyricsBuilder*) builderForValue {
  return [self setResponseLyrics:[builderForValue build]];
}
- (MessageBuilder*) mergeResponseLyrics:(ResponseLyrics*) value {
  if (resultMessage.hasResponseLyrics &&
      resultMessage.responseLyrics != [ResponseLyrics defaultInstance]) {
    resultMessage.responseLyrics =
      [[[ResponseLyrics builderWithPrototype:resultMessage.responseLyrics] mergeFrom:value] buildPartial];
  } else {
    resultMessage.responseLyrics = value;
  }
  resultMessage.hasResponseLyrics = YES;
  return self;
}
- (MessageBuilder*) clearResponseLyrics {
  resultMessage.hasResponseLyrics = NO;
  resultMessage.responseLyrics = [ResponseLyrics defaultInstance];
  return self;
}
- (BOOL) hasResponseSongFileChunk {
  return resultMessage.hasResponseSongFileChunk;
}
- (ResponseSongFileChunk*) responseSongFileChunk {
  return resultMessage.responseSongFileChunk;
}
- (MessageBuilder*) setResponseSongFileChunk:(ResponseSongFileChunk*) value {
  resultMessage.hasResponseSongFileChunk = YES;
  resultMessage.responseSongFileChunk = value;
  return self;
}
- (MessageBuilder*) setResponseSongFileChunkBuilder:(ResponseSongFileChunkBuilder*) builderForValue {
  return [self setResponseSongFileChunk:[builderForValue build]];
}
- (MessageBuilder*) mergeResponseSongFileChunk:(ResponseSongFileChunk*) value {
  if (resultMessage.hasResponseSongFileChunk &&
      resultMessage.responseSongFileChunk != [ResponseSongFileChunk defaultInstance]) {
    resultMessage.responseSongFileChunk =
      [[[ResponseSongFileChunk builderWithPrototype:resultMessage.responseSongFileChunk] mergeFrom:value] buildPartial];
  } else {
    resultMessage.responseSongFileChunk = value;
  }
  resultMessage.hasResponseSongFileChunk = YES;
  return self;
}
- (MessageBuilder*) clearResponseSongFileChunk {
  resultMessage.hasResponseSongFileChunk = NO;
  resultMessage.responseSongFileChunk = [ResponseSongFileChunk defaultInstance];
  return self;
}
- (BOOL) hasResponseSongOffer {
  return resultMessage.hasResponseSongOffer;
}
- (ResponseSongOffer*) responseSongOffer {
  return resultMessage.responseSongOffer;
}
- (MessageBuilder*) setResponseSongOffer:(ResponseSongOffer*) value {
  resultMessage.hasResponseSongOffer = YES;
  resultMessage.responseSongOffer = value;
  return self;
}
- (MessageBuilder*) setResponseSongOfferBuilder:(ResponseSongOfferBuilder*) builderForValue {
  return [self setResponseSongOffer:[builderForValue build]];
}
- (MessageBuilder*) mergeResponseSongOffer:(ResponseSongOffer*) value {
  if (resultMessage.hasResponseSongOffer &&
      resultMessage.responseSongOffer != [ResponseSongOffer defaultInstance]) {
    resultMessage.responseSongOffer =
      [[[ResponseSongOffer builderWithPrototype:resultMessage.responseSongOffer] mergeFrom:value] buildPartial];
  } else {
    resultMessage.responseSongOffer = value;
  }
  resultMessage.hasResponseSongOffer = YES;
  return self;
}
- (MessageBuilder*) clearResponseSongOffer {
  resultMessage.hasResponseSongOffer = NO;
  resultMessage.responseSongOffer = [ResponseSongOffer defaultInstance];
  return self;
}
- (BOOL) hasResponseLibraryChunk {
  return resultMessage.hasResponseLibraryChunk;
}
- (ResponseLibraryChunk*) responseLibraryChunk {
  return resultMessage.responseLibraryChunk;
}
- (MessageBuilder*) setResponseLibraryChunk:(ResponseLibraryChunk*) value {
  resultMessage.hasResponseLibraryChunk = YES;
  resultMessage.responseLibraryChunk = value;
  return self;
}
- (MessageBuilder*) setResponseLibraryChunkBuilder:(ResponseLibraryChunkBuilder*) builderForValue {
  return [self setResponseLibraryChunk:[builderForValue build]];
}
- (MessageBuilder*) mergeResponseLibraryChunk:(ResponseLibraryChunk*) value {
  if (resultMessage.hasResponseLibraryChunk &&
      resultMessage.responseLibraryChunk != [ResponseLibraryChunk defaultInstance]) {
    resultMessage.responseLibraryChunk =
      [[[ResponseLibraryChunk builderWithPrototype:resultMessage.responseLibraryChunk] mergeFrom:value] buildPartial];
  } else {
    resultMessage.responseLibraryChunk = value;
  }
  resultMessage.hasResponseLibraryChunk = YES;
  return self;
}
- (MessageBuilder*) clearResponseLibraryChunk {
  resultMessage.hasResponseLibraryChunk = NO;
  resultMessage.responseLibraryChunk = [ResponseLibraryChunk defaultInstance];
  return self;
}
- (BOOL) hasResponseDownloadTotalSize {
  return resultMessage.hasResponseDownloadTotalSize;
}
- (ResponseDownloadTotalSize*) responseDownloadTotalSize {
  return resultMessage.responseDownloadTotalSize;
}
- (MessageBuilder*) setResponseDownloadTotalSize:(ResponseDownloadTotalSize*) value {
  resultMessage.hasResponseDownloadTotalSize = YES;
  resultMessage.responseDownloadTotalSize = value;
  return self;
}
- (MessageBuilder*) setResponseDownloadTotalSizeBuilder:(ResponseDownloadTotalSizeBuilder*) builderForValue {
  return [self setResponseDownloadTotalSize:[builderForValue build]];
}
- (MessageBuilder*) mergeResponseDownloadTotalSize:(ResponseDownloadTotalSize*) value {
  if (resultMessage.hasResponseDownloadTotalSize &&
      resultMessage.responseDownloadTotalSize != [ResponseDownloadTotalSize defaultInstance]) {
    resultMessage.responseDownloadTotalSize =
      [[[ResponseDownloadTotalSize builderWithPrototype:resultMessage.responseDownloadTotalSize] mergeFrom:value] buildPartial];
  } else {
    resultMessage.responseDownloadTotalSize = value;
  }
  resultMessage.hasResponseDownloadTotalSize = YES;
  return self;
}
- (MessageBuilder*) clearResponseDownloadTotalSize {
  resultMessage.hasResponseDownloadTotalSize = NO;
  resultMessage.responseDownloadTotalSize = [ResponseDownloadTotalSize defaultInstance];
  return self;
}
- (BOOL) hasResponseGlobalSearch {
  return resultMessage.hasResponseGlobalSearch;
}
- (ResponseGlobalSearch*) responseGlobalSearch {
  return resultMessage.responseGlobalSearch;
}
- (MessageBuilder*) setResponseGlobalSearch:(ResponseGlobalSearch*) value {
  resultMessage.hasResponseGlobalSearch = YES;
  resultMessage.responseGlobalSearch = value;
  return self;
}
- (MessageBuilder*) setResponseGlobalSearchBuilder:(ResponseGlobalSearchBuilder*) builderForValue {
  return [self setResponseGlobalSearch:[builderForValue build]];
}
- (MessageBuilder*) mergeResponseGlobalSearch:(ResponseGlobalSearch*) value {
  if (resultMessage.hasResponseGlobalSearch &&
      resultMessage.responseGlobalSearch != [ResponseGlobalSearch defaultInstance]) {
    resultMessage.responseGlobalSearch =
      [[[ResponseGlobalSearch builderWithPrototype:resultMessage.responseGlobalSearch] mergeFrom:value] buildPartial];
  } else {
    resultMessage.responseGlobalSearch = value;
  }
  resultMessage.hasResponseGlobalSearch = YES;
  return self;
}
- (MessageBuilder*) clearResponseGlobalSearch {
  resultMessage.hasResponseGlobalSearch = NO;
  resultMessage.responseGlobalSearch = [ResponseGlobalSearch defaultInstance];
  return self;
}
- (BOOL) hasResponseTranscoderStatus {
  return resultMessage.hasResponseTranscoderStatus;
}
- (ResponseTranscoderStatus*) responseTranscoderStatus {
  return resultMessage.responseTranscoderStatus;
}
- (MessageBuilder*) setResponseTranscoderStatus:(ResponseTranscoderStatus*) value {
  resultMessage.hasResponseTranscoderStatus = YES;
  resultMessage.responseTranscoderStatus = value;
  return self;
}
- (MessageBuilder*) setResponseTranscoderStatusBuilder:(ResponseTranscoderStatusBuilder*) builderForValue {
  return [self setResponseTranscoderStatus:[builderForValue build]];
}
- (MessageBuilder*) mergeResponseTranscoderStatus:(ResponseTranscoderStatus*) value {
  if (resultMessage.hasResponseTranscoderStatus &&
      resultMessage.responseTranscoderStatus != [ResponseTranscoderStatus defaultInstance]) {
    resultMessage.responseTranscoderStatus =
      [[[ResponseTranscoderStatus builderWithPrototype:resultMessage.responseTranscoderStatus] mergeFrom:value] buildPartial];
  } else {
    resultMessage.responseTranscoderStatus = value;
  }
  resultMessage.hasResponseTranscoderStatus = YES;
  return self;
}
- (MessageBuilder*) clearResponseTranscoderStatus {
  resultMessage.hasResponseTranscoderStatus = NO;
  resultMessage.responseTranscoderStatus = [ResponseTranscoderStatus defaultInstance];
  return self;
}
- (BOOL) hasResponseGlobalSearchStatus {
  return resultMessage.hasResponseGlobalSearchStatus;
}
- (ResponseGlobalSearchStatus*) responseGlobalSearchStatus {
  return resultMessage.responseGlobalSearchStatus;
}
- (MessageBuilder*) setResponseGlobalSearchStatus:(ResponseGlobalSearchStatus*) value {
  resultMessage.hasResponseGlobalSearchStatus = YES;
  resultMessage.responseGlobalSearchStatus = value;
  return self;
}
- (MessageBuilder*) setResponseGlobalSearchStatusBuilder:(ResponseGlobalSearchStatusBuilder*) builderForValue {
  return [self setResponseGlobalSearchStatus:[builderForValue build]];
}
- (MessageBuilder*) mergeResponseGlobalSearchStatus:(ResponseGlobalSearchStatus*) value {
  if (resultMessage.hasResponseGlobalSearchStatus &&
      resultMessage.responseGlobalSearchStatus != [ResponseGlobalSearchStatus defaultInstance]) {
    resultMessage.responseGlobalSearchStatus =
      [[[ResponseGlobalSearchStatus builderWithPrototype:resultMessage.responseGlobalSearchStatus] mergeFrom:value] buildPartial];
  } else {
    resultMessage.responseGlobalSearchStatus = value;
  }
  resultMessage.hasResponseGlobalSearchStatus = YES;
  return self;
}
- (MessageBuilder*) clearResponseGlobalSearchStatus {
  resultMessage.hasResponseGlobalSearchStatus = NO;
  resultMessage.responseGlobalSearchStatus = [ResponseGlobalSearchStatus defaultInstance];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
